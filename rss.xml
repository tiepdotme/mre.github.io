<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Matthias Endler</title>
        <link>https://endler.dev</link>
        <description>Backend Engineer at trivago. Likes just-in-time compilers and hot chocolate</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://endler.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 26 Aug 2020 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Launching a Side Project Backed by Github Sponsors</title>
            <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2020/sponsors/</link>
            <guid>https://endler.dev/2020/sponsors/</guid>
            <description>&lt;p&gt;Yesterday we launched &lt;a href=&quot;https:&#x2F;&#x2F;analysis-tools.dev&quot;&gt;analysis-tools.dev&lt;&#x2F;a&gt;, and boy had I underestimated the response.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a side project about comparing static code analysis tools.
Static analysis helps improve code quality by detecting bugs in source code
without even running it.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s best about the project is that it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;analysis-tools-dev&#x2F;&quot;&gt;completely open-source&lt;&#x2F;a&gt;. We wanted to
build a product that wouldn&#x27;t depend on showing ads or tracking users. Instead,
we were asking for sponsors on Github — that&#x27;s it. We learned a lot in the
process, and if you like to do the same, keep reading!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-some-stats&quot;&gt;First, Some Stats&lt;&#x2F;h2&gt;
&lt;p&gt;Everyone likes business metrics. Here are some of ours:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The project started as an &lt;em&gt;awesome list&lt;&#x2F;em&gt; on Github in &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;obsolete&#x2F;&quot;&gt;December
2015&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re currently listing 470 static analysis tools.&lt;&#x2F;li&gt;
&lt;li&gt;Traffic grew continuously. Counting 7.5k stars and over 190 contributors at
the moment.&lt;&#x2F;li&gt;
&lt;li&gt;500-1000 unique users per week.&lt;&#x2F;li&gt;
&lt;li&gt;I had the idea to build a website for years now, but my coworker &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jakubsacha&quot;&gt;Jakub&lt;&#x2F;a&gt;
joined in May 2020 to finally make it a reality.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
        &lt;img src=&quot;star-history.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Github stars over time. That graph screams BUSINESS OPPORTUNITY.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Github stars over time. That graph screams BUSINESS OPPORTUNITY.
        &lt;br &#x2F;&gt;
        https:&#x2F;&#x2F;star-history.t9t.io
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&amp;quot;Why did it take five years to build a website!?&amp;quot;, I hear you ask. Because I
thought the idea was so obvious that others must have tried before and failed.&lt;&#x2F;p&gt;
&lt;p&gt;I put it off, even though nobody stepped in to fill this niche.&lt;br &#x2F;&gt;
I put it off, even though I kept the list up-to-date for five years, just to
learn about the tools out there.&lt;br &#x2F;&gt;
You get the gist: When ideas sound obvious, it&#x27;s probably because they are, so
don&#x27;t put things off for too long.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;revenue-model&quot;&gt;Revenue Model&lt;&#x2F;h2&gt;
&lt;p&gt;It took a while to figure out how to support the project financially. We knew
what we didn&#x27;t want: an SEO landfill backed by AdWords. Neither did we want to
&amp;quot;sell user data&amp;quot; to trackers.&lt;&#x2F;p&gt;
&lt;p&gt;We owe it to the contributors on Github to keep all data free for everyone.
How could we still build a service around it?
Initially, we thought about swallowing the infrastructure costs
ourselves, but we&#x27;d have no incentive to maintain the site or extend it with new
features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&quot;&gt;Github Sponsors&lt;&#x2F;a&gt; was still quite new at that time. Yet, as soon as we realized
that it was an option, it suddenly clicked: Companies that are not afraid of a
comparison with the competition have an incentive to support an open platform
that facilitates that. Furthermore, we could avoid bias and
build a product that makes comparing objective and accessible.&lt;&#x2F;p&gt;
&lt;p&gt;Sponsoring could be the antidote to soulless growth and instead allow us to build
a lean, sustainable side business. We don&#x27;t expect analysis-tools.dev ever to be
a full-time job. The market might be too small for that -- and that&#x27;s fine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tech&quot;&gt;Tech&lt;&#x2F;h2&gt;
&lt;p&gt;Once we had a revenue model, we could focus on the tech. We&#x27;re both engineers,
which helps with iterating quickly.&lt;&#x2F;p&gt;
&lt;p&gt;Initially, I wanted to build something fancy with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yewstack&#x2F;yew&quot;&gt;Yew&lt;&#x2F;a&gt;. It&#x27;s a Rust&#x2F;Webassembly framework and
your boy &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2019&#x2F;tinysearch&#x2F;&quot;&gt;likes Rust&#x2F;Webassembly&lt;&#x2F;a&gt;...&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m glad Jakub suggested something else: &lt;a href=&quot;https:&#x2F;&#x2F;www.gatsbyjs.com&#x2F;&quot;&gt;Gatsby&lt;&#x2F;a&gt;. Now, let me be honest with
you: I couldn&#x27;t care less about Gatsby. And that&#x27;s what I said to Jakub: &amp;quot;I
couldn&#x27;t care less about Gatsby.&amp;quot; But that&#x27;s precisely the point: not being
emotionally attached to something makes us focus on the job and not the tool.
We get more stuff done!&lt;&#x2F;p&gt;
&lt;p&gt;From there on, it was pretty much easy going: we used a starter template, Jakub
showed me how the GraphQL integration worked, and we
even got to use some Rust! The site runs on Cloudflare as an &lt;a href=&quot;https:&#x2F;&#x2F;workers.cloudflare.com&#x2F;&quot;&gt;edge
worker&lt;&#x2F;a&gt; built on top of Rust. (Yeah, I cheated
a bit.)&lt;&#x2F;p&gt;
&lt;p&gt;Count to three, MVP!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-sponsors&quot;&gt;Finding Sponsors&lt;&#x2F;h2&gt;
&lt;p&gt;So we had our prototype but zero sponsors so far. What started now was (and
still is) by far the hardest part: convincing people to support us.&lt;&#x2F;p&gt;
&lt;p&gt;We were smart enough not to send cold e-mails because most companies ignore
them. Instead, we turned to our network and realized that developers reached out
before to add their company&#x27;s projects to the old static analysis list on
Github.&lt;&#x2F;p&gt;
&lt;p&gt;These were the people we contacted first. We tried to keep the messages short
and personal.&lt;&#x2F;p&gt;
&lt;p&gt;What worked best was a medium-sized e-mail with some context and a reminder that
they contributed to the project before. We included a link to our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;analysis-tools-dev&#x2F;&quot;&gt;sponsors
page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Businesses want reliable partners and a reasonable value proposal,
so a prerequisite is that the sponsor page has to be meticulously polished.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;sponsors&amp;#x2F;analysis-tools-dev&quot;&gt;
        &lt;img src=&quot;sponsors.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Our Github Sponsors page&quot;
        &#x2F;&gt;
    &lt;&#x2F;a&gt;
    &lt;figcaption&gt;
        Our Github Sponsors page
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Just like &lt;em&gt;Star Wars Episode IX&lt;&#x2F;em&gt;, we received mixed reviews: many people never
replied, others passed the message
on to their managers, which in turn never replied, while others again had no
interest in sponsoring open-source projects in general. That&#x27;s all fair game:
people are busy, and sponsorware is quite a new concept.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A little rant: I&#x27;m of the opinion that tech businesses don&#x27;t nearly sponsor
enough compared to all the value they get from Open Source. Would your company
exist if there hadn&#x27;t been a free operating system like Linux or a web server
like Nginx or Apache when it was founded?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There was, however, a rare breed of respondents, which expressed interest but
needed some guidance. For many, it is the first step towards sponsoring &lt;em&gt;any&lt;&#x2F;em&gt;
developer through Github Sponsors &#x2F; OpenCollective.&lt;&#x2F;p&gt;
&lt;p&gt;It helped that we use OpenCollective as our fiscal host, which handles invoicing
and donation transfers. &lt;a href=&quot;https:&#x2F;&#x2F;docs.opencollective.com&#x2F;help&#x2F;&quot;&gt;Their docs&lt;&#x2F;a&gt;
helped us a lot when getting started.&lt;&#x2F;p&gt;
&lt;p&gt;The task of finding sponsors &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=qHfAaG34H30&quot;&gt;is never
done&lt;&#x2F;a&gt;, but it was very reassuring
to hear from &lt;a href=&quot;https:&#x2F;&#x2F;www.deepcode.ai&#x2F;&quot;&gt;DeepCode&lt;&#x2F;a&gt; - an AI-based semantic
analysis service, that they were willing to take a chance on us.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to them, we could push product over the finishing line. Because of them,
we can keep the site free for everybody. It also means the website is kept free
from ads and trackers.&lt;&#x2F;p&gt;
&lt;p&gt;In turn, DeepCode gets exposed to many great developers that care about code
quality and might become loyal customers. Also, they get recognized as an
open-source-friendly tech company, which is more important than ever if you&#x27;re
trying to sell dev tools. Win-win!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;marketing&quot;&gt;Marketing&lt;&#x2F;h2&gt;
&lt;p&gt;Jakub and I both had started businesses before, but this was the first truly
&lt;em&gt;open&lt;&#x2F;em&gt; product we would build.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Phase 1: Ship early 🚀&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We decided for a soft launch: deploy the site as early as possible and let the
crawlers index it. The fact that the page is statically rendered and follows
some basic SEO guidelines sure helped with improving our search engine rankings
over time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Phase 2: Ask for feedback from your target audience 💬&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After we got some organic traffic and our first votes, we reached out to our
developer friends to test the page and vote on tools they know and love. This
served as an early validation, and we got some honest feedback, which helped us
catch the most blatant flaws.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Phase 3: Prepare announcement post 📝&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We wrote a blog post which, even if clickbaity, got the job done: &lt;a href=&quot;https:&#x2F;&#x2F;analysis-tools.dev&#x2F;blog&#x2F;static-analysis-is-broken-lets-fix-it&quot;&gt;Static
Analysis is Broken — Let&#x27;s Fix
It!&lt;&#x2F;a&gt; It
pretty much captures our frustration about the space and why building an open
platform is important. We could have done a better job explaining the technical
differences between the different analysis tools, but that&#x27;s for another day.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Phase 4: Announce on social media 🔥&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Shortly before the official announcement, we noticed that the search
functionality was broken (of course). Turns out, we hit the free quota limit on
&lt;a href=&quot;algolia.com&#x2F;&quot;&gt;Algolia&lt;&#x2F;a&gt; a biiit earlier than expected. 😅 No biggie: quick
exchange with Algolia&#x27;s customer support, and they moved us over to the
open-source plan (which we didn&#x27;t know existed). We were back on track!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Site note: Algolia customer support is top-notch. Responsive, tech-savvy,
and helpful. Using Algolia turned out to be a great fit for our product.
Response times are consistently in the low milliseconds and the integration
with Gatsby was quick and easy.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;figure&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;twitter.com&amp;#x2F;matthiasendler&amp;#x2F;status&amp;#x2F;1296162427797671936&quot;&gt;
        &lt;img src=&quot;tweet.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;We got quite a bit of buzz from that
tweet: 55 retweets, 66 likes and counting&quot;
        &#x2F;&gt;
    &lt;&#x2F;a&gt;
    &lt;figcaption&gt;
        We got quite a bit of buzz from that
tweet: 55 retweets, 66 likes and counting
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Clearly, everyone knew that we were asking for support here, but we are thankful
for every single one that liked and retweeted. It&#x27;s one of these situations
where having a network of like-minded people can help.&lt;&#x2F;p&gt;
&lt;p&gt;As soon as we were confident that the site wasn&#x27;t &lt;em&gt;completely&lt;&#x2F;em&gt; broken, we set off
to announce it on
&lt;a href=&quot;https:&#x2F;&#x2F;lobste.rs&#x2F;s&#x2F;n2ecfs&#x2F;static_analysis_is_broken_let_s_fix_it&quot;&gt;Lobste.rs&lt;&#x2F;a&gt;
(2 downvotes),
&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;SideProject&#x2F;comments&#x2F;icupeu&#x2F;we_made_a_website_to_compare_470_static_analysis&#x2F;&quot;&gt;&#x2F;r&#x2F;SideProject&lt;&#x2F;a&gt;
(3 upvotes) and &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24221708&quot;&gt;HackerNews&lt;&#x2F;a&gt; (173
upvotes, 57 comments). Social media is kind of unpredictable.
It helps to cater the message to each audience and stay humble, though.&lt;&#x2F;p&gt;
&lt;p&gt;The response from all of that marketing effort was &lt;strong&gt;nuts&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;traffic.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Traffic on launch day&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Traffic on launch day
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Perhaps unsurprisingly, the Cloudflare edge workers didn&#x27;t break a sweat.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;worker.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Edge worker CPU time on Cloudflare&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Edge worker CPU time on Cloudflare
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;My boss &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;xo4n&quot;&gt;Xoan Vilas&lt;&#x2F;a&gt; even did a quick performance
analysis and he approved. (Thanks boss!)&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;twitter.com&amp;#x2F;xo4n&amp;#x2F;status&amp;#x2F;1296432035788193794&quot;&gt;
        &lt;img src=&quot;perf.jpg&quot; 
        loading=&quot;lazy&quot;
        &#x2F;&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;High fives all around!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;now-what&quot;&gt;Now what?&lt;&#x2F;h2&gt;
&lt;p&gt;Of course, we&#x27;ll add new features; of course, we have more plans for the future,
yada yada yada. Instead, let&#x27;s reflect on that milestone: a healthy little
business with no ads or trackers, solely carried by sponsors. 🎉&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I want you to &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=9XGyxOwM0tE&quot;&gt;look deep inside yourself and find your own little
product to work on&lt;&#x2F;a&gt;. It&#x27;s probably
right in front of your nose, and like myself, you&#x27;ve been putting it off for too
long. Well, not anymore! The next success story is yours. So go out and build
things.&lt;&#x2F;p&gt;
&lt;p&gt;Oh wait! ...before you leave, would you mind checking out
&lt;a href=&quot;https:&#x2F;&#x2F;analysis-tools.dev&#x2F;&quot;&gt;analysis-tools.dev&lt;&#x2F;a&gt; and hitting that upvote button
for a few tools you like? Hey, and if you feel super generous today
(or you have a fabulous employer that cares about open-source), why not check out
our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;analysis-tools-dev&#x2F;&quot;&gt;sponsorship page&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;team.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Jakub and me in Vienna, Austria. I&#x27;m not actually that small.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Jakub and me in Vienna, Austria. I&#x27;m not actually that small.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
</description>
        </item>
        <item>
            <title>What Happened To Programming In The 2010s?</title>
            <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2020/review/</link>
            <guid>https://endler.dev/2020/review/</guid>
            <description>&lt;p&gt;A while ago, I read an article titled &lt;a href=&quot;https:&#x2F;&#x2F;avc.com&#x2F;2019&#x2F;12&#x2F;what-happened-in-the-2010s&#x2F;&quot;&gt;&amp;quot;What Happened In The
2010s&amp;quot;&lt;&#x2F;a&gt; by Fred Wilson. The
post highlights key changes in technology and business during the last ten
years. This inspired me to think about a much smaller topic: &lt;em&gt;What Happened To
Programming In The 2010s?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;info&quot;&gt;
  🚓 I probably forgot like 90% of what actually happened. Please
don&#x27;t sue me.
My goal is to reflect on the &lt;u&gt;past&lt;&#x2F;u&gt; so that you can better predict the &lt;u&gt;future&lt;&#x2F;u&gt;.
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;where-to-start&quot;&gt;Where To Start?&lt;&#x2F;h2&gt;
&lt;p&gt;From a mile-high perspective, programming is still the same as a decade ago:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Punch program into editor&lt;&#x2F;li&gt;
&lt;li&gt;Feed to compiler (or interpreter)&lt;&#x2F;li&gt;
&lt;li&gt;Bleep Boop 🤖&lt;&#x2F;li&gt;
&lt;li&gt;Receive output&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;But if we take a closer look, a &lt;em&gt;lot&lt;&#x2F;em&gt; has changed around us.
Many things we take for granted today didn&#x27;t exist a decade ago.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-happened-before&quot;&gt;What Happened Before?&lt;&#x2F;h2&gt;
&lt;p&gt;Back in 2009, I wrote &lt;a href=&quot;https:&#x2F;&#x2F;jquery.com&#x2F;&quot;&gt;jQuery&lt;&#x2F;a&gt; plugins, ran websites on
shared hosting services, and uploaded content via
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File_Transfer_Protocol&quot;&gt;FTP&lt;&#x2F;a&gt;. Sometimes code was
copy-pasted from dubious forums, tutorials on blogs, or even hand-transcribed
from books. &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;&quot;&gt;Stack Overflow&lt;&#x2F;a&gt; (which launched on
15&lt;sup&gt;th&lt;&#x2F;sup&gt; of September 2008) was still in its infancy. Version control
was done with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Concurrent_Versions_System&quot;&gt;CVS&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Apache_Subversion&quot;&gt;SVN&lt;&#x2F;a&gt; — or not at all.
&lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2018&#x2F;github&#x2F;&quot;&gt;I signed up for Github&lt;&#x2F;a&gt; on 3&lt;sup&gt;rd&lt;&#x2F;sup&gt; of
January 2010. Nobody had even heard of a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Raspberry_Pi&quot;&gt;Raspberry
Pi&lt;&#x2F;a&gt; (which only got released in
2012).&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;xkcd_2324.png&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;&lt;a href=&#x27;https:&#x2F;&#x2F;xkcd.com&#x2F;2324&#x2F;&#x27;&gt;xkcd #2324&lt;&#x2F;a&gt;&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        &lt;a href=&#x27;https:&#x2F;&#x2F;xkcd.com&#x2F;2324&#x2F;&#x27;&gt;xkcd #2324&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;an-explosion-of-new-programming-languages&quot;&gt;An Explosion Of New Programming Languages&lt;&#x2F;h2&gt;
&lt;p&gt;The last decade saw a vast number of new and exciting programming
languages.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crystal-lang.org&#x2F;&quot;&gt;Crystal&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;dart.dev&#x2F;&quot;&gt;Dart&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;elixir-lang.org&#x2F;&quot;&gt;Elixir&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;elm-lang.org&#x2F;&quot;&gt;Elm&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&#x2F;&quot;&gt;Julia&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;kotlinlang.org&#x2F;&quot;&gt;Kotlin&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;nim-lang.org&#x2F;&quot;&gt;Nim&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;swift.org&#x2F;&quot;&gt;Swift&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;&quot;&gt;TypeScript&lt;&#x2F;a&gt;
all released their first stable version!&lt;&#x2F;p&gt;
&lt;p&gt;Even more exciting: &lt;em&gt;all&lt;&#x2F;em&gt; of the above languages are developed in the open now, and the source code is
freely available on Github. That means, everyone can contribute to their development — a big testament to Open Source.&lt;&#x2F;p&gt;
&lt;p&gt;Each of those languages introduced new ideas that were not widespread before:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Strong Type Systems&lt;&#x2F;em&gt;: Kotlin and Swift made &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Nullable_type&quot;&gt;optional null types&lt;&#x2F;a&gt;
mainstream, TypeScript brought types to JavaScript, Algebraic datatypes are
common in Kotlin, Swift, TypeScript, and Rust.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Interoperability&lt;&#x2F;em&gt;: Dart compiles to JavaScript, Elixir interfaces with
Erlang, Kotlin with Java, and Swift with Objective-C.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Better Performance&lt;&#x2F;em&gt;: Go promoted Goroutines and channels for easier
concurrency and impressed with a
&lt;a href=&quot;https:&#x2F;&#x2F;blog.golang.org&#x2F;ismmkeynote&quot;&gt;sub-millisecond&lt;&#x2F;a&gt; Garbage Collector,
while Rust avoids Garbage Collector overhead altogether thanks to ownership and borrowing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is just a short list, but innovation in the programming language field has
greatly accelerated.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-innovation-in-older-languages&quot;&gt;More Innovation in Older Languages&lt;&#x2F;h2&gt;
&lt;p&gt;Established languages didn&#x27;t stand still either. A few examples:&lt;&#x2F;p&gt;
&lt;p&gt;C++ woke up from its long winter sleep and released C++11 after its last major
release in 1998. It introduced numerous new features like Lambdas, &lt;code&gt;auto&lt;&#x2F;code&gt;
pointers, and range-based loops to the language.&lt;&#x2F;p&gt;
&lt;p&gt;At the beginning of the last decade, the latest PHP version was 5.3. We&#x27;re at
7.4 now. (We skipped 6.0, but I&#x27;m not ready to talk about it yet.) Along the
way, it got over twice as fast.  &lt;a href=&quot;https:&#x2F;&#x2F;stephencoakley.com&#x2F;2020&#x2F;06&#x2F;10&#x2F;dumb-reasons-to-hate-php&quot;&gt;PHP is a truly modern programming language
now&lt;&#x2F;a&gt; with a
thriving ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;Heck, even Visual Basic has tuples now. (Sorry, I couldn&#x27;t resist.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;faster-release-cycles&quot;&gt;Faster Release Cycles&lt;&#x2F;h2&gt;
&lt;p&gt;Most languages adopted a quicker release cycle. Here&#x27;s a list for some popular languages:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Language&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Current release cycle&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;C&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;irregular&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;C#&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;~ 12 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;C++&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;~ 3 years&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Go&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;6 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Java&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;6 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;JavaScript (ECMAScript)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;12 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;PHP&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;12 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Python&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;12 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Ruby&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;12 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Rust&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;6 weeks!&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Swift&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;6 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Visual Basic .NET&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;~ 24 months&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;the-slow-death-of-null&quot;&gt;The Slow Death Of Null&lt;&#x2F;h2&gt;
&lt;p&gt;Close to the end of the last decade, in a talk from 25&lt;sup&gt;th&lt;&#x2F;sup&gt;of August 2009,
Tony Hoare described the &lt;code&gt;null&lt;&#x2F;code&gt; pointer as his &lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&#x2F;&quot;&gt;Billion Dollar
Mistake&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A study by the Chromium project found that &lt;a href=&quot;https:&#x2F;&#x2F;www.chromium.org&#x2F;Home&#x2F;chromium-security&#x2F;memory-safety&quot;&gt;70% of their serious security bugs were memory safety problems&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;www.zdnet.com&#x2F;article&#x2F;microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues&#x2F;&quot;&gt;same for Microsoft&lt;&#x2F;a&gt;). Fortunately, the notion that our &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@sgrif&#x2F;no-the-problem-isnt-bad-coders-ed4347810270&quot;&gt;memory safety problem isn&#x27;t bad coders&lt;&#x2F;a&gt;
has finally gained some traction.&lt;br &#x2F;&gt;
Many mainstream languages embraced safer alternatives to &lt;code&gt;null&lt;&#x2F;code&gt;: nullable
types, &lt;code&gt;Option&lt;&#x2F;code&gt;, and &lt;code&gt;Result&lt;&#x2F;code&gt; types. Languages like Haskell had these features
before, but they only gained popularity in the 2010s.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;revenge-of-the-type-system&quot;&gt;Revenge of the Type System&lt;&#x2F;h2&gt;
&lt;p&gt;Closely related is the &lt;a href=&quot;https:&#x2F;&#x2F;www.johndcook.com&#x2F;blog&#x2F;2010&#x2F;06&#x2F;09&#x2F;dynamic-typing-and-risk-homeostasis&#x2F;&quot;&gt;debate about type
systems&lt;&#x2F;a&gt;.
The past decade has seen type systems make their stage comeback; TypeScript,
Python, and PHP (just to name a few) started to embrace type systems.&lt;&#x2F;p&gt;
&lt;p&gt;The trend goes towards type inference: add types to make your intent clearer for
other humans and in the face of ambiguity — otherwise, skip them. Java,
C++, Go, Kotlin, Swift, and Rust are popular examples with type inference support. I
can only speak for myself, but I think writing Java has become a lot more
ergonomic in the last few years.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exponential-growth-of-libraries-and-frameworks&quot;&gt;Exponential Growth Of Libraries and Frameworks&lt;&#x2F;h2&gt;
&lt;p&gt;As of today, npm hosts &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;&quot;&gt;1,330,634 packages&lt;&#x2F;a&gt;. That&#x27;s over a million
packages that somebody else is maintaining for you. Add another &lt;a href=&quot;https:&#x2F;&#x2F;rubygems.org&#x2F;stats&quot;&gt;160,488 Ruby
gems&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;&quot;&gt;243,984 Python projects&lt;&#x2F;a&gt;,
and top it off with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;42,547  Rust crates&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;module_counts.png&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Number of packages for popular programming languages.&lt;br &#x2F;&gt; Don&#x27;t ask me what happened to npm in 2019.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Number of packages for popular programming languages.&lt;br &#x2F;&gt; Don&#x27;t ask me what happened to npm in 2019.
        &lt;br &#x2F;&gt;
        &lt;a href=&#x27;http:&#x2F;&#x2F;www.modulecounts.com&#x2F;&#x27;&gt;Module Counts&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Of course, there&#x27;s the occasional
&lt;a href=&quot;https:&#x2F;&#x2F;www.davidhaney.io&#x2F;npm-left-pad-have-we-forgotten-how-to-program&#x2F;&quot;&gt;leftpad&lt;&#x2F;a&gt;,
but it also means that we have to write less library code ourselves and can
focus on business value instead. On the other hand, there are more potential
points of failure, and auditing is difficult. &lt;a href=&quot;https:&#x2F;&#x2F;sambleckley.com&#x2F;writing&#x2F;npm.html&quot;&gt;There is also a large number of outdated
packages&lt;&#x2F;a&gt;. For a more in-depth discussion, I recommend the &lt;a href=&quot;https:&#x2F;&#x2F;www.coreinfrastructure.org&#x2F;wp-content&#x2F;uploads&#x2F;sites&#x2F;6&#x2F;2020&#x2F;02&#x2F;census_ii_vulnerabilities_in_the_core.pdf&quot;&gt;Census II report by
the Linux Foundation &amp;amp; Harvard&lt;&#x2F;a&gt; [PDF].&lt;&#x2F;p&gt;
&lt;p&gt;We also went a bit crazy on frontend frameworks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angularjs.org&#x2F;&quot;&gt;Angular&lt;&#x2F;a&gt; in 2010&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;React&lt;&#x2F;a&gt; in 2013&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vuejs.org&#x2F;&quot;&gt;Vue&lt;&#x2F;a&gt; in 2014&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;&quot;&gt;Svelte&lt;&#x2F;a&gt; in 2016&lt;&#x2F;li&gt;
&lt;li&gt;...and soon &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yewstack&#x2F;yew&#x2F;&quot;&gt;Yew&lt;&#x2F;a&gt;?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;no-free-lunch&quot;&gt;No Free Lunch&lt;&#x2F;h2&gt;
&lt;p&gt;A review like this wouldn&#x27;t be complete without taking a peek at &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Moore&amp;#x27;s_law&quot;&gt;Moore&#x27;s Law&lt;&#x2F;a&gt;.
It has held up surprisingly well in the last decade:&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;moore_2018.png&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;&lt;a href=&#x27;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Moore%27s_law&#x27;&gt;Wikipedia&lt;&#x2F;a&gt;&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        &lt;a href=&#x27;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Moore%27s_law&#x27;&gt;Wikipedia&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;There&#x27;s a catch, though.
Looking at single-core performance, the curve is flattening:&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;moore_single.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;&lt;a href=&#x27;https:&#x2F;&#x2F;web.stanford.edu&#x2F;~hennessy&#x2F;Future%20of%20Computing.pdf&#x27;&gt;Standford University: The Future of Computing&lt;&#x2F;a&gt;&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        &lt;a href=&#x27;https:&#x2F;&#x2F;web.stanford.edu&#x2F;~hennessy&#x2F;Future%20of%20Computing.pdf&#x27;&gt;Standford University: The Future of Computing&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The new transistors prophesied by Moore don’t make our CPUs faster but instead
add other kinds of processing capabilities like more parallelism or hardware
encryption. 
There is no free lunch anymore. Engineers have to find new ways of making their
applications faster, e.g. by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Concurrent_computing&quot;&gt;embracing concurrent
execution&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Callbacks, coroutines, and eventually async&#x2F;await are becoming industry
standards.&lt;&#x2F;p&gt;
&lt;p&gt;GPUs (Graphical Processing Units) became very powerful, allowing for massively
parallel computations, which caused a renaissance of Machine Learning for practical use-cases:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deep learning becomes feasible, which leads to machine learning becoming
integral to many widely used software services and applications.
— &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Timeline_of_machine_learning&quot;&gt;Timeline of Machine Learning on Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;Compute&lt;&#x2F;em&gt; is ubiquitous, so in most cases, energy efficiency plays a more prominent role now than raw performance (at least for consumer devices).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unlikely-twists-of-fate&quot;&gt;Unlikely Twists Of Fate&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft is a cool kid now. It acquired Github, announced the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Windows_Subsystem_for_Linux&quot;&gt;Windows subsystem for Linux&lt;&#x2F;a&gt; (which should really be called Linux Subsystem for Windows), open sourced
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;MS-DOS&quot;&gt;MS-DOS&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;news.microsoft.com&#x2F;2014&#x2F;11&#x2F;12&#x2F;microsoft-takes-net-open-source-and-cross-platform-adds-new-development-capabilities-with-visual-studio-2015-net-2015-and-visual-studio-online&#x2F;&quot;&gt;.NET&lt;&#x2F;a&gt;.
Even the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;calculator&quot;&gt;Microsoft Calculator&lt;&#x2F;a&gt; is now open source.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;blog&#x2F;red-hat-ibm-creating-leading-hybrid-cloud-provider&quot;&gt;IBM acquired Red Hat&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lore.kernel.org&#x2F;lkml&#x2F;CA+55aFy+Hv9O5citAawS+mVZO+ywCKd9NQ2wxUmGsz9ZJzqgJQ@mail.gmail.com&#x2F;&quot;&gt;Linus Torvalds apologized for his behavior, took time off&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Open source became the default for software development (?).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re now thinking: &lt;em&gt;Matthias, you totally forgot X&lt;&#x2F;em&gt;, then I brought
that point home. This is not even close to everything that happened. You&#x27;d
roughly need a decade to talk about all of it.&lt;&#x2F;p&gt;
&lt;p&gt;Personally, I&#x27;m excited about the &lt;em&gt;next&lt;&#x2F;em&gt; ten years.
Software eats the world — at an ever-faster pace.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Tips for Faster Rust Compile Times</title>
            <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2020/rust-compile-times/</link>
            <guid>https://endler.dev/2020/rust-compile-times/</guid>
            <description>&lt;p&gt;When it comes to runtime performance, Rust is one of the fastest guns in the
west. It is &lt;a href=&quot;https:&#x2F;&#x2F;benchmarksgame-team.pages.debian.net&#x2F;benchmarksgame&#x2F;which-programs-are-fastest.html&quot;&gt;on par with the likes of C and
C++&lt;&#x2F;a&gt;
and sometimes even surpasses them. Compile times, however? That&#x27;s a different story.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-is-rust-compilation-slow&quot;&gt;Why Is Rust Compilation Slow?&lt;&#x2F;h2&gt;
&lt;p&gt;Wait a sec, slow in comparison to what? For example, if you compare it with Go,
their compiler is doing a lot less work in general. It lacks support for
generics and macros. Also, the Go compiler was &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;faq#What_compiler_technology_is_used_to_build_the_compilers&quot;&gt;built from
scratch&lt;&#x2F;a&gt;
as a monolithic tool consisting of both, the frontend and the backend (rather
than relying on, say, &lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;&quot;&gt;LLVM&lt;&#x2F;a&gt; to take over the backend part,
which is the case for Rust or Swift). This has advantages (more options for
tweaking the entire process, yay) and disadvantages (higher maintenance costs
and less supported architectures).&lt;&#x2F;p&gt;
&lt;p&gt;Comparing across toolchains makes little sense here, and compile times are
mostly fine for smaller projects, so if your project builds fast enough, your
job here is done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;choosing-runtime-over-compile-time-performance&quot;&gt;Choosing Runtime Over Compile-Time Performance&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;As is often cautioned in debates among their designers, programming language
design is full of tradeoffs. One of those fundamental tradeoffs is runtime
performance vs. compile-time performance, and the Rust team nearly always (if
not always) chose runtime over compile-time.&lt;br &#x2F;&gt;
— &lt;a href=&quot;https:&#x2F;&#x2F;pingcap.com&#x2F;blog&#x2F;rust-compilation-model-calamity&#x2F;&quot;&gt;Brian Anderson&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Overall, there are a few features and design decisions that limit Rust
compilation speed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Macros&lt;&#x2F;strong&gt;: Code generation with macros can be quite expensive.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Type checking&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Monomorphization&lt;&#x2F;strong&gt;: this is the process of generating specialized versions
of generic functions. E.g., a function that takes an &lt;code&gt;Into&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; gets
converted into one that takes a &lt;code&gt;String&lt;&#x2F;code&gt; and one that takes a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;LLVM&lt;&#x2F;strong&gt;: that&#x27;s the default compiler backend for Rust, where a lot of the
heavy-lifting (like code-optimizations) takes place. LLVM is &lt;a href=&quot;https:&#x2F;&#x2F;nikic.github.io&#x2F;2020&#x2F;05&#x2F;10&#x2F;Make-LLVM-fast-again.html&quot;&gt;notorious for
being slow&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Linking&lt;&#x2F;strong&gt;: Strictly speaking, this is not part of compiling but happens
right after. It &amp;quot;connects&amp;quot; your Rust binary with the system libraries. &lt;code&gt;cargo&lt;&#x2F;code&gt;
does not explicitly mark the linking step, so many people add it to the
overall compilation time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you&#x27;re interested in all the gory details, check out &lt;a href=&quot;https:&#x2F;&#x2F;pingcap.com&#x2F;blog&#x2F;rust-compilation-model-calamity&#x2F;&quot;&gt;this blog
post&lt;&#x2F;a&gt; by Brian
Anderson.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;upstream-work&quot;&gt;Upstream Work&lt;&#x2F;h2&gt;
&lt;p&gt;Making the Rust compiler faster is an ongoing process, and many fearless people
are &lt;a href=&quot;https:&#x2F;&#x2F;blog.mozilla.org&#x2F;nnethercote&#x2F;2020&#x2F;04&#x2F;24&#x2F;how-to-speed-up-the-rust-compiler-in-2020&#x2F;&quot;&gt;working on
it&lt;&#x2F;a&gt;.
Thanks to their hard work, compiler speed has improved &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;cezxjn&#x2F;compiler_speed_has_improved_3040_across_the_board&#x2F;&quot;&gt;30-40% across the board
year-to-date, with some projects seeing up to 45%+ improvements&lt;&#x2F;a&gt;.
On top of that, Rust tracks compile regressions on a &lt;a href=&quot;https:&#x2F;&#x2F;perf.rust-lang.org&#x2F;&quot;&gt;website dedicated to
performance&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Work is also put into &lt;a href=&quot;https:&#x2F;&#x2F;nikic.github.io&#x2F;2020&#x2F;05&#x2F;10&#x2F;Make-LLVM-fast-again.html&quot;&gt;optimizing the LLVM
backend&lt;&#x2F;a&gt;. Rumor
has it that there&#x27;s still a lot of low-hanging fruit. 🍇&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-bother&quot;&gt;Why Bother?&lt;&#x2F;h2&gt;
&lt;p&gt;Overall, the Rust compiler is legitimately doing a great job. That said, above a
certain project size, the compile times are... let&#x27;s just say they could be
better.&lt;&#x2F;p&gt;
&lt;p&gt;According to the &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;04&#x2F;17&#x2F;Rust-survey-2019.html&quot;&gt;Rust 2019
survey&lt;&#x2F;a&gt;, improving
compile times is #4 on the Rust wishlist:&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;rust-survey.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Rust Survey results 2019. (&lt;a href=&#x27;https:&#x2F;&#x2F;xkcd.com&#x2F;303&#x2F;&#x27;&gt;Obligatory xkcd&lt;&#x2F;a&gt;.)&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Rust Survey results 2019. (&lt;a href=&#x27;https:&#x2F;&#x2F;xkcd.com&#x2F;303&#x2F;&#x27;&gt;Obligatory xkcd&lt;&#x2F;a&gt;.)
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;But all hope is not lost! Below is a list of &lt;strong&gt;tips and tricks on how to make
your Rust project compile faster today&lt;&#x2F;strong&gt;. They are roughly ordered by
practicality, so start at the top and work your way down until you&#x27;re happy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-cargo-check-instead-of-cargo-build&quot;&gt;Use &lt;code&gt;cargo check&lt;&#x2F;code&gt; Instead Of &lt;code&gt;cargo build&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Most of the time, you don&#x27;t even have to compile your project at all; you just
want to know if you messed up somewhere. Whenever you can, skip compilation
altogether. What you want instead is laser-fast code linting, type- and
borrow-checking.&lt;&#x2F;p&gt;
&lt;p&gt;For that, cargo has a special treat for you: ✨ &lt;code&gt;cargo check&lt;&#x2F;code&gt; ✨. Consider the
differences in the number of instructions between &lt;code&gt;cargo check&lt;&#x2F;code&gt; on the left and
&lt;code&gt;cargo debug&lt;&#x2F;code&gt; in the middle. (Note that the scales are different.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2020&#x2F;rust-compile-times&#x2F;cargo-check.webp&quot; alt=&quot;Speedup factors: check 1, debug 5, opt 20&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A sweet trick I use is to run it in the background with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;passcod&#x2F;cargo-watch&quot;&gt;&lt;code&gt;cargo watch&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. This way, it will &lt;code&gt;cargo check&lt;&#x2F;code&gt;
whenever you change a file.&lt;&#x2F;p&gt;
&lt;p&gt;⭐ &lt;strong&gt;Pro-tip&lt;&#x2F;strong&gt;: Use &lt;code&gt;cargo watch -c&lt;&#x2F;code&gt; to clear the screen before every run.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-rust-analyzer-instead-of-rust-language-server&quot;&gt;Use Rust Analyzer Instead Of Rust Language Server&lt;&#x2F;h2&gt;
&lt;p&gt;Another quick way to check if you set the codebase on fire is to use a &amp;quot;language
server&amp;quot;. That&#x27;s basically a &amp;quot;linter as a service&amp;quot;, that runs next to your
editor.&lt;&#x2F;p&gt;
&lt;p&gt;For a long time, the default choice here was
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rls&quot;&gt;rls&lt;&#x2F;a&gt;, but lately, folks moved over to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-analyzer&#x2F;rust-analyzer&quot;&gt;rust-analyzer&lt;&#x2F;a&gt;, because it&#x27;s
more feature-complete and way more snappy. It supports all major IDEs.
Switching to that alone might save your day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;remove-unused-dependencies&quot;&gt;Remove Unused Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;So let&#x27;s say you tried all of the above and find that compilation is still slow.
What now?&lt;&#x2F;p&gt;
&lt;p&gt;Dependencies sometimes become obsolete thanks to refactoring. From time to time
it helps to check if all of them are still needed to save compile time.&lt;&#x2F;p&gt;
&lt;p&gt;If this is your own project (or a project you like to contribute to), do a quick
check if you can toss anything with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;est31&#x2F;cargo-udeps&quot;&gt;cargo-udeps&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; install cargo-udeps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; +nightly udeps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;update-remaining-dependencies&quot;&gt;Update Remaining Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;Next, update your dependencies, because they themselves could have tidied up
their dependency tree lately.&lt;&#x2F;p&gt;
&lt;p&gt;Take a deep dive with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kbknapp&#x2F;cargo-outdated&quot;&gt;&lt;code&gt;cargo-outdated&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; or &lt;code&gt;cargo tree&lt;&#x2F;code&gt;
(built right into cargo itself) to find any outdated dependencies. On top of
that, use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustSec&#x2F;cargo-audit&quot;&gt;&lt;code&gt;cargo audit&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to get
notified about any vulnerabilities which need to be addressed, or deprecated
crates which need a replacement.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a nice workflow that I learned from &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;gi7v2v&#x2F;is_it_wrong_of_me_to_think_that_rust_crates_have&#x2F;fqe848y&quot;&gt;&#x2F;u&#x2F;oherrala on
Reddit&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;cargo update&lt;&#x2F;code&gt; to update to the latest &lt;a href=&quot;https:&#x2F;&#x2F;semver.org&#x2F;&quot;&gt;semver&lt;&#x2F;a&gt;
compatible version.&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;cargo outdated -wR&lt;&#x2F;code&gt; to find newer, possibly incompatible dependencies.
Update those and fix code as needed.&lt;&#x2F;li&gt;
&lt;li&gt;Find duplicate versions of a dependency and figure out
where they come from: &lt;code&gt;cargo tree --duplicate&lt;&#x2F;code&gt; shows dependencies which come in multiple versions.&lt;br &#x2F;&gt;
(Thanks to &#x2F;u&#x2F;dbdr for &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hdb5m4&#x2F;tips_for_faster_rust_compile_times&#x2F;fvm1r2w&#x2F;&quot;&gt;pointing this out&lt;&#x2F;a&gt;.)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;⭐ &lt;strong&gt;Pro-tip&lt;&#x2F;strong&gt;: Step 3 is a great way to contribute back to the community! Clone
the repository and execute steps 1 and 2. Finally, send a pull request to the
maintainers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;replace-heavy-dependencies&quot;&gt;Replace Heavy Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;From time to time, it helps to shop around for more lightweight alternatives to
popular crates.&lt;&#x2F;p&gt;
&lt;p&gt;Again, &lt;code&gt;cargo tree&lt;&#x2F;code&gt; is your friend here to help you understand which of your
dependencies are quite &lt;em&gt;heavy&lt;&#x2F;em&gt;: they require many other crates, causing
excessive network I&#x2F;O and slow down your build. Then search for lighter
alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&quot;&gt;serde&lt;&#x2F;a&gt;? Check out
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;miniserde&quot;&gt;miniserde&lt;&#x2F;a&gt; and maybe even
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-fl3&#x2F;nanoserde&quot;&gt;nanoserde&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanmonstar&#x2F;reqwest&quot;&gt;reqwests&lt;&#x2F;a&gt; is quite heavy. Maybe try
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sbstp&#x2F;attohttpc&quot;&gt;attohttpc&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;algesten&#x2F;ureq&quot;&gt;ureq&lt;&#x2F;a&gt;, which are more lightweight.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt; dragging you down? How about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stjepang&#x2F;smol&quot;&gt;smol&lt;&#x2F;a&gt;?&lt;&#x2F;del&gt;&lt;br &#x2F;&gt;
(Edit: This won&#x27;t help much with build times. &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hdb5m4&#x2F;tips_for_faster_rust_compile_times&#x2F;fvmayvh&#x2F;&quot;&gt;More info in this discussion on Reddit&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Swap out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clap-rs&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RazrFalcon&#x2F;pico-args&quot;&gt;pico-args&lt;&#x2F;a&gt; if you only need basic argument parsing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kodewerx.org&#x2F;2020&#x2F;06&#x2F;the-rust-compiler-isnt-slow-we-are.html&quot;&gt;Here&#x27;s an
example&lt;&#x2F;a&gt;
where switching crates reduced compile times from 2:22min to 26 seconds.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-cargo-workspaces&quot;&gt;Use Cargo Workspaces&lt;&#x2F;h2&gt;
&lt;p&gt;Cargo has that neat feature called &lt;em&gt;workspaces&lt;&#x2F;em&gt;, which allow you to split one
big crate into multiple smaller ones. This code-splitting is great for avoiding
repetitive compilation because only crates with changes have to be recompiled.
Bigger projects like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;servo&#x2F;blob&#x2F;master&#x2F;Cargo.toml&quot;&gt;servo&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;timberio&#x2F;vector&#x2F;blob&#x2F;1629f7f82e459ae87f699e931ca2b89b9080cfde&#x2F;Cargo.toml#L28-L34&quot;&gt;vector&lt;&#x2F;a&gt;
are using workspaces heavily to slim down compile times. 
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch14-03-cargo-workspaces.html&quot;&gt;Learn more about workspaces here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;combine-all-integration-tests-in-a-single-binary&quot;&gt;Combine All Integration Tests In A Single Binary&lt;&#x2F;h2&gt;
&lt;p&gt;Have any &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;testing&#x2F;integration_testing.html&quot;&gt;integration tests&lt;&#x2F;a&gt;? (These are the ones in your &lt;code&gt;tests&lt;&#x2F;code&gt;
directory.)
The Rust compiler will create a binary for every single one of them.
This can take most of your build time because linking is slooow. 🐢
The reason is that many system linkers (like &lt;code&gt;ld&lt;&#x2F;code&gt;) are &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;5142753&#x2F;can-gcc-use-multiple-cores-when-linking&quot;&gt;single
threaded&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;info&quot;&gt;
  👨‍🍳️💡‍️ A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linker_(computing)&quot;&gt;linker&lt;&#x2F;a&gt; is a tool that combines the
output of a compiler and mashes that into one executable you can run.
&lt;&#x2F;div&gt;
&lt;p&gt;To make the linker&#x27;s job a little easier, you can put all your tests in one
crate. (Basically create a &lt;code&gt;main.rs&lt;&#x2F;code&gt; in your test folder and add your
test files as &lt;code&gt;mod&lt;&#x2F;code&gt; in there.)&lt;&#x2F;p&gt;
&lt;p&gt;Then the linker will go ahead and build a single binary only. Sounds nice, but
careful: it&#x27;s still a trade-off as you&#x27;ll need to expose your internal types and
functions (i.e. make them &lt;code&gt;pub&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Might be worth a try, though because a recent &lt;a href=&quot;https:&#x2F;&#x2F;azriel.im&#x2F;will&#x2F;2019&#x2F;10&#x2F;08&#x2F;dev-time-optimization-part-1-1.9x-speedup-65-less-disk-usage&#x2F;&quot;&gt;benchmark revealed a 1.9x
speedup&lt;&#x2F;a&gt; for one project.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;This tip was brought to you by &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;algo_luca&quot;&gt;Luca Palmieri&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;lucio_d_franco&quot;&gt;Lucio Franco&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;im_azriel&quot;&gt;Azriel
Hoh&lt;&#x2F;a&gt;. Thanks!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disable-unused-features-of-crate-dependencies&quot;&gt;Disable Unused Features Of Crate Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;⚠️ &lt;strong&gt;Fair warning&lt;&#x2F;strong&gt;: it seems that switching off features doesn&#x27;t always improve
compile time. (See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tikv&#x2F;tikv&#x2F;pull&#x2F;4453#issuecomment-481789292&quot;&gt;tikv&#x27;s experiences
here&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;Check the feature flags of your dependencies. A lot of library maintainers take
the effort to split their crate into separate features that can be toggled off
on demand. Maybe you don&#x27;t need all the default functionality from every crate?&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code&gt;tokio&lt;&#x2F;code&gt; has &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&#x2F;blob&#x2F;2bc6bc14a82dc4c8d447521005e044028ae199fe&#x2F;tokio&#x2F;Cargo.toml#L26-L91&quot;&gt;a ton of
features&lt;&#x2F;a&gt;
that you can disable if needed.&lt;&#x2F;p&gt;
&lt;p&gt;A quick way to list the features of a crate is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;badboy&#x2F;cargo-feature-set&quot;&gt;cargo-feature-set&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Admittedly, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;llogiq&#x2F;status&#x2F;1273875653822222337&quot;&gt;features are not very discoverable at the
moment&lt;&#x2F;a&gt; because there is
no standard way to document them, but we&#x27;ll get there eventually.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-a-ramdisk-for-compilation&quot;&gt;Use A Ramdisk For Compilation&lt;&#x2F;h2&gt;
&lt;p&gt;When starting to compile heavy projects, I noticed that I was throttled on I&#x2F;O.
The reason was that I kept my projects on a measly HDD. A more performant
alternative would be SSDs, but if that&#x27;s not an option, don&#x27;t throw in the
sponge just yet.&lt;&#x2F;p&gt;
&lt;p&gt;Ramdisks to the rescue! These are like &amp;quot;virtual harddisks&amp;quot; that live in system
memory.&lt;&#x2F;p&gt;
&lt;p&gt;User &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;user&#x2F;moschroe_de&#x2F;&quot;&gt;moschroe_de&lt;&#x2F;a&gt; shared the
following snippet &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;chqu4c&#x2F;building_a_computer_for_fastest_possible_rust&#x2F;ev02hqy&quot;&gt;over on
Reddit&lt;&#x2F;a&gt;,
which creates a ramdisk for your current Rust project (on Linux):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; tmpfs none .&#x2F;target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &#x2F;proc&#x2F;mounts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; tee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &#x2F;etc&#x2F;fstab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On macOS, you could probably do something similar with &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;koshigoe&#x2F;822455&quot;&gt;this
script&lt;&#x2F;a&gt;. I haven&#x27;t tried that myself,
though.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cache-dependencies-with-sccache&quot;&gt;Cache Dependencies With sccache&lt;&#x2F;h2&gt;
&lt;p&gt;Another neat project is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sccache&quot;&gt;sccache&lt;&#x2F;a&gt; by
Mozilla, which caches compiled crates to avoid repeated compilation.&lt;&#x2F;p&gt;
&lt;p&gt;I had this running on my laptop for a while, but the benefit was rather
negligible, to be honest. It works best if you work on a lot of independent
projects that share dependencies (in the same version). A common use-case is
shared build servers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cranelift-the-alternative-rust-compiler&quot;&gt;Cranelift – The Alternative Rust Compiler&lt;&#x2F;h2&gt;
&lt;p&gt;Lately, I was excited to hear that the Rust project is using an alternative
compiler that runs in parallel with &lt;code&gt;rustc&lt;&#x2F;code&gt; for every CI build:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bjorn3&#x2F;rustc_codegen_cranelift&quot;&gt;Cranelift&lt;&#x2F;a&gt;, also called
&lt;code&gt;CG_CLIF&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a comparison between &lt;code&gt;rustc&lt;&#x2F;code&gt; and Cranelift for some popular crates (blue
means better):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2020&#x2F;rust-compile-times&#x2F;cranelift.webp&quot; alt=&quot;LLVM compile time comparison between rustc and cranelift in favor of cranelift&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Somewhat unbelieving, I tried to compile
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;timberio&#x2F;vector&quot;&gt;vector&lt;&#x2F;a&gt; with both compilers.&lt;&#x2F;p&gt;
&lt;p&gt;The results were astonishing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rustc: &lt;strong&gt;5m 45s&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Cranelift: &lt;strong&gt;3m 13s&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I could really feel the difference! What&#x27;s cool about this is that it creates
fully working executable binaries. They won&#x27;t be optimized as much, but they are
great for testing.&lt;&#x2F;p&gt;
&lt;p&gt;A more detailed write-up is on &lt;a href=&quot;https:&#x2F;&#x2F;jason-williams.co.uk&#x2F;a-possible-new-backend-for-rust&quot;&gt;Jason Williams&#x27;
page&lt;&#x2F;a&gt;, and the
project code is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bjorn3&#x2F;rustc_codegen_cranelift&quot;&gt;on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;switch-to-a-faster-linker&quot;&gt;Switch To A Faster Linker&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The thing that nobody seems to target is linking time. For me, when using
something with a big dependency tree like Amethyst, for example linking time
on my fairly recent Ryzen 7 1700 is ~10s each time, even if I change only some
minute detail only in my code. — &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;chqu4c&#x2F;building_a_computer_for_fastest_possible_rust&#x2F;euycz74&quot;&gt;&#x2F;u&#x2F;Almindor on
Reddit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;According to the &lt;a href=&quot;https:&#x2F;&#x2F;lld.llvm.org&#x2F;&quot;&gt;official documentation&lt;&#x2F;a&gt;, &amp;quot;LLD is a
linker from the LLVM project that is a drop-in replacement for system linkers
and runs much faster than them. [..] When you link a large program on a
multicore machine, you can expect that LLD runs more than twice as fast as the
GNU gold linker. Your mileage may vary, though.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re on Linux you can switch to &lt;code&gt;lld&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;57817848&#x2F;270334&quot;&gt;like
so&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;x86_64-unknown-linux-gnu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rustflags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;= [
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;-C&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;link-arg=-fuse-ld=lld&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A word of caution: &lt;code&gt;lld&lt;&#x2F;code&gt; might not be working on all platforms yet. At least on
macOS, Rust support seems to be broken at the moment, and the work on fixing it
has stalled (see
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;39915&quot;&gt;rust-lang&#x2F;rust#39915&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tweak-compiler-flags&quot;&gt;Tweak Compiler Flags&lt;&#x2F;h2&gt;
&lt;p&gt;Rust comes with a huge set of &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;codegen-options&#x2F;index.html&quot;&gt;compiler
flags&lt;&#x2F;a&gt;. For special
cases, it can help to tweak them for your project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;profile-compile-times&quot;&gt;Profile Compile Times&lt;&#x2F;h2&gt;
&lt;p&gt;If you like to dig deeper, Rust compilation can be profiled with &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;inside-rust&#x2F;2020&#x2F;02&#x2F;25&#x2F;intro-rustc-self-profile.html#profiling-the-compiler&quot;&gt;&lt;code&gt;cargo rustc -- -Zself-profile&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
The resulting trace file can be visualized with a flamegraph or the Chromium
profiler:&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;chrome_profiler.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Image of Chrome profiler with all crates&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Image of Chrome profiler with all crates
        &lt;br &#x2F;&gt;
        Rust Lang Blog
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;There&#x27;s also a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;cargo&#x2F;reference&#x2F;unstable.html#timings&quot;&gt;&lt;code&gt;cargo -Z timings&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
feature that gives some information about how long each compilation step takes,
and tracks concurrency information over time.&lt;&#x2F;p&gt;
&lt;p&gt;Another golden one is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;cargo-llvm-lines&quot;&gt;&lt;code&gt;cargo-llvm-lines&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which shows
the number of lines generated and objects copied in the LLVM backend:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;$ cargo llvm-lines | head -20

  Lines        Copies         Function name
  -----        ------         -------------
  30737 (100%)   1107 (100%)  (TOTAL)
   1395 (4.5%)     83 (7.5%)  core::ptr::drop_in_place
    760 (2.5%)      2 (0.2%)  alloc::slice::merge_sort
    734 (2.4%)      2 (0.2%)  alloc::raw_vec::RawVec&amp;lt;T,A&amp;gt;::reserve_internal
    666 (2.2%)      1 (0.1%)  cargo_llvm_lines::count_lines
    490 (1.6%)      1 (0.1%)  &amp;lt;std::process::Command as cargo_llvm_lines::PipeTo&amp;gt;::pipe_to
    476 (1.5%)      6 (0.5%)  core::result::Result&amp;lt;T,E&amp;gt;::map
    440 (1.4%)      1 (0.1%)  cargo_llvm_lines::read_llvm_ir
    422 (1.4%)      2 (0.2%)  alloc::slice::merge
    399 (1.3%)      4 (0.4%)  alloc::vec::Vec&amp;lt;T&amp;gt;::extend_desugared
    388 (1.3%)      2 (0.2%)  alloc::slice::insert_head
    366 (1.2%)      5 (0.5%)  core::option::Option&amp;lt;T&amp;gt;::map
    304 (1.0%)      6 (0.5%)  alloc::alloc::box_free
    296 (1.0%)      4 (0.4%)  core::result::Result&amp;lt;T,E&amp;gt;::map_err
    295 (1.0%)      1 (0.1%)  cargo_llvm_lines::wrap_args
    291 (0.9%)      1 (0.1%)  core::char::methods::&amp;lt;impl char&amp;gt;::encode_utf8
    286 (0.9%)      1 (0.1%)  cargo_llvm_lines::run_cargo_rustc
    284 (0.9%)      4 (0.4%)  core::option::Option&amp;lt;T&amp;gt;::ok_or_else
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;avoid-procedural-macro-crates&quot;&gt;Avoid Procedural Macro Crates&lt;&#x2F;h2&gt;
&lt;p&gt;Procedural macros are the hot sauce of Rust development: they burn through CPU
cycles so use with care (keyword: monomorphization).&lt;&#x2F;p&gt;
&lt;p&gt;If you heavily use procedural macros in your project (e.g., if you use serde),
you can try to sidestep their impact on compile times with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;watt&quot;&gt;watt&lt;&#x2F;a&gt;, a tool that offloads macro compilation
to Webassembly.&lt;&#x2F;p&gt;
&lt;p&gt;From the docs:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By compiling macros ahead-of-time to Wasm, we save all downstream users of the
macro from having to compile the macro logic or its dependencies themselves.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, what they compile is a small self-contained Wasm runtime (~3 seconds,
shared by all macros) and a tiny proc macro shim for each macro crate to hand
off Wasm bytecode into the Watt runtime (~0.3 seconds per proc-macro crate you
depend on). This is much less than the 20+ seconds it can take to compile
complex procedural macros and their dependencies.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Note that this crate is still experimental.&lt;&#x2F;p&gt;
&lt;p&gt;(Oh, and did I mention that both, &lt;code&gt;watt&lt;&#x2F;code&gt; and &lt;code&gt;cargo-llvm-lines&lt;&#x2F;code&gt; were built by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;&quot;&gt;David Tolnay&lt;&#x2F;a&gt;, who is a frickin&#x27; steamroller of an
engineer?)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compile-on-a-beefy-machine&quot;&gt;Compile On A Beefy Machine&lt;&#x2F;h2&gt;
&lt;p&gt;On portable devices, compiling can drain your battery and be slow. To avoid
that, I&#x27;m using my machine at home, a 6-core AMD FX 6300 with 12GB RAM, as a
build machine. I can use it in combination with &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;docs&#x2F;remote&#x2F;remote-overview&quot;&gt;Visual Studio Code Remote
Development&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t have a dedicated machine yourself, you can compile in the cloud
instead.&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;gitpod.io&#x2F;&quot;&gt;Gitpod.io&lt;&#x2F;a&gt; is superb for testing a cloud build as they
provide you with a beefy machine (currently 16 core Intel Xeon 2.30GHz, 60GB
RAM) for free during a limited period. Simply add &lt;code&gt;https:&#x2F;&#x2F;gitpod.io&#x2F;#&lt;&#x2F;code&gt; in
front of any Github repository URL.
&lt;a href=&quot;https:&#x2F;&#x2F;gitpod.io&#x2F;#https:&#x2F;&#x2F;github.com&#x2F;hello-rust&#x2F;show&#x2F;tree&#x2F;master&#x2F;episode&#x2F;9&quot;&gt;Here is an example&lt;&#x2F;a&gt; for one of my &lt;a href=&quot;https:&#x2F;&#x2F;hello-rust.show&#x2F;&quot;&gt;Hello Rust&lt;&#x2F;a&gt; episodes.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to buying dedicated hardware,
&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;chqu4c&#x2F;building_a_computer_for_fastest_possible_rust&#x2F;&quot;&gt;here are some tips&lt;&#x2F;a&gt;. Generally, you should get a proper multicore CPU like an AMD
Ryzen Threadripper plus at least 32 GB of RAM.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drastic-measures-overclock-your-cpu-fire&quot;&gt;Drastic Measures: Overclock Your CPU? 🔥&lt;&#x2F;h2&gt;
&lt;p&gt;⚠️ Warning: You can damage your hardware if you don&#x27;t know what you are doing.
Proceed at your own risk.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an idea for the desperate. Now I don&#x27;t recommend that to everyone, but
if you have a standalone desktop computer with a decent CPU, this might be a way
to squeeze out the last bits of performance.&lt;&#x2F;p&gt;
&lt;p&gt;Even though the Rust compiler executes a lot of steps in parallel,
single-threaded performance is still quite relevant.&lt;&#x2F;p&gt;
&lt;p&gt;As a somewhat drastic measure, you can try to overclock your CPU. &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=gb1QDpRnOvw&quot;&gt;Here&#x27;s a
tutorial for my processor&lt;&#x2F;a&gt;. (I owe
you some benchmarks from my machine.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;download-all-the-crates&quot;&gt;Download ALL The Crates&lt;&#x2F;h2&gt;
&lt;p&gt;If you have a slow internet connection, a big part of the initial build
process is fetching all those shiny crates from crates.io. To mitigate that,
you can download &lt;strong&gt;all&lt;&#x2F;strong&gt; crates in advance to cache them locally.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;the-lean-crate&#x2F;criner&quot;&gt;criner&lt;&#x2F;a&gt; does just that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;the-lean-crate&#x2F;criner
cd criner
cargo run --release -- mine
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The archive size is surprisingly reasonable, with roughly 50GB of required disk
space.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;help-others-upload-leaner-crates-for-faster-build-times&quot;&gt;Help Others: Upload Leaner Crates For Faster Build Times&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;the-lean-crate&#x2F;cargo-diet&quot;&gt;&lt;code&gt;cargo-diet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; helps you build
lean crates that significantly reduce download size (sometimes by 98%). It might
not directly affect your own build time, but your users will surely be thankful. 😊&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next?&lt;&#x2F;h2&gt;
&lt;p&gt;Phew! That was a long list. If you have any additional tips, please &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;mre.github.io&#x2F;issues&quot;&gt;let me know&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If compiler performance is something you&#x27;re interested in, why not &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;measureme&#x2F;issues&#x2F;51&quot;&gt;collaborate
on a tool&lt;&#x2F;a&gt; to see what user code is causing rustc to use lots of
time?&lt;&#x2F;p&gt;
&lt;p&gt;Also, once you&#x27;re done optimizing your build times, how about optimizing
runtime next? My friend &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;killercup&#x2F;&quot;&gt;Pascal Hertleif&lt;&#x2F;a&gt; has a
&lt;a href=&quot;https:&#x2F;&#x2F;deterministic.space&#x2F;high-performance-rust.html&quot;&gt;nice article&lt;&#x2F;a&gt; on that.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Gravity</title>
            <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2020/gravity/</link>
            <guid>https://endler.dev/2020/gravity/</guid>
            <description>&lt;p&gt;Here&#x27;s a test to show your age:&lt;&#x2F;p&gt;
&lt;p&gt;Do you still remember &lt;a href=&quot;https:&#x2F;&#x2F;josephpcohen.com&#x2F;w&#x2F;gravityscript&#x2F;&quot;&gt;that funny JavaScript gravity effect&lt;&#x2F;a&gt;, which Google used on their homepage ten years ago? This one?&lt;&#x2F;p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;endler.dev&amp;#x2F;video.css&quot; &#x2F;&gt;
&lt;script src=&quot;&#x2F;video.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div 
  class=&quot;light-video-embed&quot; 
  data-id=&quot;wskgClFNlJw&quot;
&gt;
  &lt;img src=&quot;gravity.png&quot; loading=&quot;lazy&quot; &#x2F;&gt;
  &lt;div class=&quot;play&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
  document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    lightEmbedInit();
  });
&lt;&#x2F;script&gt;
&lt;p&gt;I wanted to have some fun and integrated it into a website I was building.
Unfortunately, it didn&#x27;t work out-of-the-box.
It choked on some DOM elements that were not strictly classes (like SVG elements).
So, in good hacker fashion,  I quickly patched up the script (it&#x27;s just a three-line change), and now it&#x27;s back to its former glory.&lt;&#x2F;p&gt;
&lt;p&gt;Test it here! (Caution: you&#x27;ll have to reload the page after that. 😏)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;btn&quot; href=&#x27;#&#x27; id=&#x27;gravity&#x27;&gt;Apply Gravity&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;script type=&quot;text&#x2F;javascript&quot;&gt;
    var myLink = document.getElementById(&#x27;gravity&#x27;);

    myLink.onclick = function(){

        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text&#x2F;javascript&quot;;
        script.src = &quot;gravity.js&quot;; 
        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);
        return false;
    }
&lt;&#x2F;script&gt;
&lt;p&gt;Anyway, feel free to add it to your own sites and have some fun.
It&#x27;s also great to prank your friends.
Simply add that single line to any website and weeee!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;endler.dev&#x2F;2020&#x2F;gravity&#x2F;gravity.js&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sometimes I miss those simple times of the early web...&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Hacker Folklore</title>
            <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2020/folklore/</link>
            <guid>https://endler.dev/2020/folklore/</guid>
            <description>&lt;p&gt;Some computer terms have a surprising legacy. Many of them are derived from
long-obsolete technologies. This post tries to dust off the exciting history of
some
of these terms that we use every day but aren&#x27;t quite sure about their origins.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the content comes from sources like Wikipedia (with reference where
appropriate), but the explanations are hard to hunt down if you don&#x27;t know what
you&#x27;re looking for.&lt;br &#x2F;&gt;
This is a living document, and I&#x27;m planning to update it in case of reader
submissions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bike-shedding&quot;&gt;Bike-Shedding&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A pointless discussion about trivial issues.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The term bike-shed effect or bike-shedding was coined as a metaphor to
illuminate the law of triviality; it was popularised in the Berkeley Software
Distribution community by the Danish computer developer &lt;a href=&quot;http:&#x2F;&#x2F;phk.freebsd.dk&#x2F;sagas&#x2F;bikeshed&#x2F;&quot;&gt;Poul-Henning Kamp in
1999 on the FreeBSD mailing list&lt;&#x2F;a&gt; and has
spread from there to the whole software industry.&lt;&#x2F;p&gt;
&lt;p&gt;The concept was first presented as a corollary of his broader &amp;quot;Parkinson&#x27;s law&amp;quot;
spoof of management. He dramatizes this &amp;quot;law of triviality&amp;quot; with the example of
a committee&#x27;s deliberations on an atomic reactor, contrasting it to
deliberations on a bicycle shed. As he put it: &amp;quot;The time spent on any item of
the agenda will be in inverse proportion to the sum of money involved.&amp;quot; A
reactor is so vastly expensive and complicated that an average person cannot
understand it, so one assumes that those who work on it understand it. On the
other hand, everyone can visualize a cheap, simple bicycle shed, so planning one
can result in endless discussions because everyone involved wants to add a touch
and show personal contribution.&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Law_of_triviality&quot;&gt;Reference - Wikipedia: Law of Triviality&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;boilerplate&quot;&gt;Boilerplate&lt;&#x2F;h2&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;bending-roll.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;An old machine that bended steel
plates to water boilers.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        An old machine that bended steel
plates to water boilers.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Modern_mechanism,_exhibiting_the_latest_progress_in_machines,_motors,_and_the_transmission_of_power,_being_a_supplementary_volume_to_Appletons&amp;#x27;_cyclopaedia_of_applied_mechanics_(1892)_(14583761620).webp&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A chunk of code that is copied over and over again with little
or no changes made to it in the process.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Boiler plate&lt;&#x2F;em&gt; originally referred to the rolled steel used to make water
boilers but is used in the media to refer to hackneyed or unoriginal writing.
The term refers to the metal printing plates of pre-prepared text such as
advertisements or syndicated columns that were distributed to small, local
newspapers. These printing plates came to be known as &#x27;boilerplates&#x27; by analogy.
One large supplier to newspapers of this kind of boilerplate was the Western
Newspaper Union, which supplied &amp;quot;ready-to-print stories [which] contained
national or international news&amp;quot; to papers with smaller geographic footprints,
which could include advertisements pre-printed next to the conventional content.&lt;&#x2F;p&gt;
&lt;p&gt;References:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Boilerplate_text&quot;&gt;Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;3997441&#x2F;270334&quot;&gt;Stack Overflow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;english.stackexchange.com&#x2F;questions&#x2F;464924&#x2F;boilerplate-versus-template&#x2F;464929&quot;&gt;StackExchange - English Language &amp;amp;
Usage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;boilerplate.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;The man in the foreground is holding
a rounded printing plate. Plates like this were provided by companies such as
Western Newspaper Union to many smaller newspapers.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        The man in the foreground is holding
a rounded printing plate. Plates like this were provided by companies such as
Western Newspaper Union to many smaller newspapers.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;english.stackexchange.com&#x2F;a&#x2F;464929&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;bug&quot;&gt;Bug&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A defect in a piece of code or hardware.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The origins are unknown!
Contrary to popular belief it &lt;em&gt;predates the bug
found by Grace Hopper in the Mark II computer&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The term was used by engineers way before that; at least since the 1870s.
It predates electronic computers and computer software.
Thomas Edison used the term &amp;quot;bug&amp;quot; in his notes.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_bug#Etymology&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;carriage-return-and-line-feed&quot;&gt;Carriage Return and Line Feed&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: Set the cursor to the beginning of the next line.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;These two terms were adopted from typewriters.&lt;&#x2F;p&gt;
&lt;p&gt;The carriage holds the paper and is moving from left to right to advance the
typing position as the keys are pressed. It &amp;quot;carries&amp;quot; the paper with it. The
carriage return is the operation when the carriage gets moved into its original
position on the very left end side of the paper.&lt;&#x2F;p&gt;
&lt;p&gt;Simply returning the carriage to the left is not enough to start with a new
line, however. The carriage would still be on the same line than before —
just at the beginning of the line. To go to a new line, a &lt;em&gt;line feed&lt;&#x2F;em&gt; was
needed. It would move the paper inside the typewriter up by one line.&lt;&#x2F;p&gt;
&lt;p&gt;These two operations — carriage return (CR) and line feed (LF) —
were commonly done at once by pushing the carriage return lever.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;typewriter-photo.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A mechanical typewriter. The lever for the carriage return is
on the outer left side.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A mechanical typewriter. The lever for the carriage return is
on the outer left side.
        &lt;br &#x2F;&gt;
        Source:
&lt;a href=&quot;https:&#x2F;&#x2F;www.piqsels.com&#x2F;da&#x2F;public-domain-photo-spbhs&quot;&gt;piqsels&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;ul&gt;
&lt;li&gt;On Unix systems (like Linux or macOS), a &lt;code&gt;\n&lt;&#x2F;code&gt; still stands for a&lt;br &#x2F;&gt;
&lt;em&gt;line feed&lt;&#x2F;em&gt; (ASCII symbol: LF) or &lt;em&gt;newline&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;On CP&#x2F;M, DOS, and Windows, &lt;code&gt;\r\n&lt;&#x2F;code&gt; is used, where &lt;code&gt;\r&lt;&#x2F;code&gt; stands for
&lt;em&gt;carriage return&lt;&#x2F;em&gt; and &lt;code&gt;\n&lt;&#x2F;code&gt; stands for line feed (CR+LF).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Newline&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is an old video that shows the basic mechanics of carriage return and
line-feed:&lt;&#x2F;p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;endler.dev&amp;#x2F;video.css&quot; &#x2F;&gt;
&lt;script src=&quot;&#x2F;video.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div 
  class=&quot;light-video-embed&quot; 
  data-id=&quot;EWfElq1vgLA&quot;
    data-start=&quot;842&quot;
&gt;
  &lt;img src=&quot;typewriter.webp&quot; loading=&quot;lazy&quot; &#x2F;&gt;
  &lt;div class=&quot;play&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
  document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    lightEmbedInit();
  });
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;command-key-symbol&quot;&gt;Command key symbol (⌘)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A meta-key available on Apple computers to provide additional
keyboard combinations.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Directly quoting Wikipedia (emphasis mine):&lt;&#x2F;p&gt;
&lt;p&gt;The ⌘ symbol came into the Macintosh project at a late stage. The development
team originally went for their old Apple key, but Steve Jobs found it
frustrating when &amp;quot;apples&amp;quot; filled up the Mac&#x27;s menus next to the key commands,
because he felt that this was an over-use of the company logo. He then opted for
a different key symbol. With only a few days left before deadline, the team&#x27;s
bitmap artist Susan Kare started researching for the Apple logo&#x27;s successor. She
was browsing through a symbol dictionary when she came across the
cloverleaf-like symbol, commonly used in Nordic countries as an indicator of
cultural locations and &lt;strong&gt;places of interest&lt;&#x2F;strong&gt; (it is the official road sign for
tourist attraction in Denmark, Finland, Iceland, Norway, and Sweden and the
computer key has often been called Fornminne — ancient monument — by Swedish Mac
users and Seværdighedstegn by Danish users). When she showed it to the rest of
the team, everyone liked it, and so it became the symbol of the 1984 Macintosh
command key. Susan Kare states that it has since been told to her that the
symbol had been picked for its Scandinavian usage due to its resembling the
shape of a square castle with round corner towers as seen from above looking
down, notably Borgholm Castle.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;severdighet.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Norwegian Severdighet road sign&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Norwegian Severdighet road sign
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Severdighet.svg&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;borgholm.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Aearial view of Borgholm Castle, which could have been the model for the symbol &quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Aearial view of Borgholm Castle, which could have been the model for the symbol 
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Borgholms_slottsruin_fr%C3%A5n_luften.webp&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;References:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Command_key&quot;&gt;Wikipedia: Command Key&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cultofmac.com&#x2F;181495&#x2F;what-are-the-macs-command-%E2%8C%98-and-option-%E2%8C%A5-symbols-supposed-to-represent&#x2F;&quot;&gt;Cult of Mac: What Are The Mac’s Command ⌘ And Option ⌥ Symbols Supposed To
Represent?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;core-dump&quot;&gt;Core Dump&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: Retrieving a snapshot of a (crashed) program&#x27;s state by
storing all of its memory for offline analysis.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The name comes from &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Magnetic-core_memory&quot;&gt;magnetic core
memory&lt;&#x2F;a&gt;, which is an early
storage mechanism based on a grid of toroid magnets. It has since become
obsolete, but the term is still used today for getting a snapshot of a computer
process. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Core_dump&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;corememory.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A 32 x 32 core memory plane storing
1024 bits (or 128 bytes) of data. The first core dumps were printed on paper, which sounds reasonable given these small amounts of bytes.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A 32 x 32 core memory plane storing
1024 bits (or 128 bytes) of data. The first core dumps were printed on paper, which sounds reasonable given these small amounts of bytes.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;de.wikipedia.org&#x2F;wiki&#x2F;Datei:KL_CoreMemory.webp&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;cursor&quot;&gt;Cursor&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: a visual cue (such as a flashing vertical line) on a video display that indicates position (as for data entry). &lt;a href=&quot;https:&#x2F;&#x2F;www.merriam-webster.com&#x2F;dictionary&#x2F;cursor&quot;&gt;Merriam-Webster&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Cursor&lt;&#x2F;em&gt; is Latin for &lt;em&gt;runner&lt;&#x2F;em&gt;. A cursor is the name given to the transparent
slide engraved with a hairline that is used for marking a point on a slide rule.
The term was then transferred to computers through analogy.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cursor_(user_interface)&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;slide-rule.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A December 1951 advertisement for the
IBM 604 Electronic Calculating Punch that was first produced in 1948. The
advertisement claims the IBM 604 can do the work of 150 engineers with slide
rules. The cursor (or runner) is the transparent part in the middle of the
slide.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A December 1951 advertisement for the
IBM 604 Electronic Calculating Punch that was first produced in 1948. The
advertisement claims the IBM 604 can do the work of 150 engineers with slide
rules. The cursor (or runner) is the transparent part in the middle of the
slide.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;dashboard&quot;&gt;Dashboard&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A user interface that provides a quick overview of a system&#x27;s
status.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Originally a plank of wood at the front of a horse-drawn carriage to protect the
driver from mud &#x27;dashed&#x27; backward by a horses hooves.&lt;&#x2F;p&gt;
&lt;p&gt;When automobiles were manufactured, the board in front of the driver was given
the same name. That was the logical place to put the necessary gauges so the
driver could see them easily. In time, the term became more associated with the
readouts than the protection it offered.
&lt;a href=&quot;https:&#x2F;&#x2F;www.quora.com&#x2F;What-common-phrases-are-derived-from-obsolete-technologies&#x2F;answer&#x2F;Geoffrey-Widdison&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;dashboard.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A dashboard of a horse carriage.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A dashboard of a horse carriage.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Dashboard_(PSF).webp&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;firewall&quot;&gt;Firewall&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A network security system that establishes a barrier between a trusted internal network and an untrusted external network, such as the Internet.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fire walls are used mainly in terraced houses, but also in individual residential buildings. They prevent fire and smoke from spreading to another part of the building in the event of a fire. Large fires can thus be prevented. The term is used in computing since the 80s.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Firewall_(computing)#History&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;firewall.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Firewall residential construction, separating the building into two separate residential units, and fire areas.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Firewall residential construction, separating the building into two separate residential units, and fire areas.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Brandwand_2.webp&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;firmware&quot;&gt;Firmware&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A class of computer software that provides the low-level
control for the device&#x27;s specific hardware and closely tied to the hardware it runs on.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;archive.org&#x2F;details&#x2F;TNM_4th_generation_software_hardware_-_Datamation_20171010_0125&#x2F;mode&#x2F;2up&quot;&gt;Ascher
Opler&lt;&#x2F;a&gt;
coined the term &lt;em&gt;firmware&lt;&#x2F;em&gt; in a 1967 Datamation article. As originally used,
firmware contrasted with hardware (the CPU itself) and software (normal
instructions executing on a CPU). It existed on the boundary between hardware
and software; thus the name &amp;quot;firmware&amp;quot;. The original article is available on the
&lt;a href=&quot;https:&#x2F;&#x2F;archive.org&#x2F;details&#x2F;TNM_4th_generation_software_hardware_-_Datamation_20171010_0125&#x2F;mode&#x2F;2up&quot;&gt;Internet
Archive&lt;&#x2F;a&gt;.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Firmware&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;foo-and-bar&quot;&gt;Foo and Bar&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: Common placeholder variable names.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Originally the term might come from the military term &lt;em&gt;FUBAR&lt;&#x2F;em&gt;.
There are a few variations, but a common meaning is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_military_slang_terms#FUBAR&quot;&gt;FUBAR: &amp;quot;f***ed up beyond all recognition&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The use of &lt;code&gt;foo&lt;&#x2F;code&gt; in a programming context is generally credited to the Tech
Model Railroad Club (TMRC) of MIT from circa 1960. In the complex model system,
there were scram switches located at numerous places around the room that could
be thrown if something undesirable was about to occur, such as a train going
full-bore at an obstruction.&lt;&#x2F;p&gt;
&lt;p&gt;The way I understood it was that they literally had emergency buttons labeled
&lt;code&gt;foo&lt;&#x2F;code&gt; for lack of a better name.
Maybe related to the original military meaning of FUBAR to indicate that something is going very very wrong.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;scram.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A scram switch (button), that could be
pressed to prevent inadvertent operation. Maybe the TMRC had buttons labeled &lt;code&gt;foo&lt;&#x2F;code&gt; instead&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A scram switch (button), that could be
pressed to prevent inadvertent operation. Maybe the TMRC had buttons labeled &lt;code&gt;foo&lt;&#x2F;code&gt; instead
        &lt;br &#x2F;&gt;
        Source &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:EBR-I_-_SCRAM_button.webp&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;References:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Foobar#History_and_etymology&quot;&gt;Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;6727104&#x2F;270334&quot;&gt;Stack Overflow&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;freelancer&quot;&gt;Freelancer&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A self-employed person, which is not committed to a particular employer long-term.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The term first appears in the novel &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ivanhoe&quot;&gt;Ivanhoe&lt;&#x2F;a&gt; by Sir Walter Scott. (The novel also had a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ivanhoe#Lasting_influence_on_the_Robin_Hood_legend&quot;&gt;lasting influence&lt;&#x2F;a&gt; on the Robin Hood legend.)&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;ivanhoe.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Cover of a Classic Comics book&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Cover of a Classic Comics book
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:CC_No_02_Ivanhoe_2.jpg&quot;&gt;Wikimedia Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;In it, a Lord offers his paid army of &#x27;free lances&#x27; to King Richard:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I offered Richard the service of my Free Lances, and he refused them
— I will lead them to Hull, seize on shipping, and embark for Flanders;
thanks to the bustling times, a man of action will always find employment.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Therefore, a &amp;quot;free lancer&amp;quot; is someone who fights for whoever pays the most.
Free does not mean &amp;quot;without pay&amp;quot;, but refers to the additional freedom to work for any employer. &lt;a href=&quot;https:&#x2F;&#x2F;www.merriam-webster.com&#x2F;words-at-play&#x2F;freelance-origin-meaning&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;log-logfile&quot;&gt;Log &#x2F; Logfile&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A file that records events of a computer program or system.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sailors used so-called log lines to measure the speed of their ship. A flat
piece of wood (the log) was attached to a long rope. The log had regularly
spaced knots in it. As the log would drift away, the sailors would count the
number of knots that went out in a fixed time interval, and this would be the
ship&#x27;s speed — in knots.&lt;&#x2F;p&gt;
&lt;p&gt;The ship&#x27;s speed was important for navigation, so the sailors noted it down in a book, aptly called the &lt;em&gt;log book&lt;&#x2F;em&gt;, together with other information to establish the position of the ship more accurately, like landmark sightings and weather events. Later, additional information, more generally concerning the ship, was added — or logged — such as harbor fees and abnormal provision depletion.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usna.edu&#x2F;Users&#x2F;oceano&#x2F;pguth&#x2F;website&#x2F;shipwrecks&#x2F;logbooks_lesson&#x2F;logbooks_lesson.htm&quot;&gt;Reference&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;log-seamen.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Sailors measuring ship speed with a
log line&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Sailors measuring ship speed with a
log line
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;sites.rootsweb.com&#x2F;%7Emosmd&#x2F;logln.htm&quot;&gt;The Pilgrims &amp;amp; Plymouth Colony:1620 by Duane A.
Cline&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;log-line.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;The parts of a log-line&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        The parts of a log-line
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;sites.rootsweb.com&#x2F;%7Emosmd&#x2F;logln.htm&quot;&gt;The
Pilgrims &amp;amp; Plymouth Colony:1620 by Duane A.
Cline&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;logfile.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Page from the log-file of the British
Winchelsea. The second column denotes the number of knots measured with the
log-line, which indicates the ship&#x27;s speed&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Page from the log-file of the British
Winchelsea. The second column denotes the number of knots measured with the
log-line, which indicates the ship&#x27;s speed
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;www.usna.edu&#x2F;Users&#x2F;oceano&#x2F;pguth&#x2F;website&#x2F;shipwrecks&#x2F;logbooks_lesson&#x2F;logbooks_lesson.htm&quot;&gt;Navigation and Logbooks
in the Age of Sail by Peter
Reaveley&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;patch&quot;&gt;Patch&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A piece of code that can be applied to fix or improve a
computer program.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the early days of computing history, if you made a programming mistake, you&#x27;d
have to fix a paper tape or a punched card by putting a patch on top of a hole.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;patch.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A program tape with physical patches used
to correct punched holes by covering them.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A program tape with physical patches used
to correct punched holes by covering them.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;americanhistory.si.edu&#x2F;archives&quot;&gt;Smithsonian Archives
Center&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;ping&quot;&gt;Ping&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A way to check the availability and response time of a computer over the network.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ping is a terminal program originally written by Mike Muuss in 1983 that is included in
every version of UNIX, Windows, and macOS. He named it &amp;quot;after the sound that a
sonar makes, inspired by the whole principle of echo-location. [...] ping uses
timed &lt;code&gt;IP&#x2F;ICMP ECHO_REQUEST&lt;&#x2F;code&gt; and &lt;code&gt;ECHO_REPLY&lt;&#x2F;code&gt; packets to probe the &amp;quot;distance&amp;quot; to the
target machine.&amp;quot; The &lt;a href=&quot;https:&#x2F;&#x2F;ftp.arl.army.mil&#x2F;%7Emike&#x2F;ping.html&quot;&gt;reference&lt;&#x2F;a&gt; is
well worth a read.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pixel&quot;&gt;Pixel&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: The smallest controllable element of a picture represented on the screen.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The word pixel is a combination of &lt;em&gt;pix&lt;&#x2F;em&gt; (from &amp;quot;pictures&amp;quot;, shortened to &amp;quot;pics&amp;quot;) and &lt;em&gt;el&lt;&#x2F;em&gt; (for &amp;quot;element&amp;quot;). 
Similarly, &lt;em&gt;voxel&lt;&#x2F;em&gt; is a volume element and &lt;em&gt;texel&lt;&#x2F;em&gt; is a texture element.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pixel&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shell&quot;&gt;Shell&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: An interactive, commonly text-based runtime to interact with a
computer system.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The inventor of the term, Louis Pouzin, does not give an explanation for the
name in his essay &lt;a href=&quot;https:&#x2F;&#x2F;www.multicians.org&#x2F;shell.html&quot;&gt;The Origins of the
Shell&lt;&#x2F;a&gt;. It can however be traced back to
Unix&#x27; predecessor Multics. It is described in the &lt;a href=&quot;https:&#x2F;&#x2F;www.multicians.org&#x2F;mgs.html&quot;&gt;Multics
glossary&lt;&#x2F;a&gt; like so:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[The shell] is passed a command line for execution by the &lt;strong&gt;listener&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;em&gt;The New Hacker&#x27;s Dictionary&lt;&#x2F;em&gt;, (also known as the &lt;em&gt;Jargon File&lt;&#x2F;em&gt;) by &lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;%7Eesr&#x2F;&quot;&gt;Eric S.
Raymond&lt;&#x2F;a&gt; contains &lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;jargon&#x2F;html&#x2F;S&#x2F;shell.html&quot;&gt;the
following&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Historical note: Apparently, the original Multics shell (sense 1) was so
called because it was a shell (sense 3);&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;where sense 3 refers to&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A skeleton program, created by hand or by another program (like, say, a parser
generator), which provides the necessary incantations to set up some task and
the control flow to drive it (the term driver is sometimes used synonymously).
The user is meant to fill in whatever code is needed to get real work done.
This usage is common in the AI and Microsoft Windows worlds, and confuses Unix
hackers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Unfortunately, the book does not provide any evidence to back up this claim.&lt;&#x2F;p&gt;
&lt;p&gt;I like the (possibly historically incorrect) analogy to a nut with the shell
being on the outside, protecting the kernel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;14934&#x2F;why-was-the-word-shell-used-to-descibe-a-command-line-interface&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;slab-allocator&quot;&gt;Slab allocator&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: An efficient memory allocation technique, which reuses
previous allocations.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Slab allocation was invented by &lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;publications&#x2F;library&#x2F;proceedings&#x2F;bos94&#x2F;full_papers&#x2F;bonwick.ps&quot;&gt;John
Bonwick&lt;&#x2F;a&gt;
(Note: PDF file) in 1994 and has since been used by services like
&lt;a href=&quot;https:&#x2F;&#x2F;www.memcached.org&#x2F;&quot;&gt;Memcached&lt;&#x2F;a&gt; and the Linux Kernel.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;With slab allocation, a cache for a certain type or size of data object has a
number of pre-allocated &amp;quot;slabs&amp;quot; of memory; within each slab there are memory
chunks of fixed size suitable for the objects.
(&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Slab_allocation#Basis&quot;&gt;Wikpedia&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The name &lt;em&gt;slab&lt;&#x2F;em&gt; comes from a teenage friend of Bonwick. He &lt;a href=&quot;https:&#x2F;&#x2F;blogs.oracle.com&#x2F;bonwick&#x2F;now-it-can-be-told&quot;&gt;tells the
story&lt;&#x2F;a&gt; on the Oracle blog:&lt;&#x2F;p&gt;
&lt;p&gt;While watching TV together, a commercial by Kellogg&#x27;s came on with the tag line,
&amp;quot;Can you pinch an inch?&amp;quot;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The implication was that you were overweight if you could pinch more than an
inch of fat on your waist -- and that hoovering a bowl of corn flakes would
help.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Without missing a beat, Tommy, who weighed about 250 pounds, reached for his
midsection and offered his response: &amp;quot;Hell, I can grab a slab!&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A decade later, Bonwick remembered that term when he was looking for a word to
describe the allocation of a larger chunk of memory.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the original Kellogg&#x27;s advertisement:&lt;&#x2F;p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;endler.dev&amp;#x2F;video.css&quot; &#x2F;&gt;
&lt;script src=&quot;&#x2F;video.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div 
  class=&quot;light-video-embed&quot; 
  data-id=&quot;A8zYYg8wfmM&quot;
&gt;
  &lt;img src=&quot;kellogs.webp&quot; loading=&quot;lazy&quot; &#x2F;&gt;
  &lt;div class=&quot;play&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
  document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    lightEmbedInit();
  });
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;spam&quot;&gt;Spam&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: Unsolicited electronic communications, for example by sending
mass-emails or posting in forums and chats.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The term goes back to a sketch by the British comedy group Monty Python from 1970.
In the sketch, a cafe is including
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spam_(food)&quot;&gt;Spam&lt;&#x2F;a&gt; (a brand of canned cooked
pork) in almost every dish. The excessive amount of Spam mentioned is a
reference to the ubiquity of it and other imported canned meat products in the
UK after World War II (a period of rationing in the UK) as the country struggled
to rebuild its agricultural base.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spamming#Etymology&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;spam.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Vintage Ad: Look What You Can Do With One
Can of Spam &quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Vintage Ad: Look What You Can Do With One
Can of Spam 
        &lt;br &#x2F;&gt;
        By user &lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;jbcurio&#x2F;3878241798&quot;&gt;Jamie (jbcurio) on
flickr.com&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;iframe  title=&quot;Monty Pythons Flying Circus (1974) - SPAM sketch&quot; src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;329001211&quot; width=&quot;640&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;329001211&quot;&gt;Monty Pythons Flying Circus (1974) - SPAM&lt;&#x2F;a&gt; from
&lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;user97138516&quot;&gt;Testing Tester&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&quot;&gt;Vimeo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radio-button&quot;&gt;Radio Button&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: A UI element that allows to choose from a predefined set of
mutually exclusive options&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;Radio buttons&amp;quot; are named after the analogous pendant of mechanical buttons that
were used in radios. The UI concept has later been used in tape recorders,
cassette recorders and wearable audio players (the famous &amp;quot;Walkman&amp;quot; and
similar). And later in VCRs and video cameras.
&lt;a href=&quot;https:&#x2F;&#x2F;www.jitbit.com&#x2F;radio-button&#x2F;&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;radio-buttons.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;An old car radio (left) and CSS
radio buttons (right). Only a single option can be selected at any point in
time. As a kid, I would push two buttons at once so they would interlock. Good
times.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        An old car radio (left) and CSS
radio buttons (right). Only a single option can be selected at any point in
time. As a kid, I would push two buttons at once so they would interlock. Good
times.
        &lt;br &#x2F;&gt;
        Images by &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;themattcoady&quot;&gt;Matt Coady&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;uppercase-and-lowercase&quot;&gt;Uppercase and lowercase&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: Distinction between capital letters and small letters on a
keyboard.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Back when typesetting was a manual process where single letters made of led were
&amp;quot;type set&amp;quot; to form words and sentences, upper- and lowercase letters were kept
in separate containers — or cases — to make this rather tedious process a little faster.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;printers_cases.webp&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A set of printers cases&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A set of printers cases
        &lt;br &#x2F;&gt;
        From the book &#x27;Printing types, their history, forms, and use; a study in
survivals&#x27; by Updike, Daniel Berkeley, 1860-1941. &lt;a href=&quot;https:&#x2F;&#x2F;archive.org&#x2F;details&#x2F;printingtypesthe01updi&#x2F;&quot;&gt;Freely available on
archive.org&lt;&#x2F;a&gt;.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;honorable-mentions&quot;&gt;Honorable mentions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;404&quot;&gt;404&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;Today&#x27;s meaning: HTTP Status Code for &amp;quot;File not found&amp;quot;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is a story that the number comes from the server room where the World Wide
Web&#x27;s central database was located. In there, administrators would manually
locate the requested files and transfer them, over the network, to the person
who made that request. If a file didn&#x27;t exist, they&#x27;d return an error message:
&amp;quot;Room 404: file not found&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;This, however, seems to be a myth and the status code was chosen rather
arbitrarily based on the then well-established FTP status codes.
&lt;a href=&quot;https:&#x2F;&#x2F;knowyourmeme.com&#x2F;memes&#x2F;404&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;programming-languages-and-abbreviations&quot;&gt;Programming languages and Abbreviations&lt;&#x2F;h2&gt;
&lt;p&gt;The etymology of programming language names and common abbreviations would
probably warrant its own article, but I&#x27;ve decided to note down some of my
favorites for the time being.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;c&quot;&gt;C++&lt;&#x2F;h3&gt;
&lt;p&gt;C++ is a programming language based on C by Bjarne Stroustrup. The name is a
programmer pun by Rick Mascitti, a coworker of Stroustrup. The &lt;code&gt;++&lt;&#x2F;code&gt; refers to
the post-increment operator, that is common in many C-like languages. It
increases the value of a variable by 1. In that sense, C++ can be seen as the
spiritual &amp;quot;successor&amp;quot; of C.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C%2B%2B#History&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;c-sharp&quot;&gt;C Sharp&lt;&#x2F;h3&gt;
&lt;p&gt;Similarly to C++, C# is a C-like programming language. The name again refers to
&amp;quot;incremental&amp;quot; improvements on top of C++. The &lt;code&gt;#&lt;&#x2F;code&gt; in the name looks like four
plus signs. Hence &lt;code&gt;C# == (C++)++&lt;&#x2F;code&gt;. But on top of that, the name was also
inspired by the musical notation where a sharp indicates that the written note
should be made a semitone higher in pitch.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C_Sharp_(programming_language)#Name&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;csharp.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A C-Sharp note.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A C-Sharp note.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Treblecsharp5.svg&quot;&gt;Wikimedia
Commons&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;png&quot;&gt;PNG&lt;&#x2F;h3&gt;
&lt;p&gt;Officially, PNG stands for &lt;em&gt;Portable Network Graphics&lt;&#x2F;em&gt;. It was born out of
frustration over a CompuServe announcement in 1994 that programs supporting GIF
would have to pay licensing fees from now on. A working group lead by hacker
&lt;a href=&quot;https:&#x2F;&#x2F;boutell.dev&#x2F;&quot;&gt;Thomas Boutell&lt;&#x2F;a&gt; created the &lt;code&gt;.webp&lt;&#x2F;code&gt; file format, a
patent-free replacement for GIF. Therefore I prefer the format&#x27;s unofficial
name: &lt;em&gt;PNG&#x27;s Not GIF&lt;&#x2F;em&gt;. Here&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;people.apache.org&#x2F;%7Ejim&#x2F;NewArchitect&#x2F;webrevu&#x2F;1997&#x2F;05_09&#x2F;designers&#x2F;05_09_97_1.html&quot;&gt;great
article&lt;&#x2F;a&gt;
on PNG&#x27;s history.
&lt;a href=&quot;https:&#x2F;&#x2F;encyclopedia2.thefreedictionary.com&#x2F;PNG%27s+Not+GIF&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to know the past to understand the present.&lt;br &#x2F;&gt;
— Dr. Carl Sagan (1980)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I hope you enjoyed this trip down memory lane. Now it&#x27;s your turn!&lt;br &#x2F;&gt;
👉 Do you know any other stories? Send me a message, and I&#x27;ll add them here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;related-projects&quot;&gt;Related Projects&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;watson&#x2F;awesome-computer-history&quot;&gt;Awesome Computer History&lt;&#x2F;a&gt;:
A curated list of computer history videos, documentaries and related folklore
maintained by Thomas Watson.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_computer_term_etymologies&quot;&gt;Wikipedia: List of computer term etymologies&lt;&#x2F;a&gt;:
List of the origins of computer-related terms or terms used in the computing world.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2KTK2qD4-gs&quot;&gt;Talk: The Etymology of Programming by Brittany Storoz - JSConf EU
2018&lt;&#x2F;a&gt;: A talk that explains the background behind a few programming terms. Careful here: the explanation for &amp;quot;bug&amp;quot; is probably wrong as mentioned above.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Typewriter#Terminology&quot;&gt;Typewriter terminology that has survived into the personal computer
era&lt;&#x2F;a&gt;:
A list of computer terms that have their origins from typewriters.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.folklore.org&#x2F;index.py&quot;&gt;Folklore - The Original Macintosh&lt;&#x2F;a&gt;:
Anecdotes about the development of Apple&#x27;s original Macintosh, and the people who made it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>A Timelapse of Timelapse</title>
            <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2020/timelapse/</link>
            <guid>https://endler.dev/2020/timelapse/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;timelapse&quot;&gt;Timelapse&lt;&#x2F;a&gt; is a little open-source screen
recorder for macOS. It takes a screenshot every second and creates a movie in
the end.&lt;&#x2F;p&gt;
&lt;p&gt;To celebrate its unlikely 1.0 release today, I present here a &amp;quot;timelapse&amp;quot; of
this project&#x27;s journey. It just took &lt;em&gt;ten years&lt;&#x2F;em&gt; to get here.&lt;&#x2F;p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;endler.dev&amp;#x2F;video.css&quot; &#x2F;&gt;
&lt;script src=&quot;&#x2F;video.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div 
  class=&quot;light-video-embed&quot; 
  data-id=&quot;_QEmxAZqQhE&quot;
&gt;
  &lt;img src=&quot;timelapse.jpg&quot; loading=&quot;lazy&quot; &#x2F;&gt;
  &lt;div class=&quot;play&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
  document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    lightEmbedInit();
  });
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;2011-how-it-all-began&quot;&gt;2011 - How it all began&lt;&#x2F;h2&gt;
&lt;p&gt;To be honest, I don&#x27;t remember why I initially wrote the tool. I must have had a
personal need for a screen recorder, I guess...&lt;&#x2F;p&gt;
&lt;p&gt;In May 2011, when I started the project, I was doing my Masters Degree in
Computer Science. I might have needed the tool for University; most likely,
however, I was just trying to find an excuse for not working on an assignment.&lt;&#x2F;p&gt;
&lt;p&gt;During that time, I wrote a lot of tools like that. Mainly to scratch a personal
itch, learn a new programming language, or just have fun.&lt;&#x2F;p&gt;
&lt;p&gt;Among them are tools like a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;ihatesubways&quot;&gt;random sandwich
generator&lt;&#x2F;a&gt; for Subway (the American
fast-food chain), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;DrawRoom&quot;&gt;DrawRoom&lt;&#x2F;a&gt;, a keyboard-driven
drawing app inspired by
&lt;a href=&quot;https:&#x2F;&#x2F;www.hogbaysoftware.com&#x2F;products&#x2F;writeroom&quot;&gt;WriteRoom&lt;&#x2F;a&gt;, and the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;Creamy&quot;&gt;obligatory CMS software&lt;&#x2F;a&gt;, that I sold to
clients. Surprisingly, none of them were a great success.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;drawroom.png&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;DrawRoom, a tool that I wrote around the same time, is a real piece of art. To this day it has five commits and a single Github star (by myself, don&#x27;t judge...).&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        DrawRoom, a tool that I wrote around the same time, is a real piece of art. To this day it has five commits and a single Github star (by myself, don&#x27;t judge...).
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;What I &lt;em&gt;do&lt;&#x2F;em&gt; know for sure is that I was unhappy with all existing screen
recorders. They could roughly be categorized into these three groups:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Proprietary solutions that cost money or could call home.&lt;&#x2F;li&gt;
&lt;li&gt;Tools that didn&#x27;t work on macOS.&lt;&#x2F;li&gt;
&lt;li&gt;Small, fragile, one-off scripts that people passed around in forums or as
Github gists. They rarely worked as advertised.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Among the remaining tools were none that provided any timelapse functionality;
so I set out to write my own.&lt;&#x2F;p&gt;
&lt;p&gt;This all sounds very epic, but in reality, I worked on it for a day. After five
heroic commits on May 11, 2011, it sat there, idle, for seven years...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2018&quot;&gt;2018&lt;&#x2F;h2&gt;
&lt;p&gt;A lot of time elapsed before anything exciting happened.&lt;&#x2F;p&gt;
&lt;p&gt;In January &#x27;18, seemingly out of nowhere, the first user filed a bug report. It
was titled &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;timelapse&#x2F;issues&#x2F;1&quot;&gt;hung when creating the
avi&lt;&#x2F;a&gt; 😱. Turns out that a game
developer from Canada,
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCs2DJ9xpGic1pQkWNMwAUHw&quot;&gt;juul1a&lt;&#x2F;a&gt;, was trying
to use the tool to track her progress on an indie game — how cool is that?&lt;&#x2F;p&gt;
&lt;p&gt;To help her out, I decided to do some general cleanup, finally write down some
instructions on how to even use the program, add a &lt;code&gt;requirements.txt&lt;&#x2F;code&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;timelapse&#x2F;commit&#x2F;0b43515037670604143bf3b3eb06061ecfbbe108&quot;&gt;port
the tool from mencoder to
ffmpeg&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After that, timelapse was ready for prime-time. 🎬 Here is some live action from
her videos featuring timelapses:&lt;&#x2F;p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;endler.dev&amp;#x2F;video.css&quot; &#x2F;&gt;
&lt;script src=&quot;&#x2F;video.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div 
  class=&quot;light-video-embed&quot; 
  data-id=&quot;vv2CCwEM8Ws&quot;
&gt;
  &lt;img src=&quot;preview.jpg&quot; loading=&quot;lazy&quot; &#x2F;&gt;
  &lt;div class=&quot;play&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
  document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    lightEmbedInit();
  });
&lt;&#x2F;script&gt;
&lt;p&gt;At that point, the tool was still very wobbly and could only be used from the
commandline, but I began to see some potential for building a proper app from
it; I just never found the &lt;em&gt;time&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In October &#x27;18, I decided to ask for support during
&lt;a href=&quot;https:&#x2F;&#x2F;hacktoberfest.digitalocean.com&#x2F;details&#x2F;&quot;&gt;Hacktoberfest&lt;&#x2F;a&gt;. I created a few
tickets and labeled them with &lt;code&gt;hacktoberfest&lt;&#x2F;code&gt; to try and find contributors.&lt;&#x2F;p&gt;
&lt;p&gt;And then, I waited.&lt;&#x2F;p&gt;
&lt;p&gt;First, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ShreyaPrabhu&quot;&gt;Shreya V Prabhu&lt;&#x2F;a&gt; fixed an issue where a
new recording was overwriting the previous one by adding a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;timelapse&#x2F;pull&#x2F;3&quot;&gt;timestamp to the
video name&lt;&#x2F;a&gt;. Then &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;abnerpc&quot;&gt;Abner
Campanha&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ShaneCreedon&quot;&gt;Shane
Creedon&lt;&#x2F;a&gt; created a basic test structure.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seleregb&quot;&gt;Gbenro Selere&lt;&#x2F;a&gt; added a CI pipeline for Travis CI.
It really worked, and the project was in much better shape after that!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2019&quot;&gt;2019&lt;&#x2F;h2&gt;
&lt;p&gt;One year passes by, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Kerl1310&quot;&gt;Kyle Jones&lt;&#x2F;a&gt; adds some
contribution guidelines, while I move the CI pipeline to the newly released
Github actions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cmangla&quot;&gt;Chaitanya&lt;&#x2F;a&gt; fixed a bug where the program would hang when
the recording stopped by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;timelapse&#x2F;pull&#x2F;24&quot;&gt;moving the video creation from threads to a separate
process&lt;&#x2F;a&gt;. He continued to make the
codebase more robust and became a core contributor, reviewing pull requests and
handling releases.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;orcutt989&quot;&gt;orcutt989&lt;&#x2F;a&gt;, the app now made use of
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;timelapse&#x2F;pull&#x2F;33&quot;&gt;type hints in Python 3.6&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gkpln3&quot;&gt;gkpln3&lt;&#x2F;a&gt; added support for multi-monitor
configurations. The screen captured will always be the one with the mouse on it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020&quot;&gt;2020&lt;&#x2F;h2&gt;
&lt;p&gt;Fast forward to today, and after almost &lt;em&gt;ten years&lt;&#x2F;em&gt;, we finally created a true
macOS app using the awesome &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ronaldoussoren&#x2F;py2app&quot;&gt;py2app&lt;&#x2F;a&gt;
bundler. This should make the tool usable by non-developers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;back-to-the-future&quot;&gt;Back to the Future&lt;&#x2F;h2&gt;
&lt;p&gt;We reached the end of our little journey.&lt;&#x2F;p&gt;
&lt;p&gt;A long time has passed until 1.0. This project is a testament to the wonders of
open source collaboration, and I am proud to work on it with contributors from
around the world. It doesn&#x27;t have to be a life-changing project to bring people
together who have fun building things. If this were the end of the story, I&#x27;d be
okay with that. I doubt it, though. Here&#x27;s to the next ten years!&lt;&#x2F;p&gt;
&lt;p&gt;🎬 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;timelapse&quot;&gt;Download timelapse on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;&#x2F;h2&gt;
&lt;p&gt;The video at the beginning is a timelapse of how I finish this article.&lt;br &#x2F;&gt;
How meta.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Tiny, Static, Full-Text Search Engine using Rust and WebAssembly</title>
            <pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2019/tinysearch/</link>
            <guid>https://endler.dev/2019/tinysearch/</guid>
            <description>&lt;div class=&quot;info&quot;&gt;
  I wrote a basic search module that you can add to a static website.
It&#x27;s very lightweight (50kB-100kB gzipped) and should work with Hugo, Zola, and
Jekyll. Only searching for entire words is supported. Try the search box on the
left for a demo. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;tinysearch&quot;&gt;The code is on Github&lt;&#x2F;a&gt;.
&lt;&#x2F;div&gt;
&lt;p&gt;Static site generators are magical. They combine the best of both worlds:
dynamic content without sacrificing performance.&lt;&#x2F;p&gt;
&lt;p&gt;Over the years, this blog has been running on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;mre.github.io.v1&quot;&gt;Jekyll&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;mre.github.io.v2&quot;&gt;Cobalt&lt;&#x2F;a&gt;, and, lately,
&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One thing I always disliked, however, was the fact that static websites don&#x27;t
come with &amp;quot;static&amp;quot; search engines, too. Instead, people resort to &lt;a href=&quot;https:&#x2F;&#x2F;cse.google.com&#x2F;about&quot;&gt;custom Google
searches&lt;&#x2F;a&gt;, external search engines like &lt;a href=&quot;https:&#x2F;&#x2F;www.algolia.com&#x2F;&quot;&gt;Algolia&lt;&#x2F;a&gt;, or pure
JavaScript-based solutions like &lt;a href=&quot;https:&#x2F;&#x2F;lunrjs.com&#x2F;&quot;&gt;lunr.js&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;elasticlunr.com&#x2F;&quot;&gt;elasticlunr&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All of these work fine for most sites, but it never felt like the final answer.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t want to add yet another dependency on Google; neither did I want to use
a stand-alone web-backend like Algolia, which adds latency and is proprietary.&lt;&#x2F;p&gt;
&lt;p&gt;On the other side, I&#x27;m not a huge fan of JavaScript-heavy websites. For example,
just the search indices that lunr creates can be &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;olivernn&#x2F;lunr.js&#x2F;issues&#x2F;268#issuecomment-304490937&quot;&gt;multiple megabytes
in size&lt;&#x2F;a&gt;.
That feels lavish - even by today&#x27;s bandwidth standards. On top of that,
&lt;a href=&quot;https:&#x2F;&#x2F;v8.dev&#x2F;blog&#x2F;cost-of-javascript-2019&quot;&gt;parsing JavaScript is still
time-consuming&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted some simple, lean, and self-contained search, that could be deployed
next to my other static content.&lt;&#x2F;p&gt;
&lt;p&gt;As a consequence, I refrained from adding search functionality to my blog at
all. That&#x27;s unfortunate because, with a growing number of articles, it gets
harder and harder to find relevant content.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-idea&quot;&gt;The Idea&lt;&#x2F;h2&gt;
&lt;p&gt;Many years ago, in 2013, I read &lt;a href=&quot;https:&#x2F;&#x2F;www.stavros.io&#x2F;posts&#x2F;bloom-filter-search-engine&#x2F;&quot;&gt;&amp;quot;Writing a full-text search engine using Bloom
filters&amp;quot;&lt;&#x2F;a&gt; — and it was a revelation.&lt;&#x2F;p&gt;
&lt;p&gt;The idea was simple: Let&#x27;s run all articles through a generator that creates a
tiny, self-contained search index using this magical data structure called a
✨&lt;em&gt;Bloom Filter&lt;&#x2F;em&gt; ✨.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-a-bloom-filter&quot;&gt;What&#x27;s a Bloom Filter?&lt;&#x2F;h2&gt;
&lt;p&gt;Roughly speaking, a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bloom_filter&quot;&gt;Bloom filter&lt;&#x2F;a&gt; is a space-efficient way to
check if an element is in a set.&lt;&#x2F;p&gt;
&lt;p&gt;The trick is that it doesn&#x27;t store the elements themselves; it just knows with
some confidence that they were stored before. In our case, it can say with a
certain &lt;em&gt;error rate&lt;&#x2F;em&gt; that a word is in an article.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;bloomfilter.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A Bloom filter stores a
&#x27;fingerprint&#x27; (a number of hash values) of all input values instead of the raw
input. The result is a low-memory-footprint data structure. This is an example
of &#x27;hello&#x27; as an input.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A Bloom filter stores a
&#x27;fingerprint&#x27; (a number of hash values) of all input values instead of the raw
input. The result is a low-memory-footprint data structure. This is an example
of &#x27;hello&#x27; as an input.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Here&#x27;s the Python code from the original article that generates the Bloom
filters for each post (courtesy of &lt;a href=&quot;https:&#x2F;&#x2F;www.stavros.io&quot;&gt;Stavros
Korokithakis&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;filters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;split_posts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;():
  filters[name] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;BloomFilter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(words)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error_rate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;words:
    filters[name]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(word)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The memory footprint is extremely small, thanks to &lt;code&gt;error_rate&lt;&#x2F;code&gt;, which allows
for a negligible number of false positives.&lt;&#x2F;p&gt;
&lt;p&gt;I immediately knew that I wanted something like this for my homepage. My idea
was to directly ship the Bloom filters and the search engine to the browser. I
could finally have a small, static search without the need for a backend!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;headaches&quot;&gt;Headaches&lt;&#x2F;h2&gt;
&lt;p&gt;The disillusionment came quickly.&lt;&#x2F;p&gt;
&lt;p&gt;I had no idea how to bundle and minimize the generated Bloom filters, let alone
run them on clients. The original article briefly touches on this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You need to implement a Bloom filter algorithm on the client-side. This will
probably not be much longer than the inverted index search algorithm, but it’s
still probably a bit more complicated.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I didn&#x27;t feel confident enough in my JavaScript skills to pull this off. Back in
2013, NPM was a mere three years old, and WebPack just turned one, so I also
didn&#x27;t know where to look for existing solutions.&lt;&#x2F;p&gt;
&lt;p&gt;Unsure what to do next, my idea remained a pipe dream.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-new-hope&quot;&gt;A New Hope&lt;&#x2F;h2&gt;
&lt;p&gt;Five years later, in 2018, the web had become a different place. Bundlers were
ubiquitous, and the Node ecosystem was flourishing. One thing, in particular,
revived my dreams about the tiny static search engine: &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;webassembly&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebAssembly (abbreviated Wasm) is a binary instruction format for a
stack-based virtual machine. Wasm is designed as a portable target for
compilation of high-level languages like C&#x2F;C++&#x2F;Rust, enabling deployment on
the web for client and server applications. [&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;source&lt;&#x2F;a&gt;]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This meant that I could use a language that I was familiar with to write the
client-side code — Rust! 🎉&lt;&#x2F;p&gt;
&lt;p&gt;My journey started with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;tinysearch&#x2F;commit&#x2F;82c1d36835348718f04c9ca0dd2c1ebf8b19a312&quot;&gt;prototype back in January
2018&lt;&#x2F;a&gt;.
It was just a direct port of the Python version from above:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; filters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; words) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; articles {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;BloomFilter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;with_rate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; words&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; words {
    filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;word)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
  filters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; filter)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While I managed to create the Bloom filters for every article, I &lt;em&gt;still&lt;&#x2F;em&gt; had no
clue how I should package that up for the web... until &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;wasm-pack&#x2F;commit&#x2F;125431f97eecb6f3ca5122f8b345ba5b7eee94c7&quot;&gt;wasm-pack came along in
February
2018&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;whoops-i-shipped-some-rust-code-to-your-browser&quot;&gt;Whoops! I Shipped Some Rust Code To Your Browser.&lt;&#x2F;h2&gt;
&lt;p&gt;Now I had all the pieces of the puzzle:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust - A language I was comfortable with&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;wasm-pack&quot;&gt;wasm-pack&lt;&#x2F;a&gt; - A bundler for WebAssembly modules&lt;&#x2F;li&gt;
&lt;li&gt;A working prototype that served as a proof-of-concept&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The search box you see at the top of this page is the outcome. It fully runs on Rust using
WebAssembly (a.k.a the &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;timClicks&#x2F;status&#x2F;1181822319620063237&quot;&gt;RAW stack&lt;&#x2F;a&gt;). Try it now if you like.&lt;&#x2F;p&gt;
&lt;p&gt;There were quite a few obstacles along the way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bloom-filter-crates&quot;&gt;Bloom Filter Crates&lt;&#x2F;h2&gt;
&lt;p&gt;I looked into a few Rust libraries (crates) that implement Bloom filters.&lt;&#x2F;p&gt;
&lt;p&gt;First, I tried jedisct1&#x27;s
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jedisct1&#x2F;rust-bloom-filter&quot;&gt;rust-bloom-filter&lt;&#x2F;a&gt;, but the types
didn&#x27;t implement
&lt;a href=&quot;https:&#x2F;&#x2F;docs.serde.rs&#x2F;serde&#x2F;trait.Serialize.html&quot;&gt;Serialize&lt;&#x2F;a&gt;&#x2F;&lt;a href=&quot;https:&#x2F;&#x2F;docs.serde.rs&#x2F;serde&#x2F;trait.Deserialize.html&quot;&gt;Deserialize&lt;&#x2F;a&gt;.
This meant that I could not store my generated Bloom filters inside the binary and load
them from the client-side.&lt;&#x2F;p&gt;
&lt;p&gt;After trying a few others, I found the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seiflotfy&#x2F;rust-cuckoofilter&quot;&gt;cuckoofilter&lt;&#x2F;a&gt; crate, which
supported serialization. The behavior is similar to Bloom filters, but if you&#x27;re
interested in the differences, you can look at &lt;a href=&quot;https:&#x2F;&#x2F;brilliant.org&#x2F;wiki&#x2F;cuckoo-filter&#x2F;&quot;&gt;this
summary&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how to use it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cuckoofilter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Add data to the filter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello world&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; success &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(value)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Lookup if data was added before
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; success &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(value)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; success ==&amp;gt; true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s check the output size when bundling the filters for ten articles on my blog using cuckoo filters:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;~&#x2F;C&#x2F;p&#x2F;tinysearch ❯❯❯ l storage
Permissions Size User    Date Modified Name
.rw-r--r--   44k mendler 24 Mar 15:42  storage
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;44kB&lt;&#x2F;strong&gt; doesn&#x27;t sound too shabby, but these are just the cuckoo filters for ten
articles, serialized as a Rust binary. On top of that, we have to add the search
functionality and the helper code. In total, the client-side code weighed in at
&lt;strong&gt;216kB&lt;&#x2F;strong&gt; using vanilla wasm-pack. Too much.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trimming-binary-size&quot;&gt;Trimming Binary Size&lt;&#x2F;h2&gt;
&lt;p&gt;After the sobering first result of 216kB for our initial prototype, we have a
few options to bring the binary size down.&lt;&#x2F;p&gt;
&lt;p&gt;The first is following &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;johnthagen&quot;&gt;johnthagen&#x27;s&lt;&#x2F;a&gt; advice on
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;johnthagen&#x2F;min-sized-rust&quot;&gt;minimizing Rust binary size&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By setting a few options in our &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;, we can shave off quite a few bytes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;opt-level = &amp;#39;z&amp;#39;&amp;quot; =&amp;gt; 249665 bytes
&amp;quot;lto = true&amp;quot;      =&amp;gt; 202516 bytes
&amp;quot;opt-level = &amp;#39;s&amp;#39;&amp;quot; =&amp;gt; 195950 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Setting &lt;code&gt;opt-level&lt;&#x2F;code&gt; to &lt;code&gt;s&lt;&#x2F;code&gt; means we trade size for speed,
but we&#x27;re preliminarily interested in minimal size anyway. After all, a small download size also improves performance.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we can try &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;wee_alloc&quot;&gt;wee_alloc&lt;&#x2F;a&gt;, an alternative Rust allocator
producing a small &lt;code&gt;.wasm&lt;&#x2F;code&gt; code size.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is geared towards code that makes a handful of initial dynamically sized allocations, and then performs its heavy lifting without any further allocations. This scenario requires some allocator to exist, but we are more than happy to trade allocation performance for small code size.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Exactly what we want. Let&#x27;s try!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;wee_alloc and nightly&amp;quot; =&amp;gt; 187560 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We shaved off another 4% from our binary.&lt;&#x2F;p&gt;
&lt;p&gt;Out of curiosity, I tried to set &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;codegen-options&#x2F;index.html#codegen-units&quot;&gt;codegen-units&lt;&#x2F;a&gt; to 1, meaning we only use a single thread for code generation. Surprisingly, this resulted in a slightly smaller binary size.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;codegen-units = 1&amp;quot; =&amp;gt; 183294 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then I got word of a Wasm optimizer called &lt;code&gt;binaryen&lt;&#x2F;code&gt;.
On macOS, it&#x27;s available through homebrew:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;brew install binaryen
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It ships a binary called &lt;code&gt;wasm-opt&lt;&#x2F;code&gt; and that shaved off another 15%:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;wasm-opt -Oz&amp;quot; =&amp;gt; 154413 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then I removed web-sys as we don&#x27;t have to bind to the DOM: 152858 bytes.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a tool called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;twiggy&quot;&gt;twiggy&lt;&#x2F;a&gt; to profile the code size of Wasm binaries.
It printed the following output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;twiggy top -n 20 pkg&#x2F;tinysearch_bg.wasm
 Shallow Bytes │ Shallow % │ Item
─────────────┼───────────┼────────────────────────────────
         79256 ┊    44.37% ┊ data[0]
         13886 ┊     7.77% ┊ &amp;quot;function names&amp;quot; subsection
          7289 ┊     4.08% ┊ data[1]
          6888 ┊     3.86% ┊ core::fmt::float::float_to_decimal_common_shortest::hdd201d50dffd0509
          6080 ┊     3.40% ┊ core::fmt::float::float_to_decimal_common_exact::hcb5f56a54ebe7361
          5972 ┊     3.34% ┊ std::sync::once::Once::call_once::{{closure}}::ha520deb2caa7e231
          5869 ┊     3.29% ┊ search
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From what I can tell, the biggest chunk of our binary is occupied by the raw data section for our articles.
Next up, we got the function headers and some float to decimal helper functions, that most likely come from deserialization.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I tried &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;wasm-snip&quot;&gt;wasm-snip&lt;&#x2F;a&gt;, which replaces a WebAssembly function&#x27;s body with an &lt;code&gt;unreachable&lt;&#x2F;code&gt; like so, but it didn&#x27;t reduce code size:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;wasm-snip --snip-rust-fmt-code --snip-rust-panicking-code -o pkg&#x2F;tinysearch_bg_snip.wasm pkg&#x2F;tinysearch_bg_opt.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After tweaking with the parameters of the cuckoo filters a bit and removing
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stop_words&quot;&gt;stop words&lt;&#x2F;a&gt; from the articles, I
arrived at &lt;strong&gt;121kB&lt;&#x2F;strong&gt; (51kB gzipped) — not bad considering the average image size on the web is &lt;a href=&quot;https:&#x2F;&#x2F;httparchive.org&#x2F;reports&#x2F;state-of-images#bytesImg&quot;&gt;around 900kB&lt;&#x2F;a&gt;.
On top of that, the search functionality only gets loaded when a user clicks into the search field.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;frontend-and-glue-code&quot;&gt;Frontend and Glue Code&lt;&#x2F;h2&gt;
&lt;p&gt;wasm-pack will auto-generate the JavaScript code to talk to Wasm.&lt;&#x2F;p&gt;
&lt;p&gt;For the search UI, I customized a few JavaScript and CSS bits from
&lt;a href=&quot;https:&#x2F;&#x2F;www.w3schools.com&#x2F;howto&#x2F;tryit.asp?filename=tryhow_js_autocomplete&quot;&gt;w3schools&lt;&#x2F;a&gt;.
It even has keyboard support!
Now when a user enters a search query, we go through the cuckoo filter of each
article and try to match the words. The results are scored by the number of
hits. Thanks to my dear colleague &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jorgelbg&#x2F;&quot;&gt;Jorge Luis Betancourt&lt;&#x2F;a&gt; for adding that part.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;anim-opt.gif&quot; alt=&quot;Video of the search functionality&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;(Fun fact: this animation is about the same size as the uncompressed Wasm search itself.)&lt;&#x2F;p&gt;
&lt;p&gt;Only whole words are matched. I would love to add prefix-search, but the
binary became too big when I tried.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;&#x2F;h2&gt;
&lt;p&gt;The standalone binary to create the Wasm file is called &lt;code&gt;tinysearch&lt;&#x2F;code&gt;.
It expects a single path to a JSON file as an input:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tinysearch path&#x2F;to&#x2F;corpus.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;corpus.json&lt;&#x2F;code&gt; contains the text you would like to index. The format is pretty straightforward:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[
  {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Article 1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;url&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;example.com&#x2F;article1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;body&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;This is the body of article 1.&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Article 2&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;url&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;example.com&#x2F;article2&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;body&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;This is the body of article 2.&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can generate this JSON file with any static site generator.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;mre.github.io&#x2F;tree&#x2F;1c731717b48afb584e54ca4dd5fd649f9b74e51c&#x2F;templates&quot;&gt;Here&#x27;s my version for Zola&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;section &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_section&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;_index.md&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

[
  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;%- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;post in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;draft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
      {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;striptags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;json_encode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;safe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;url&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;permalink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;json_encode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;safe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;body&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;striptags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;json_encode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;safe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}}
      }
      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;last &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;%- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;endfor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m pretty sure that the Jekyll version looks quite similar.
&lt;a href=&quot;https:&#x2F;&#x2F;learn.cloudcannon.com&#x2F;jekyll&#x2F;output-json&#x2F;&quot;&gt;Here&#x27;s a starting point&lt;&#x2F;a&gt;.
If you get something working for your static site generator, please let me know.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;observations&quot;&gt;Observations&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;This is still the wild west: unstable features, nightly Rust, documentation
gets outdated almost every day.&lt;br &#x2F;&gt;
Bring your thinking cap!&lt;&#x2F;li&gt;
&lt;li&gt;Creating a product out of a good idea is a lot of work. One has to pay
attention to many factors: ease-of-use, generality, maintainability,
documentation, and so on.&lt;&#x2F;li&gt;
&lt;li&gt;Rust is very good at removing dead code, so you usually don&#x27;t pay for what
you don&#x27;t use. I would still advise you to be very conservative about the
dependencies you add to a Wasm binary because it&#x27;s tempting to add features
that you don&#x27;t need and which will add to the binary size. For example, I
used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;StructOpt&lt;&#x2F;a&gt; during testing, and I had a &lt;code&gt;main()&lt;&#x2F;code&gt; function that was parsing
these command-line arguments. This was not necessary for Wasm, so I
removed it later.&lt;&#x2F;li&gt;
&lt;li&gt;I understand that not everyone wants to write Rust code. It&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;go-vs-rust&#x2F;&quot;&gt;complicated to
get started with&lt;&#x2F;a&gt;, but the cool thing is that you can
use almost any other language, too. For example, you can write Go code and
transpile to Wasm, or maybe you prefer PHP or Haskell. There is support for
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;appcypher&#x2F;awesome-wasm-langs&quot;&gt;many languages&lt;&#x2F;a&gt; already.&lt;&#x2F;li&gt;
&lt;li&gt;A lot of people dismiss WebAssembly as a toy technology. They couldn&#x27;t be
further from the truth. In my opinion, WebAssembly will revolutionize the way we build
products for the web and beyond. What was very hard just two years ago is now
easy: shipping code in any language to every browser. I&#x27;m super excited about
its future.&lt;&#x2F;li&gt;
&lt;li&gt;If you&#x27;re looking for a standalone, self-hosted search index for your company
website, check out &lt;a href=&quot;https:&#x2F;&#x2F;journal.valeriansaliou.name&#x2F;announcing-sonic-a-super-light-alternative-to-elasticsearch&#x2F;&quot;&gt;sonic&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;try-it&quot;&gt;Try it!&lt;&#x2F;h2&gt;
&lt;p&gt;The code for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;tinysearch&quot;&gt;tinysearch is on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Please be aware of these limitations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Only searches for entire words.&lt;&#x2F;strong&gt; There are no search suggestions.
The reason is that prefix search blows up binary size like &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=b6u9WJ01Oxs&quot;&gt;Mentos and Diet Coke&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Since we bundle all search indices for all articles into one static binary, I
&lt;strong&gt;only recommend to use it for low- to medium-size websites&lt;&#x2F;strong&gt;. Expect around 4kB
(non-compressed) per article.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strike&gt;The &lt;strong&gt;compile times are abysmal&lt;&#x2F;strong&gt; at the moment (around 1.5 minutes after a
fresh install on my machine), mainly because we&#x27;re compiling the Rust crate
from scratch every time we rebuild the index.&lt;&#x2F;strike&gt;&lt;br &#x2F;&gt;
Update: This is mostly fixed thanks to the awesome work of
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CephalonRho&quot;&gt;CephalonRho&lt;&#x2F;a&gt; in PR
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;tinysearch&#x2F;pull&#x2F;13&quot;&gt;#13&lt;&#x2F;a&gt;. Thanks again!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The final Wasm code is laser-fast because we save the roundtrips to a
search-server. The instant feedback loop feels more like filtering a list than
searching through files. It can even work fully offline, which might be nice if
you like to bundle it with an app.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Maybe You Don&#x27;t Need Kubernetes</title>
            <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2019/maybe-you-dont-need-kubernetes/</link>
            <guid>https://endler.dev/2019/maybe-you-dont-need-kubernetes/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;scooter.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;A woman riding a scooter&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        A woman riding a scooter
        &lt;br &#x2F;&gt;
        Illustration created by &lt;a href=&quot;https:&#x2F;&#x2F;www.freepik.com&#x2F;free-photos-vectors&#x2F;car&quot;&gt;freepik&lt;&#x2F;a&gt;, Nomad logo by &lt;a href=&quot;https:&#x2F;&#x2F;www.nomadproject.io&#x2F;&quot;&gt;HashiCorp&lt;&#x2F;a&gt;.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Kubernetes is the 800-pound gorilla of container orchestration.&lt;br &#x2F;&gt;
It powers some of the biggest deployments worldwide, but it comes
with a price tag.&lt;&#x2F;p&gt;
&lt;p&gt;Especially for smaller teams, it can be time-consuming to maintain and has a
steep learning curve. For what our team of four wanted to achieve at trivago, it
added too much overhead. So we looked into alternatives — and fell in love with
&lt;a href=&quot;https:&#x2F;&#x2F;www.nomadproject.io&#x2F;&quot;&gt;Nomad&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-wishlist&quot;&gt;The wishlist&lt;&#x2F;h2&gt;
&lt;p&gt;Our team runs a number of typical services for monitoring and performance
analysis: API endpoints for metrics written in Go, Prometheus exporters, log
parsers like Logstash or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;trivago&#x2F;gollum&quot;&gt;Gollum&lt;&#x2F;a&gt;, and databases like InfluxDB or Elasticsearch.
Each of these services run in their own container. We needed a simple system to
keep those jobs running.&lt;&#x2F;p&gt;
&lt;p&gt;We started with a list of requirements for container orchestration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Run a fleet of services across many machines.&lt;&#x2F;li&gt;
&lt;li&gt;Provide an overview of running services.&lt;&#x2F;li&gt;
&lt;li&gt;Allow for communication between services.&lt;&#x2F;li&gt;
&lt;li&gt;Restart them automatically when they die.&lt;&#x2F;li&gt;
&lt;li&gt;Be manageable by a small team.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;On top of that, the following things were nice to have but not strictly
required:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tag machines by their capabilities (e.g., label machines with fast disks for
I&#x2F;O heavy services.)&lt;&#x2F;li&gt;
&lt;li&gt;Be able to run these services independently of any orchestrator (e.g. in
development).&lt;&#x2F;li&gt;
&lt;li&gt;Have a common place to share configurations and secrets.&lt;&#x2F;li&gt;
&lt;li&gt;Provide an endpoint for metrics and logging.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-kubernetes-was-not-a-good-fit-for-us&quot;&gt;Why Kubernetes was not a good fit for us&lt;&#x2F;h2&gt;
&lt;p&gt;When creating a prototype with Kubernetes, we noticed that we started adding
ever-more complex layers of logic to operate our services. Logic on which we
implicitly relied on.&lt;&#x2F;p&gt;
&lt;p&gt;As an example, Kubernetes allows embedding service configurations using
&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-pod-configmap&#x2F;&quot;&gt;ConfigMaps&lt;&#x2F;a&gt;. Especially when merging multiple config files or
adding more services to a pod, this can get quite confusing quickly.
Kubernetes - or &lt;a href=&quot;https:&#x2F;&#x2F;helm.sh&#x2F;&quot;&gt;helm&lt;&#x2F;a&gt;, for that matter - allows injecting external configs
dynamically to ensure separation of concerns. But this can
lead to tight, implicit coupling between your project and Kubernetes.
Helm and ConfigMaps are optional features so you don’t have to use them. You
might as well just copy the config into the Docker image. However, it’s tempting
to go down that path and build unnecessary abstractions that can later bite you.&lt;&#x2F;p&gt;
&lt;p&gt;On top of that, the Kubernetes ecosystem is still rapidly evolving. It takes a
fair amount of time and energy to stay up-to-date with the best practices and
latest tooling. Kubectl, minikube, kubeadm, helm, tiller, kops, oc - the list
goes on and on. Not all tools are necessary to get started with Kubernetes, but
it’s hard to know which ones are, so you have to be at least aware of them.
Because of that, the learning curve is quite steep.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-to-use-kubernetes&quot;&gt;When to use Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;At trivago specifically, many teams use Kubernetes and are quite happy with it.
These instances are managed by Google or Amazon however, which have the capacity to do so.&lt;&#x2F;p&gt;
&lt;p&gt;Kubernetes comes with &lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2017&#x2F;08&#x2F;05&#x2F;how-kubernetes-certificates-work&#x2F;&quot;&gt;amazing
features&lt;&#x2F;a&gt;,
that make container orchestration at scale more manageable:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fine-grained &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;access-authn-authz&#x2F;authorization&#x2F;&quot;&gt;rights management&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;extend-kubernetes&#x2F;api-extension&#x2F;custom-resources&#x2F;#custom-controllers&quot;&gt;Custom controllers&lt;&#x2F;a&gt; allow getting logic into the cluster. These are just
programs that talk to the Kubernetes API.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;run-application&#x2F;horizontal-pod-autoscale&#x2F;&quot;&gt;Autoscaling&lt;&#x2F;a&gt;! Kubernetes can scale your services up and down on demand. It
uses service metrics to do this without manual intervention.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The question is if you really need all those features. You can&#x27;t rely on these
abstractions to just work; &lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2017&#x2F;08&#x2F;05&#x2F;how-kubernetes-certificates-work&#x2F;&quot;&gt;you&#x27;ll have to learn what&#x27;s going on under the
hood&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Especially in our team, which runs most services on-premise (because of its
close connection to trivago&#x27;s core infrastructure), we didn&#x27;t want to afford
running our own Kubernetes cluster. We wanted to ship services instead.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;twitter.com&amp;#x2F;QuinnyPig&amp;#x2F;status&amp;#x2F;1093261169614356490&quot;&gt;
        &lt;img src=&quot;.&amp;#x2F;nuclear-kubernetes.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Nuclear hot take: nobody will care about Kubernetes in five years. -A tweet by Corey Quinn&quot;
        &#x2F;&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;batteries-not-included&quot;&gt;Batteries not included&lt;&#x2F;h2&gt;
&lt;p&gt;Nomad is the 20% of service orchestration that gets you 80% of the way. All it
does is manage deployments. It takes care of your rollouts and restarts your
containers in case of errors, and that&#x27;s about it.&lt;&#x2F;p&gt;
&lt;p&gt;The entire point of Nomad is that it does &lt;em&gt;less&lt;&#x2F;em&gt;: it doesn’t include
fine-grained rights management or &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;network-policies&#x2F;&quot;&gt;advanced network policies&lt;&#x2F;a&gt;, and that’s by
design. Those components are provided as enterprise services, by a third-party,
or not at all.&lt;&#x2F;p&gt;
&lt;p&gt;I think Nomad hit a sweet-spot between ease of use and expressiveness. It&#x27;s good
for small, mostly independent services. If you need more control, you&#x27;ll have to
build it yourself or use a different approach. Nomad is &lt;em&gt;just&lt;&#x2F;em&gt; an orchestrator.&lt;&#x2F;p&gt;
&lt;p&gt;The best part about Nomad is that it&#x27;s easy to &lt;em&gt;replace&lt;&#x2F;em&gt;. There is little to no
vendor lock-in because the functionality it provides can easily be integrated
into any other system that manages services. It just runs as a plain old single
binary on every machine in your cluster; that&#x27;s it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-nomad-ecosystem-of-loosely-coupled-components&quot;&gt;The Nomad ecosystem of loosely coupled components&lt;&#x2F;h2&gt;
&lt;p&gt;The real power of Nomad lies within its ecosystem. It integrates very well with
other - completely optional - products like &lt;a href=&quot;https:&#x2F;&#x2F;www.consul.io&#x2F;&quot;&gt;Consul&lt;&#x2F;a&gt; (a key-value store) or
&lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&#x2F;&quot;&gt;Vault&lt;&#x2F;a&gt; (for secrets handling). Inside your Nomad file, you can have sections
for fetching data from those services:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  data = &amp;lt;&amp;lt;EOH
LOG_LEVEL=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{key &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;service&#x2F;geo-api&#x2F;log-verbosity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;}}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
API_KEY=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{{with secret &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;secret&#x2F;geo-api-key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;}}{{.Data.value}}{{end}}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
EOH

  destination = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;secrets&#x2F;file.env&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  env         = true
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will read the &lt;code&gt;service&#x2F;geo-api&#x2F;log-verbosity&lt;&#x2F;code&gt; key from Consul and expose it
as a &lt;code&gt;LOG_LEVEL&lt;&#x2F;code&gt; environment variable inside your job. It&#x27;s also exposing
&lt;code&gt;secret&#x2F;geo-api-key&lt;&#x2F;code&gt; from Vault as &lt;code&gt;API_KEY&lt;&#x2F;code&gt;. Simple, but powerful!&lt;&#x2F;p&gt;
&lt;p&gt;Because it&#x27;s so simple, Nomad can also be easily extended with other services
through its API. For example, jobs can be tagged for service discovery. At
trivago, we tag all services, which expose metrics, with &lt;code&gt;trv-metrics&lt;&#x2F;code&gt;. This
way, Prometheus finds the services via Consul and periodically scrapes the
&lt;code&gt;&#x2F;metrics&lt;&#x2F;code&gt; endpoint for new data. The same can be done for logs by integrating
&lt;a href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;oss&#x2F;loki&quot;&gt;Loki&lt;&#x2F;a&gt; for example.&lt;&#x2F;p&gt;
&lt;p&gt;There are many other examples for extensibility:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Trigger a Jenkins job using a webhook and Consul watches to redeploy your
Nomad job on service config changes.&lt;&#x2F;li&gt;
&lt;li&gt;Use Ceph to add a distributed file system to Nomad.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fabiolb&#x2F;fabio&quot;&gt;fabio&lt;&#x2F;a&gt; for load balancing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All of this allowed us to &lt;a href=&quot;https:&#x2F;&#x2F;tech.trivago.com&#x2F;2019&#x2F;01&#x2F;25&#x2F;nomad-our-experiences-and-best-practices&#x2F;&quot;&gt;grow our infrastructure organically&lt;&#x2F;a&gt; without too much
up-front commitment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fair-warning&quot;&gt;Fair warning&lt;&#x2F;h2&gt;
&lt;p&gt;No system is perfect. I advise you not to use any fancy new features in
production right now. There are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;nomad&#x2F;issues?q=is%3Aopen+is%3Aissue+label%3Abug&quot;&gt;bugs&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;nomad&#x2F;issues&#x2F;698&quot;&gt;missing features&lt;&#x2F;a&gt; of course - but
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;issues?q=is%3Aopen+is%3Aissue+label%3Akind%2Fbug&quot;&gt;that&#x27;s also the case for
Kubernetes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Compared to Kubernetes, there is far less momentum behind Nomad. Kubernetes has
seen around 75.000 commits and 2000 contributors so far, while Nomad sports about
14.000 commits and 300 contributors. It will be hard for Nomad to keep up with
the velocity of Kubernetes, but maybe it doesn’t have to! The scope is much more
narrow and the smaller community could also mean that it&#x27;ll be easier to get your
pull request accepted, in comparison to Kubernetes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;The takeaway is: don&#x27;t use Kubernetes just because everybody else does.
Carefully evaluate your requirements and check which tool fits the bill.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re planning to deploy a fleet of homogenous services on large-scale
infrastructure, Kubernetes might be the way to go. Just be aware of the
additional complexity and operational costs. Some of these costs can be
avoided by using a managed Kubernetes environment like &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;kubernetes-engine&#x2F;&quot;&gt;Google Kubernetes
Engine&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon EKS&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re just looking for a reliable orchestrator that is easy to maintain and
extendable, why not give Nomad a try? You might be surprised by how far it&#x27;ll get you.&lt;&#x2F;p&gt;
&lt;p&gt;If Kubernetes were a car, Nomad would be a scooter. Sometimes you prefer one and
sometimes the other. Both have their right to exist.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>What Is Rust Doing Behind the Curtains?</title>
            <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/cargo-inspect/</link>
            <guid>https://endler.dev/2018/cargo-inspect/</guid>
            <description>&lt;p&gt;Rust allows for a lot of syntactic sugar, that makes it a pleasure to write. It is sometimes hard, however, to look behind the curtain and see what the compiler is really doing with our code.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Unreasonable Effectiveness of Excel Macros</title>
            <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/excel/</link>
            <guid>https://endler.dev/2018/excel/</guid>
            <description>&lt;p&gt;I never was a big fan of internships, partially because all the exciting
companies were far away from my little village in Bavaria and partially because
I was too shy to apply.&lt;&#x2F;p&gt;
&lt;p&gt;Only once I applied for an internship in Ireland as part of a school program.
Our teacher assigned the jobs and so my friend got one at Apple and I ended up
at a medium-sized IT distributor — let&#x27;s call them PcGo.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Switching from a German to a US Keyboard Layout - Is It Worth It?</title>
            <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/keyboard/</link>
            <guid>https://endler.dev/2018/keyboard/</guid>
            <description>&lt;p&gt;For the first three decades of my life, I&#x27;ve used a German keyboard layout.
A few months ago, I switched to a US layout.
This post summarizes my thoughts around the topic.
I was looking for a similar article before jumping the gun, but I couldn&#x27;t find one — so I&#x27;ll try to fill this gap.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-switch&quot;&gt;Why switch?&lt;&#x2F;h2&gt;
&lt;p&gt;I was reasonably efficient when writing prose, but felt like 
a lemur on a piano when programming: reaching the special keys (&lt;code&gt;{&lt;&#x2F;code&gt;, &lt;code&gt;;&lt;&#x2F;code&gt;, or &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;)
required lots of finger-stretching.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;KB_Germany.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;German Keyboard Layout&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        German Keyboard Layout
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;w&#x2F;index.php?curid=1058095&quot;&gt;Image by Wikipedia&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Here&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;German_keyboard_layout&quot;&gt;Wikipedia&#x27;s polite
explanation&lt;&#x2F;a&gt; why the
German keyboard sucks for programming:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Like many other non-American keyboards, German keyboards change the right Alt
key into an &lt;b&gt;Alt Gr key to access a third level&lt;&#x2F;b&gt; of key assignments. This is
necessary because the umlauts and some other special characters leave no room
to have all the special symbols of ASCII, needed by programmers among others,
available on the first or second (shifted) levels without unduly increasing
the size of the keyboard.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;why-switch-now&quot;&gt;Why switch &lt;strong&gt;now&lt;&#x2F;strong&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;After many years of using a rubber-dome &lt;a href=&quot;https:&#x2F;&#x2F;support.logitech.com&#x2F;en_us&#x2F;product&#x2F;cordless-desktop-wave&#x2F;&quot;&gt;Logitech Cordless Desktop
Wave&lt;&#x2F;a&gt;, I
had to get a mechanical keyboard again. &lt;&#x2F;p&gt;
&lt;p&gt;Those rubber domes just feel too mushy to me now. In addition to that, I enjoy the
clicky sound of a mechanical keyboard and the noticeable tactile bump. (I&#x27;m using
&lt;a href=&quot;https:&#x2F;&#x2F;www.keyboardco.com&#x2F;blog&#x2F;index.php&#x2F;2012&#x2F;12&#x2F;an-introduction-to-cherry-mx-mechanical-switches&#x2F;&quot;&gt;Cherry MX Brown Keys&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;www.howtogeek.com&#x2F;293659&#x2F;how-to-quiet-your-mechanical-keyboard-with-switch-dampeners&#x2F;&quot;&gt;O-Ring dampeners&lt;&#x2F;a&gt; to contain the anger of my coworkers.)&lt;&#x2F;p&gt;
&lt;p&gt;Most mechanical keyboards come with an ANSI US layout only, so I figured, I&#x27;d
finally make the switch.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;durgod_taurus.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Picture of my lovely keyboard&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Picture of my lovely keyboard
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;how-long-did-it-take-to-get-accustomed-to-the-new-layout&quot;&gt;How long did it take to get accustomed to the new layout?&lt;&#x2F;h2&gt;
&lt;p&gt;Working as a Software Engineer, my biggest fear was, that the switch would slow
down my daily work. This turned out not to be true. I was reasonably productive
from day one and nobody even noticed any difference. (That&#x27;s a good thing,
right?)&lt;&#x2F;p&gt;
&lt;p&gt;At first, I didn&#x27;t like the &lt;em&gt;bar-shaped US-Return key&lt;&#x2F;em&gt;. I preferred the European
layout with a &lt;em&gt;vertical enter key&lt;&#x2F;em&gt;. I was afraid that I would hit the key by
accident. After a while, I find that the US return key to be even more convenient. 
I never hit it by accident.&lt;&#x2F;p&gt;
&lt;p&gt;Within two weeks, I was back to 100% typing speed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;did-my-programming-speed-improve-noticeably&quot;&gt;Did my programming speed improve noticeably?&lt;&#x2F;h2&gt;
&lt;p&gt;Yup.&lt;&#x2F;p&gt;
&lt;p&gt;Especially when using special characters (&lt;code&gt;&#x2F;&lt;&#x2F;code&gt;, &lt;code&gt;;&lt;&#x2F;code&gt;, &lt;code&gt;{&lt;&#x2F;code&gt;, and so on) I&#x27;m much
faster now; partly because the key locations feel more intuitive, but mainly
because my fingers stay at their dedicated positions now.&lt;&#x2F;p&gt;
&lt;p&gt;Somehow the position of special characters feels right. I can now understand the
reason why Vim is using &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; for search or why the pipe symbol is &lt;code&gt;|&lt;&#x2F;code&gt;: both are
easy to reach! It all makes sense now!
(For a fun time, try that on a German keyboard!)&lt;&#x2F;p&gt;
&lt;p&gt;I now understand why Mircosoft chose &lt;code&gt;\&lt;&#x2F;code&gt; as a directory separator: it&#x27;s easily
accessible from a US keyboard. On the German layout, it&#x27;s… just… awful
(&lt;code&gt;Alt Gr&lt;&#x2F;code&gt;+&lt;code&gt;ß&lt;&#x2F;code&gt; on Windows, &lt;code&gt;Shift&lt;&#x2F;code&gt; + &lt;code&gt;Option&lt;&#x2F;code&gt; + &lt;code&gt;7&lt;&#x2F;code&gt; on Mac).&lt;&#x2F;p&gt;
&lt;p&gt;The opening curly brace on a German layout Mac is produced with &lt;code&gt;Alt&lt;&#x2F;code&gt;+&lt;code&gt;8&lt;&#x2F;code&gt;, which
always made me leave the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Touch_typing#Home_row&quot;&gt;home
row&lt;&#x2F;a&gt; and break my typing
flow. Now there are dedicated keys for parentheses. Such a relief!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;am-i-slower-when-writing-german-texts-now&quot;&gt;Am I slower when writing German texts now?&lt;&#x2F;h2&gt;
&lt;p&gt;In the beginning, I was.&lt;&#x2F;p&gt;
&lt;p&gt;Somehow my brain associated the German layout with German
texts. First, I used the macOS layout switcher.
This turned out to be cumbersome and take time.&lt;&#x2F;p&gt;
&lt;p&gt;Then I found the &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;hci.rwth-aachen.de&#x2F;usgermankeyboard&quot;&gt;US with Umlauts via Option Key
Layout&lt;&#x2F;a&gt;&amp;quot;. It works perfectly fine for
me. It allows me to use a single Keyboard layout but insert German umlauts at will
(e.g. ö is &lt;code&gt;Option&lt;&#x2F;code&gt;+&lt;code&gt;o&lt;&#x2F;code&gt;). There is probably a similar layout for other language combinations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-switching-between-keyboards-painful&quot;&gt;Is switching between keyboards painful?&lt;&#x2F;h2&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;KB_United_States.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;US keyboard layout&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        US keyboard layout
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:KB_United_States.svg&quot;&gt;Wikipedia&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;My built-in MacBook Pro keyboard layout is still German. I was afraid, that switching between
the internal German and the external English keyboard would confuse me. This
turned out not to be a problem. I rarely look at the print anyway.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;If you consider switching, just do it. I don&#x27;t look back at all.&lt;br &#x2F;&gt;
Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;m3t0r&quot;&gt;Simon Brüggen&lt;&#x2F;a&gt; for reviewing drafts of this article.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>fastcat - A Faster `cat` Implementation Using Splice</title>
            <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/fastcat/</link>
            <guid>https://endler.dev/2018/fastcat/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;fastcat.svg&quot; 
        loading=&quot;lazy&quot;
        &#x2F;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Lots of people asked me to write another piece about the internals of well-known
Unix commands. Well, actually, nobody asked me, but it makes for a good
intro. I&#x27;m sure you’ve read the previous parts about &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;yes&#x2F;&quot;&gt;&lt;code&gt;yes&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2018&#x2F;ls&#x2F;&quot;&gt;&lt;code&gt;ls&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; — they are epic.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, today we talk about &lt;code&gt;cat&lt;&#x2F;code&gt;, which is used to concatenate files - or, more
commonly, abused to print a file&#x27;s contents to the screen.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Concatenate files, the intended purpose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; input1.txt input2.txt input3.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; output.txt

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Print file to screen, the most common use case
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cat myfile
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;implementing-cat&quot;&gt;Implementing cat&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a naive &lt;code&gt;cat&lt;&#x2F;code&gt; in Ruby:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env ruby

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foreach(arg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; line
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  end
end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;

cat(ARGV)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This program goes through each file and prints its contents line by line.
Easy peasy! But wait, how fast is this tool?&lt;&#x2F;p&gt;
&lt;p&gt;I quickly created a random 2 GB file for the benchmark.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s compare the speed of our naive implementation with the system one
using the awesome &lt;a href=&quot;https:&#x2F;&#x2F;www.ivarch.com&#x2F;programs&#x2F;pv.shtml&quot;&gt;pv&lt;&#x2F;a&gt; (Pipe Viewer) tool.
All tests are averaged over five runs on a warm cache (file in memory).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;# Ruby 2.5.1
&amp;gt; .&#x2F;rubycat myfile | pv -r &amp;gt; &#x2F;dev&#x2F;null
[196MiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not bad, I guess? How does it compare with my system&#x27;s cat?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cat myfile | pv -r &amp;gt; &#x2F;dev&#x2F;null
[1.90GiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uh oh, &lt;a href=&quot;https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;gitweb&#x2F;?p=coreutils.git;a=blob;f=src&#x2F;cat.c;h=3c319511c767f65d2e420b3bff8fa6197ddbb37b;hb=HEAD&quot;&gt;GNU cat&lt;&#x2F;a&gt; is &lt;strong&gt;ten times faster&lt;&#x2F;strong&gt; than our little Ruby cat. 🐌&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-our-ruby-cat-a-little-faster&quot;&gt;Making our Ruby cat a little faster&lt;&#x2F;h2&gt;
&lt;p&gt;Our naive Ruby code can be tweaked a bit.
Turns out line buffering hurts performance in the end&lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env ruby

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;copy_stream(arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;STDOUT)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;

cat(ARGV)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rubycat myfile | pv -r &amp;gt; &#x2F;dev&#x2F;null
[1.81GiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wow... we didn&#x27;t really try hard, and we&#x27;re already approaching the speed of a
tool that gets optimized &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cat_(Unix)&quot;&gt;since
1971&lt;&#x2F;a&gt;. 🎉&lt;&#x2F;p&gt;
&lt;p&gt;But before we celebrate too much, let&#x27;s see if we can go even faster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;splice&quot;&gt;Splice&lt;&#x2F;h2&gt;
&lt;p&gt;What initially motivated me to write about &lt;code&gt;cat&lt;&#x2F;code&gt; was &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=15455897&quot;&gt;this comment by user
wahern on
HackerNews&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;m surprised that neither GNU yes nor GNU cat uses splice(2).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Could this &lt;em&gt;splice&lt;&#x2F;em&gt; thing make printing files even faster? — I was intrigued.&lt;&#x2F;p&gt;
&lt;p&gt;Splice was first introduced to the Linux Kernel in 2006, and there is a nice
&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20130305002825&#x2F;https:&#x2F;&#x2F;kerneltrap.org&#x2F;node&#x2F;6505&quot;&gt;summary from Linus Torvalds himself&lt;&#x2F;a&gt;,
but I prefer the description from the &lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;2&#x2F;splice&quot;&gt;manpage&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;splice()&lt;&#x2F;strong&gt; moves data between two file descriptors without copying
between kernel address space and user address space. It transfers up
to len bytes of data from the file descriptor fd_in to the file
descriptor fd_out, where one of the file descriptors must refer to a
pipe.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you really want to dig deeper, here&#x27;s the corresponding &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;torvalds&#x2F;linux&#x2F;blob&#x2F;6ed0529fef09f50ef41d396cb55c5519e4936b16&#x2F;fs&#x2F;splice.c&quot;&gt;source code from the
Linux Kernel&lt;&#x2F;a&gt;,
but we don&#x27;t need to know all the nitty-gritty details for now.
Instead, we can just inspect the header from the C implementation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;lt;fcntl.h&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;ssize_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;splice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;fd_in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; loff_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;off_in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;fd_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                loff_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;off_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;size_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsigned int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To break it down even more, here&#x27;s how we would copy the entire &lt;code&gt;src&lt;&#x2F;code&gt; file to &lt;code&gt;dst&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;ssize_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;splice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The cool thing about this is that all of it happens inside the Linux kernel, which means we won&#x27;t copy a single byte to userspace (where our program runs).
Ideally, splice works by remapping pages and does not actually copy
any data, which may improve I&#x2F;O performance
(&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Splice_(system_call)&quot;&gt;reference&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;buffers.png&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;File icon by Aleksandr Vector from the Noun Project. Terminal icon by useiconic.com from the Noun Project.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        File icon by Aleksandr Vector from the Noun Project. Terminal icon by useiconic.com from the Noun Project.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;using-splice-from-rust&quot;&gt;Using splice from Rust&lt;&#x2F;h2&gt;
&lt;p&gt;I have to say I&#x27;m not a C programmer and I prefer Rust because it offers a safer
interface. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-rust&#x2F;nix&#x2F;blob&#x2F;ebf75050f2f2726808308f76253f27c97aa6db15&#x2F;src&#x2F;fcntl.rs#L320-L329&quot;&gt;Here&#x27;s the same thing in Rust&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(target_os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;linux&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; target_os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;android&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;splice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;fd_in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; RawFd,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;off_in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;libc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;loff_t&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;fd_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; RawFd,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;off_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;libc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;loff_t&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; SpliceFFlags,
) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I didn&#x27;t implement the Linux bindings myself. Instead, I just used a library called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-rust&#x2F;nix&quot;&gt;nix&lt;&#x2F;a&gt;, which provides Rust friendly bindings to *nix APIs.&lt;&#x2F;p&gt;
&lt;p&gt;There is one caveat, though:
We cannot really copy the file directly to standard out, because splice
requires one file descriptor to be a pipe.
The way around that is to create a pipe, which consists of a reader and a
writer (&lt;code&gt;rd&lt;&#x2F;code&gt; and &lt;code&gt;wr&lt;&#x2F;code&gt;).
We pipe the file into the writer, and then we read from the pipe and push the data to stdout.&lt;&#x2F;p&gt;
&lt;p&gt;You can see that I use a relatively big buffer of 16384 bytes (2&lt;sup&gt;14&lt;&#x2F;sup&gt;) to improve performance.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; nix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;unix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;AsRawFd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;nix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fcntl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{splice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; SpliceFFlags}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;nix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;unistd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUF_SIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16384&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;args()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;open(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;path)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;fcat: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;: No such file or directory&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; path))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(rd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; wr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stdout()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; _handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;splice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
                input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_raw_fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                wr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUF_SIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;SpliceFFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;empty()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; We read 0 bytes from the input,
                &#x2F;&#x2F; which means we&amp;#39;re done copying.
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; _res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;splice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
                rd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_raw_fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUF_SIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;SpliceFFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;empty()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, how fast is this?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fcat myfile | pv -r &amp;gt; &#x2F;dev&#x2F;null
[5.90GiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Holy guacamole. That&#x27;s &lt;strong&gt;over three times as fast as system cat&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;operating-system-support&quot;&gt;Operating System support&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;&#x2F;strong&gt; and &lt;strong&gt;Android&lt;&#x2F;strong&gt; are fully supported.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;12230316&#x2F;do-other-operating-systems-implement-the-linux-system-call-splice?lq=1&quot;&gt;OpenBSD&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
also has some sort of splice implementation called
&lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;sosplice&quot;&gt;&lt;code&gt;sosplice&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. I haven&#x27;t tested that, though.&lt;&#x2F;li&gt;
&lt;li&gt;On &lt;strong&gt;macOS&lt;&#x2F;strong&gt;, the closest thing to splice is its bigger brother,
&lt;a href=&quot;https:&#x2F;&#x2F;www.unix.com&#x2F;man-page&#x2F;osx&#x2F;2&#x2F;sendfile&#x2F;&quot;&gt;sendfile&lt;&#x2F;a&gt;, which can send a
file to a socket within the Kernel. Unfortunately, it does not support sending
from file to file.&lt;sup&gt;&lt;a href=&quot;#fn2&quot; id=&quot;ref2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; There&#x27;s also
&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20180401103335&#x2F;https:&#x2F;&#x2F;developer.apple.com&#x2F;legacy&#x2F;library&#x2F;documentation&#x2F;Darwin&#x2F;Reference&#x2F;ManPages&#x2F;man3&#x2F;copyfile.3.html&quot;&gt;&lt;code&gt;copyfile&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
which has a similar interface, but unfortunately, it is not zero-copy. (I
thought so in the beginning, but &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;libc&#x2F;pull&#x2F;886&quot;&gt;I was
wrong&lt;&#x2F;a&gt;.)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;&#x2F;strong&gt; doesn&#x27;t provide zero-copy file-to-file transfer
(only file-to-socket transfer using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;mswsock&#x2F;nf-mswsock-transmitfile&quot;&gt;TransmitFile API&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Nevertheless, in a production-grade
implementation, the splice support could be activated on systems that support
it, while using a generic implementation as a fallback.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nice-but-why-on-earth-would-i-want-that&quot;&gt;Nice, but why on earth would I want that?&lt;&#x2F;h2&gt;
&lt;p&gt;I have no idea. Probably you don&#x27;t, because your bottleneck is somewhere else.
That said, many people use &lt;code&gt;cat&lt;&#x2F;code&gt; for piping data into another process like&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Count all lines in C files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;wc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -l
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; kittens.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;dog&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case, if you notice that &lt;code&gt;cat&lt;&#x2F;code&gt; is the bottleneck try &lt;code&gt;fcat&lt;&#x2F;code&gt; (but first,
&lt;a href=&quot;http:&#x2F;&#x2F;porkmail.org&#x2F;era&#x2F;unix&#x2F;award.html&quot;&gt;try to avoid &lt;code&gt;cat&lt;&#x2F;code&gt; altogether&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;With some more work, &lt;code&gt;fcat&lt;&#x2F;code&gt; could also be used to directly route packets from one
network card to another, &lt;a href=&quot;https:&#x2F;&#x2F;nc110.sourceforge.io&#x2F;&quot;&gt;similar to netcat&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;The closer we get to bare metal, the more our hard-won abstractions fall
apart, and we are back to low-level systems programming.&lt;&#x2F;li&gt;
&lt;li&gt;Apart from a fast cat, there&#x27;s also a use-case for a slow cat: old computers.
For that purpose, there&#x27;s... well.. &lt;a href=&quot;https:&#x2F;&#x2F;grox.net&#x2F;software&#x2F;mine&#x2F;slowcat&#x2F;&quot;&gt;slowcat&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That said, I still have no idea why GNU cat does not use splice on Linux. 🤔
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;fcat&quot;&gt;source code for fcat is on Github&lt;&#x2F;a&gt;.
Contributions welcome!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Thanks&lt;&#x2F;strong&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hwmrocker&quot;&gt;Olaf Gladis&lt;&#x2F;a&gt; for helping me run the benchmarks on his Linux machine and to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SHyx0rmZ&quot;&gt;Patrick Pokatilo&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;m3t0r&quot;&gt;Simon Brüggen&lt;&#x2F;a&gt; for reviewing drafts of this article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;sup id=&quot;fn1&quot;&gt;1. Thanks to reader &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;93fbrj&#x2F;fascat_a_faster_cat_implementation_using_splice&#x2F;e3d2chn&#x2F;&quot;&gt;Freeky&lt;&#x2F;a&gt; for making this code more idiomatic.&lt;a href=&quot;#ref1&quot; title=&quot;Jump back to footnote 1 in the text.&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;br &#x2F;&gt;
&lt;sup id=&quot;fn2&quot;&gt;2. Thanks to reader &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;93fbrj&#x2F;fascat_a_faster_cat_implementation_using_splice&#x2F;e3cu3rk&#x2F;&quot;&gt;masklinn&lt;&#x2F;a&gt; for the hint.&lt;a href=&quot;#ref2&quot; title=&quot;Jump back to footnote 2 in the text.&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>That Octocat on the Wall</title>
            <pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/github/</link>
            <guid>https://endler.dev/2018/github/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;octocat.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Photo of my office with Github&#x27;s octocat on the wall over my couch&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Photo of my office with Github&#x27;s octocat on the wall over my couch
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;So I&#x27;m in a bit of a sentimental mood lately.
Github got acquired by Microsoft.
While I think the acquisition was well-deserved, I still wish it didn&#x27;t happen.
Let me explain.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-early-days&quot;&gt;My early days&lt;&#x2F;h2&gt;
&lt;p&gt;I joined Github on 3rd of January 2010.
Since I was a bit late to the game, my usual handle (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;&quot;&gt;mre&lt;&#x2F;a&gt;) was already taken.
So I naively sent a mail to Github, asking if I could bag the name as it seemed to be abandoned.
To my surprise, I got an answer.
The response came from a guy named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;defunkt&quot;&gt;Chris Wanstrath&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All he wrote was &amp;quot;it&#x27;s yours.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;That was the moment I fell in love with Github.
I felt encouraged to collaborate on projects, that everybody could contribute something valuable.
Only later I found out that Chris was one of the founders and the CEO of the company.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;living-on-github&quot;&gt;Living on Github&lt;&#x2F;h2&gt;
&lt;p&gt;Before Github, there was &lt;a href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;&quot;&gt;SourceForge&lt;&#x2F;a&gt;, and I only went there to download binaries.
Github showed me, that there was an entire community of like-minded people
out there, who ❤️ to work on code in their free-time.
To me, Github is much more than a git interface; it&#x27;s a social network.
While other people browse Facebook or Instagram, I browse Github.&lt;&#x2F;p&gt;
&lt;p&gt;I can still vividly remember getting my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;Creamy&#x2F;stargazers&quot;&gt;first star&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;Creamy&#x2F;issues&#x2F;1&quot;&gt;my first issue on one of my projects&lt;&#x2F;a&gt; coming from a real (!) person other than myself.&lt;&#x2F;p&gt;
&lt;p&gt;After so many years, a pull-request still feels like the most personal gift anyone could give to me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;github-the-culture&quot;&gt;Github - the culture&lt;&#x2F;h2&gt;
&lt;p&gt;After a while, I started to admire some Github employees deeply:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zachholman.com&#x2F;&quot;&gt;Zach Holman&lt;&#x2F;a&gt; (who is about my age) is a great &lt;a href=&quot;https:&#x2F;&#x2F;zachholman.com&#x2F;talk&#x2F;utc-is-enough-for-everyone-right&quot;&gt;writer&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YVb2GsJHejo&quot;&gt;speaker&lt;&#x2F;a&gt;, and one of the most &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;holman&#x2F;spark&quot;&gt;creative developers&lt;&#x2F;a&gt; I can think of.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scottchacon.com&#x2F;about.html&quot;&gt;Scott Chacon&lt;&#x2F;a&gt;, who &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;de&#x2F;v2&quot;&gt;taught me a lot about git&lt;&#x2F;a&gt; and whose presentation tool, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;puppetlabs&#x2F;showoff&quot;&gt;showoff&lt;&#x2F;a&gt;, I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;Talks&#x2F;tree&#x2F;master&#x2F;cuda&#x2F;Presentation&quot;&gt;used at University&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mojombo&quot;&gt;Tom Preston-Werner&lt;&#x2F;a&gt;, who I admire for refusing an offer from Microsoft to pursue his dream and build Github, for establishing a &lt;a href=&quot;https:&#x2F;&#x2F;www.wired.com&#x2F;2013&#x2F;09&#x2F;github-office&#x2F;&quot;&gt;super-nerdy company culture&lt;&#x2F;a&gt;, and for &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All three developers have since left the company.
I can&#x27;t help but notice that Github has changed.
The harassment accusations and letting Zach Holman go are only part of the story.&lt;&#x2F;p&gt;
&lt;p&gt;It has become a company like any other, maintaining a mature product.
It doesn&#x27;t &lt;em&gt;excite&lt;&#x2F;em&gt; me anymore.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-alternative-reality&quot;&gt;An alternative reality&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s still a bitter taste in my mouth when I think that Github has fallen prey to one of the tech giants. I loved Github while it was a small, friendly community of passionate developers.
Could this have been sustainable?&lt;&#x2F;p&gt;
&lt;p&gt;Maybe through paid features for project maintainers.&lt;&#x2F;p&gt;
&lt;p&gt;You see, if you do Open Source every day, it can be a lot of work.
People start depending on your projects, and you feel responsible for keeping the lights on.&lt;&#x2F;p&gt;
&lt;p&gt;To ease the burden, I&#x27;d love to have deeper insights into my project usage: visitor statistics for longer than two weeks,
a front page where you could filter and search for events, a better way to handle discussions
(&lt;a href=&quot;https:&#x2F;&#x2F;nikolas.github.io&#x2F;github-drama&#x2F;&quot;&gt;which can get out of hand quickly&lt;&#x2F;a&gt;), better &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;topics&#x2F;autodevops&#x2F;&quot;&gt;CI integration à la Gitlab&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;These features would be targeted at the top 10% of Github users, a group of 3 million people.
Would this be enough to pay the bills? Probably. Would it be enough to grow? Probably not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-what&quot;&gt;So what?&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t think the acquisition will kill the culture. Microsoft is a strong partner and &lt;a href=&quot;https:&#x2F;&#x2F;nat.github.io&#x2F;hello&#x2F;&quot;&gt;Nat Friedman&lt;&#x2F;a&gt; is one of us.
On the other side, I&#x27;m not as enthusiastic as I used to be.
There&#x27;s room for competitors now and I&#x27;m beginning to wonder what will be the next Github.
That said, I will keep the Octocat on my office wall, in the hope that the excitement comes back.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Ten Years of Vim</title>
            <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/ten-years-of-vim/</link>
            <guid>https://endler.dev/2018/ten-years-of-vim/</guid>
            <description>&lt;div class=&quot;vim&quot;&gt;
&lt;div class=&quot;cursor&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;When I opened Vim by accident for the first time, I thought it was broken. My
keystrokes changed the screen in unpredictable ways, and I wanted to undo things
and quit. Needless to say, it was an unpleasant experience. There was something
about it though, that kept me coming back and it became my main editor.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward ten years (!) and I still use Vim.
After all the Textmates and Atoms and PhpStorms I tried, I still find myself at home in Vim.
People keep asking me: Why is that?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-vim&quot;&gt;Why Vim?&lt;&#x2F;h2&gt;
&lt;p&gt;Before Vim, I had used many other editors like notepad or nano. They all behaved more or less as expected: you insert text, you move your cursor with the arrow keys or your mouse, and you save with &lt;code&gt;Control + S&lt;&#x2F;code&gt; or by using the menu bar. VI (and Vim, its spiritual successor) is different.&lt;&#x2F;p&gt;
&lt;p&gt;EVERYTHING in Vim is different, and that&#x27;s why it&#x27;s so highly effective. Let me explain.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-zen-of-vim&quot;&gt;The Zen of Vim&lt;&#x2F;h2&gt;
&lt;p&gt;The philosophy behind Vim takes a while to sink in:
While other editors focus on &lt;em&gt;writing&lt;&#x2F;em&gt; as the central part of working with text, Vim thinks it&#x27;s &lt;em&gt;editing&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You see, most of the time I don&#x27;t spend writing &lt;em&gt;new&lt;&#x2F;em&gt; text; instead, I edit &lt;em&gt;existing&lt;&#x2F;em&gt; text.&lt;br &#x2F;&gt;
I mold text, form it, turn it upside down.
Writing text is craftsmanship and hard work. You have to shape your thoughts with your cold, bare hands until they somewhat form a coherent whole.
This painful process is what Vim tries to make at least bearable. It helps you keep control.
It does that, by providing you sharp, effective tools to modify text.
The core of Vim is a language for editing text.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vim-the-language&quot;&gt;Vim, the language&lt;&#x2F;h2&gt;
&lt;p&gt;The Vim commands are not cryptic, you already know them.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To &lt;u&gt;u&lt;&#x2F;u&gt;ndo, type &lt;code&gt;u&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;To &lt;u&gt;f&lt;&#x2F;u&gt;ind the next &lt;u&gt;t&lt;&#x2F;u&gt;, type &lt;code&gt;ft&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;To &lt;u&gt;d&lt;&#x2F;u&gt;elete &lt;u&gt;a&lt;&#x2F;u&gt; &lt;u&gt;w&lt;&#x2F;u&gt;ord, type &lt;code&gt;daw&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;To &lt;u&gt;c&lt;&#x2F;u&gt;hange &lt;u&gt;a&lt;&#x2F;u&gt; &lt;u&gt;s&lt;&#x2F;u&gt;entence, type &lt;code&gt;cas&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More often than not, you can &lt;em&gt;guess&lt;&#x2F;em&gt; the correct command by thinking of an operation you want to execute and an object to execute it on.
Then just take the first character of every word. Try it!
If anything goes wrong, you can always hit &lt;code&gt;ESC&lt;&#x2F;code&gt; and type &lt;code&gt;u&lt;&#x2F;code&gt; for undo.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Operations&lt;&#x2F;strong&gt;: delete, find, change, back, insert, append,...&lt;br &#x2F;&gt;
&lt;strong&gt;Objects&lt;&#x2F;strong&gt;: word, sentence, parentheses, (html) tag,... (see &lt;code&gt;:help text-objects&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Inserting text is just another editing operation, which can be triggered with &lt;code&gt;i&lt;&#x2F;code&gt;.
That&#x27;s why, by default, you are in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Learning_the_vi_Editor&#x2F;Vim&#x2F;Modes&quot;&gt;normal mode&lt;&#x2F;a&gt; — also called command mode — where all those operations work.&lt;&#x2F;p&gt;
&lt;p&gt;Once you know this, Vim makes a lot more sense, and that&#x27;s when you start to be productive.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-my-workflow-changed-over-the-years&quot;&gt;How my workflow changed over the years&lt;&#x2F;h2&gt;
&lt;p&gt;When I was a beginner, I was very interested in how people with more Vim experience would use the editor.
Now that I&#x27;m a long-time user, here&#x27;s my answer: there&#x27;s no secret sauce.
I certainly feel less exhausted after editing text for a day, but 90% of the commands I use fit on a post-it note.&lt;&#x2F;p&gt;
&lt;p&gt;That said, throughout the years, my Vim habits changed.&lt;br &#x2F;&gt;
I went through several phases:&lt;&#x2F;p&gt;
&lt;p&gt;Year 1: I&#x27;m happy if I can insert text and quit again.&lt;br &#x2F;&gt;
Year 2: That&#x27;s cool, let&#x27;s learn more shortcuts.&lt;br &#x2F;&gt;
Year 3-5: Let&#x27;s add &lt;em&gt;all&lt;&#x2F;em&gt; the features!!!&lt;br &#x2F;&gt;
Year 6-10: My &lt;code&gt;.vimrc&lt;&#x2F;code&gt; is five lines long.&lt;&#x2F;p&gt;
&lt;p&gt;Year three is when I started to learn the Vim ecosystem for real.
I tried all sorts of flavors like &lt;a href=&quot;https:&#x2F;&#x2F;macvim-dev.github.io&#x2F;macvim&#x2F;&quot;&gt;MacVim&lt;&#x2F;a&gt; and distributions like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlhuda&#x2F;janus&quot;&gt;janus&lt;&#x2F;a&gt;.
For a while, I even maintained &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;dotVim&#x2F;blob&#x2F;master&#x2F;.vimrc&quot;&gt;my own Vim configuration
&lt;&#x2F;a&gt;, which was almost 400 lines long.&lt;&#x2F;p&gt;
&lt;p&gt;All of that certainly helped me learn what&#x27;s out there, but I&#x27;m not sure if I would recommend that to a Vim beginner.
After all, you don&#x27;t really &lt;em&gt;need&lt;&#x2F;em&gt; all of that. Start with a vanilla Vim editor which works just fine!&lt;&#x2F;p&gt;
&lt;p&gt;My current Vim setup is pretty minimalistic. I don&#x27;t use plugins anymore, mostly out of laziness and because built-in Vim commands or macros can replace them.&lt;&#x2F;p&gt;
&lt;p&gt;Here are three concrete examples of how my workflow changed over the years:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the beginning, I used a lot of &amp;quot;number powered movements&amp;quot;. That is, if you have a command like &lt;code&gt;b&lt;&#x2F;code&gt;, which goes back one word in the text, you can also say &lt;code&gt;5b&lt;&#x2F;code&gt; to go back five words. Nowadays I mostly use &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; to move to a matching word because it&#x27;s quicker.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I don&#x27;t use arrow keys to move around in text anymore but forced myself to use &lt;code&gt;h&lt;&#x2F;code&gt;, &lt;code&gt;j&lt;&#x2F;code&gt;, &lt;code&gt;k&lt;&#x2F;code&gt;, &lt;code&gt;l&lt;&#x2F;code&gt;. Many people say that this is faster. After trying this for a few years, I don&#x27;t think that is true (at least for me). I now just stick to it out of habit.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;On my main working machine I use Vim for quick text editing and Visual Studio Code plus the awesome &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;VSCodeVim&#x2F;Vim&quot;&gt;Vim plugin&lt;&#x2F;a&gt; for projects. This way, I get the best of both worlds.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;workflow-issues-i-still-struggle-with&quot;&gt;Workflow issues I still struggle with&lt;&#x2F;h2&gt;
&lt;p&gt;After all these years I&#x27;m still not a Vim master — far from it.
As every other Vim user will tell you, we&#x27;re all still learning.&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few things I wish I could do better:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Jumping around in longer texts&lt;&#x2F;strong&gt;: I know the basics, like searching (&lt;code&gt;&#x2F;&lt;&#x2F;code&gt;), jumping to a matching bracket (&lt;code&gt;%&lt;&#x2F;code&gt;) or jumping to specific lines (for line 10, type &lt;code&gt;10G&lt;&#x2F;code&gt;), but I still could use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Symbol_(programming)&quot;&gt;symbols&lt;&#x2F;a&gt; more often for navigation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Using visual mode for moving text around&lt;&#x2F;strong&gt;: Sometimes it can be quite complicated to type the right combination of letters to cut (delete) the text I want to move around. That&#x27;s where visual mode (&lt;code&gt;v&lt;&#x2F;code&gt;) shines. It highlights the selected text. I should use it more often.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Multiple registers for copy and paste&lt;&#x2F;strong&gt;: Right now I only use one register (like a pastebin) for copying text, but Vim supports multiple registers. That&#x27;s cool if you want to move around more than one thing at the same time. &lt;a href=&quot;https:&#x2F;&#x2F;vim.fandom.com&#x2F;wiki&#x2F;Copy%2c_cut_and_paste&quot;&gt;Let&#x27;s use more of those!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Tabs&lt;&#x2F;strong&gt;: I know &lt;a href=&quot;https:&#x2F;&#x2F;vim.fandom.com&#x2F;wiki&#x2F;Using_tab_pages&quot;&gt;how tabs work&lt;&#x2F;a&gt;, but all the typing feels clunky. That&#x27;s why I never extensively used them. Instead, I mostly use multiple terminal tabs or an IDE with Vim bindings for bigger projects.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;would-i-learn-vim-again&quot;&gt;Would I learn Vim again?&lt;&#x2F;h2&gt;
&lt;p&gt;That&#x27;s a tough question to answer.&lt;&#x2F;p&gt;
&lt;p&gt;On one side, I would say no.
There&#x27;s a steep learning curve in Vim and seeing all those modern IDEs become better at understanding the user&#x27;s intent, editing text became way easier and faster in general.&lt;&#x2F;p&gt;
&lt;p&gt;On the other side, Vim is the fastest way for me to write down my thoughts and code. As a bonus, it runs on every machine and might well be around in decades to come. In contrast, I don&#x27;t know if the IntelliJ shortcuts will be relevant in ten years (note: if you read this in the future and ask yourself &amp;quot;What is IntelliJ?&amp;quot;, the answer might be no).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;&#x2F;h2&gt;
&lt;p&gt;If I can give you one tip, don&#x27;t learn Vim by memorizing commands. Instead, look at your current workflow and try to make it better, then see how Vim can make that easier. It helps to look at &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;yG-UaBJXZ80?t=43m12s&quot;&gt;other people using Vim to get inspired&lt;&#x2F;a&gt; (Youtube link with sound).&lt;&#x2F;p&gt;
&lt;p&gt;You will spend a lot of time writing text, so it&#x27;s well worth the time investment to learn one editor really well — especially if you are a programmer.&lt;&#x2F;p&gt;
&lt;p&gt;After ten years, Vim is somehow ingrained in my mind. I &lt;em&gt;think&lt;&#x2F;em&gt; Vim when I&#x27;m editing text. It has become yet another natural language to me. I&#x27;m looking forward to the next ten years.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Refactoring Go Code to Avoid File I&#x2F;O in Unit Tests</title>
            <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/go-io-testing/</link>
            <guid>https://endler.dev/2018/go-io-testing/</guid>
            <description>&lt;p&gt;At work today, I refactored some simple Go code to make it more testable.
The idea was to avoid file handling in unit tests without mocking or using temporary files by separating data input&#x2F;output and data manipulation.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Tiny `ls` Clone Written in Rust</title>
            <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/ls/</link>
            <guid>https://endler.dev/2018/ls/</guid>
            <description>&lt;p&gt;In my series of &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;yes&#x2F;&quot;&gt;useless Unix tools rewritten in Rust&lt;&#x2F;a&gt;, today I&#x27;m going to be covering one of my all-time favorites: &lt;code&gt;ls&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First off, let me say that you probably don&#x27;t want to use this code as a replacement for &lt;code&gt;ls&lt;&#x2F;code&gt; on your local machine (although you could!).
As we will find out, &lt;code&gt;ls&lt;&#x2F;code&gt; is actually quite a powerful tool under the hood.
I&#x27;m not going to come up with a full rewrite, but instead only cover the very basic output that you would expect from calling &lt;code&gt;ls -l&lt;&#x2F;code&gt; on your command line.
What is this output? I&#x27;m glad you asked.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expected-output&quot;&gt;Expected output&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; ls -l
drwxr-xr-x 2 mendler  staff    13468 Feb  4 11:19 Top Secret
-rwxr--r-- 1 mendler  staff  6323935 Mar  8 21:56 Never Gonna Give You Up - Rick Astley.mp3
-rw-r--r-- 1 mendler  staff        0 Feb 18 23:55 Thoughts on Chess Boxing.doc
-rw-r--r-- 1 mendler  staff   380434 Dec 24 16:00 nobel-prize-speech.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Your output may vary, but generally, there are a couple of notable things going on. From left to right, we&#x27;ve got the following fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;drwx&lt;&#x2F;code&gt; things in the beginning are the &lt;em&gt;file permissions&lt;&#x2F;em&gt; (also called the file mode). If &lt;code&gt;d&lt;&#x2F;code&gt; is set, it&#x27;s a directory. &lt;code&gt;r&lt;&#x2F;code&gt; means read, &lt;code&gt;w&lt;&#x2F;code&gt; means write and &lt;code&gt;x&lt;&#x2F;code&gt; execute.
This &lt;code&gt;rwx&lt;&#x2F;code&gt; pattern gets repeated three times for the current user, the group, and other computer users respectively.&lt;&#x2F;li&gt;
&lt;li&gt;Next we got the hardlink count when referring to a file, or the number of contained directory entries when referring to a directory. (&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;a&#x2F;43047&quot;&gt;Reference&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Owner name&lt;&#x2F;li&gt;
&lt;li&gt;Group name&lt;&#x2F;li&gt;
&lt;li&gt;Number of bytes in the file&lt;&#x2F;li&gt;
&lt;li&gt;Date when the file was last modified&lt;&#x2F;li&gt;
&lt;li&gt;Finally, the path name&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For more in-depth information, I can recommend reading the manpage of &lt;code&gt;ls&lt;&#x2F;code&gt; from the &lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;ls&quot;&gt;GNU coreutils&lt;&#x2F;a&gt; used in most Linux distributions and the one from &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20170909164539&#x2F;https:&#x2F;&#x2F;developer.apple.com&#x2F;legacy&#x2F;library&#x2F;documentation&#x2F;Darwin&#x2F;Reference&#x2F;ManPages&#x2F;man1&#x2F;ls.1.html&quot;&gt;Darwin&lt;&#x2F;a&gt; (which powers MacOS).&lt;&#x2F;p&gt;
&lt;p&gt;Whew, that&#x27;s a lot of information for such a tiny tool.
But then again, it can&#x27;t be so hard to port that to Rust, right? Let&#x27;s get started!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-very-basic-ls-in-rust&quot;&gt;A very basic &lt;code&gt;ls&lt;&#x2F;code&gt; in Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the most bare-bones version of &lt;code&gt;ls&lt;&#x2F;code&gt;, which just prints all files in the current directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) {
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; e)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;exit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Path) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;Error&amp;gt;&amp;gt; {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;read_dir(dir)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; file_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry
						&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;file_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
						&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
						&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or_else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Invalid entry: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; f)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; file_name)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
	}
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(())
}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can copy that straight out of the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;fs&#x2F;fn.read_dir.html#examples&quot;&gt;documentation&lt;&#x2F;a&gt;.
When we run it, we get the expected output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; cargo run
Cargo.lock
Cargo.toml
src
target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It prints the files and exits. Simple enough.&lt;&#x2F;p&gt;
&lt;p&gt;We should stop for a moment and celebrate our success, knowing that we just wrote our first little Unix utility from scratch.
&lt;em&gt;Pro Tip&lt;&#x2F;em&gt;: You can install the binary with &lt;code&gt;cargo install&lt;&#x2F;code&gt; and call it like any other binary from now on.&lt;&#x2F;p&gt;
&lt;p&gt;But we have higher goals, so let&#x27;s continue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-parameter-to-specify-the-directory&quot;&gt;Adding a parameter to specify the directory&lt;&#x2F;h2&gt;
&lt;p&gt;Usually, if we type &lt;code&gt;ls mydir&lt;&#x2F;code&gt;, we expect to get the file listing of no other directory than &lt;code&gt;mydir&lt;&#x2F;code&gt;. We should add the same functionality to our version.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, we need to accept command line parameters.
One Rust crate that I love to use in this case is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;structopt&lt;&#x2F;a&gt;. It makes argument parsing very easy.&lt;&#x2F;p&gt;
&lt;p&gt;Add it to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;. (You need cargo-edit for the following command).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cargo add structopt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can import it and use it in our project:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; structopt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; use std::...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;structopt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;StructOpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(StructOpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Opt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; Output file
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;structopt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(from_os_str))]
	path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; PathBuf,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; opt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Opt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;from_args()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;path) {
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; e)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;exit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;PathBuf) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;Error&amp;gt;&amp;gt; {
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Same as before
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By adding the &lt;code&gt;Opt&lt;&#x2F;code&gt; struct, we can define the command line flags, input parameters, and the &lt;code&gt;help&lt;&#x2F;code&gt; output super easily.
There are tons of configuration options, so it&#x27;s worth checking out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;project homepage&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Also note, that we changed the type of the path variable from &lt;code&gt;Path&lt;&#x2F;code&gt; to &lt;code&gt;PathBuf&lt;&#x2F;code&gt;. The difference is, that &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;std&#x2F;path.rs.html#1107-1109&quot;&gt;&lt;code&gt;PathBuf&lt;&#x2F;code&gt; owns the inner path string&lt;&#x2F;a&gt;, while &lt;code&gt;Path&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;std&#x2F;path.rs.html#1629-1631&quot;&gt;simply provides a reference to it&lt;&#x2F;a&gt;. The relationship is similar to &lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reading-the-modification-time&quot;&gt;Reading the modification time&lt;&#x2F;h2&gt;
&lt;p&gt;Now let&#x27;s deal with the metadata.
First, we try to retrieve the modification time from the file.
A quick look at &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;fs&#x2F;struct.Metadata.html&quot;&gt;the documentation&lt;&#x2F;a&gt; shows us how to do it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; metadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;metadata(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(time) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;modified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; time)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output might not be what you expect: we receive a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;time&#x2F;struct.SystemTime.html&quot;&gt;&lt;code&gt;SystemTime&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; object, which represents the measurement of the system clock. E.g. &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=96e18ed541abe896f761d601cdf50561&amp;amp;version=stable&quot;&gt;this code&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;SystemTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;now())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Prints: SystemTime { tv_sec: 1520554933, tv_nsec: 610406401 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But the format that we would like to have is something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Mar  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;9 01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thankfully, there is a library called &lt;code&gt;chrono&lt;&#x2F;code&gt;, which can read this format and convert it into any human readable output we like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DateTime&amp;lt;Local&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;from(SystemTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;now())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;%_d %b %H:%M&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this prints&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;9 Mar 01:29
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Yeah, I know it&#x27;s getting late.)&lt;&#x2F;p&gt;
&lt;p&gt;Armed with that knowledge, we can now read our file modification time.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cargo add chrono
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;chrono&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{DateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Local}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;PathBuf) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;Error&amp;gt;&amp;gt; {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;read_dir(dir)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; file_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= ...

			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; metadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; modified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DateTime&amp;lt;Local&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;from(metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;modified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:&amp;gt;5} {} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
				size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
				modified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;%_d %b %H:%M&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
				file_name
			)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
	}
	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;{:&amp;gt;5}&lt;&#x2F;code&gt; might look weird. It&#x27;s a formatting directive provided by &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;fmt&#x2F;&quot;&gt;&lt;code&gt;std::fmt&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
It means &amp;quot;right align this field with a space padding of 5&amp;quot; - just like our bigger brother &lt;code&gt;ls -l&lt;&#x2F;code&gt; is doing it.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, we retrieved the size in bytes with &lt;code&gt;metadata.len()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unix-file-permissions-are-a-zoo&quot;&gt;Unix file permissions are a zoo&lt;&#x2F;h2&gt;
&lt;p&gt;Reading the file permissions is a bit more tricky.
While the &lt;code&gt;rwx&lt;&#x2F;code&gt; notation is very common in Unix derivatives such as *BSD or GNU&#x2F;Linux, many other operating systems ship their own permission management.
There are even &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File_system_permissions&quot;&gt;differences between the Unix derivatives&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Wikipedia lists a few extensions to the file permissions that you might encounter:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;+ (plus) suffix indicates an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Access_control_list&quot;&gt;access control list&lt;&#x2F;a&gt; that can control additional permissions.&lt;&#x2F;li&gt;
&lt;li&gt;. (dot) suffix indicates an &lt;a href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;6&#x2F;html&#x2F;security-enhanced_linux&#x2F;chap-security-enhanced_linux-selinux_contexts&quot;&gt;SELinux context&lt;&#x2F;a&gt; is present. Details may be listed with the command ls -Z.&lt;&#x2F;li&gt;
&lt;li&gt;@ suffix indicates &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Extended_file_attributes&quot;&gt;extended file attributes&lt;&#x2F;a&gt; are present.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That just goes to show, that there are a lot of important details to be considered when implementing this in real life.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-very-basic-file-mode&quot;&gt;Implementing very basic file mode&lt;&#x2F;h2&gt;
&lt;p&gt;For now, we just stick to the basics and assume we are on a platform that supports the &lt;code&gt;rwx&lt;&#x2F;code&gt; file mode.&lt;&#x2F;p&gt;
&lt;p&gt;Behind the &lt;code&gt;r&lt;&#x2F;code&gt;, the &lt;code&gt;w&lt;&#x2F;code&gt; and the &lt;code&gt;x&lt;&#x2F;code&gt; are in reality octal numbers. That&#x27;s easier for computers to work with and many hardcore users even prefer to type the numbers over the symbols.
The ruleset behind those octals is as follows. I took that from the &lt;code&gt;chmod&lt;&#x2F;code&gt; manpage.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;	Modes may be absolute or symbolic.
	An absolute mode is an octal number constructed
	from the sum of one or more of the following values

	 0400    Allow read by owner.
	 0200    Allow write by owner.
	 0100    For files, allow execution by owner.
	 0040    Allow read by group members.
	 0020    Allow write by group members.
	 0010    For files, allow execution by group members.
	 0004    Allow read by others.
	 0002    Allow write by others.
	 0001    For files, allow execution by others.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, to set the permissions for a file so that the owner can read, write and execute it and nobody else can do anything would be 700 (400 + 200 +100).&lt;&#x2F;p&gt;
&lt;p&gt;Granted, those numbers are the same since the 70s and are not going to change soon, but it&#x27;s still a bad idea to compare our file permissions directly with the values; if not for compatibility reasons, then for readability and to avoid magic numbers in our code.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, we use the &lt;code&gt;libc&lt;&#x2F;code&gt; crate, which provides constants for those magic numbers.
As mentioned above, these file permissions are Unix specific, so we need to import a Unix-only library named &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;os&#x2F;unix&#x2F;fs&#x2F;trait.PermissionsExt.html&quot;&gt;&lt;code&gt;std::os::unix::fs::PermissionsExt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for that.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; libc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Examples:
&#x2F;&#x2F; * `S_IRGRP` stands for &amp;quot;read permission for group&amp;quot;,
&#x2F;&#x2F; * `S_IXUSR` stands for &amp;quot;execution permission for user&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;libc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IRGRP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IROTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IRUSR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IWGRP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IWOTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IWUSR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IXGRP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IXOTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IXUSR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;unix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;PermissionsExt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now get the file permissions like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; metadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;permissions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;parse_permissions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;parse_permissions()&lt;&#x2F;code&gt; is a little helper function defined as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse_permissions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; String {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;triplet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IRUSR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IWUSR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IXUSR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; group &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;triplet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IRGRP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IWGRP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IXGRP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; other &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;triplet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IROTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IWOTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;S_IXOTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; other]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It takes the file mode as a &lt;code&gt;u16&lt;&#x2F;code&gt; (simply because the libc constants are &lt;code&gt;u16&lt;&#x2F;code&gt;)
and calls &lt;code&gt;triplet&lt;&#x2F;code&gt; on it.
For each flag &lt;code&gt;read&lt;&#x2F;code&gt;, &lt;code&gt;write&lt;&#x2F;code&gt;, and &lt;code&gt;execute&lt;&#x2F;code&gt;, it runs a binary &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; operation on &lt;code&gt;mode&lt;&#x2F;code&gt;.
The output is matched exhaustively against all possible permission patterns.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;triplet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; String {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; execute) {
		(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;---&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;r--&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;-w-&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;--x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;r-x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;rw-&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;-wx&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;rwx&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h2&gt;
&lt;p&gt;The final output looks like this. Close enough.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; cargo run
rw-r--r--     7  6 Mar 23:10 .gitignore
rw-r--r-- 15618  8 Mar 00:41 Cargo.lock
rw-r--r--   185  8 Mar 00:41 Cargo.toml
rwxr-xr-x   102  5 Mar 21:31 src
rwxr-xr-x   136  6 Mar 23:07 target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it! You can find the &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;mre&#x2F;91ebb841c34df69671bd117ead621a8b&quot;&gt;final version of our toy &lt;code&gt;ls&lt;&#x2F;code&gt; on Github&lt;&#x2F;a&gt;.
We are still far away from a full-fledged &lt;code&gt;ls&lt;&#x2F;code&gt; replacement, but at least we learned a thing or two about its internals.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re looking for a proper &lt;code&gt;ls&lt;&#x2F;code&gt; replacement written in Rust, go check out &lt;a href=&quot;https:&#x2F;&#x2F;the.exa.website&#x2F;&quot;&gt;&lt;code&gt;exa&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
If, instead, you want to read another blog post from the same series, check out &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;yes&#x2F;&quot;&gt;&lt;em&gt;A Little Story About the &lt;code&gt;yes&lt;&#x2F;code&gt; Unix Command&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Rust in 2018</title>
            <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/rust-2018/</link>
            <guid>https://endler.dev/2018/rust-2018/</guid>
            <description>&lt;p&gt;I wrote about the &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;future-of-rust&#x2F;&quot;&gt;future of Rust&lt;&#x2F;a&gt; before and it seems like nobody stops me from doing it again! Quite the contrary: this time the Rust core team even &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2018&#x2F;01&#x2F;03&#x2F;new-years-rust-a-call-for-community-blogposts.html&quot;&gt;asked for it&lt;&#x2F;a&gt;.
I&#x27;m a bit late to the party, but here are my 2 cents about the priorities for Rust in 2018.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Functional Programming for Mathematical Computing</title>
            <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2018/functional-mathematics/</link>
            <guid>https://endler.dev/2018/functional-mathematics/</guid>
            <description>&lt;p&gt;Programming languages help us describe general solutions for problems; the result just happens to be executable by machines. Every programming language comes with a different set of strengths and weaknesses, one reason being that its syntax and semantics heavily influence the range of problems which can easily be tackled with it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;&#x2F;strong&gt; &lt;em&gt;I think that functional programming is better suited for mathematical computations than the more common imperative approach.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-built-in-abstractions-for-mathematics&quot;&gt;Using built-in abstractions for Mathematics&lt;&#x2F;h2&gt;
&lt;p&gt;The ideas behind a language (the underlying programming paradigms) are distinctive for the community that builds around it. The developers create a unique ecosystem of ready-to-use libraries and frameworks around the language core. As a consequence, some languages are stronger in areas such as business applications (one could think of Cobol), others work great for systems programming (like C or Rust).&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to solving mathematical and numerical problems with computers, Fortran might come to mind. Although Fortran is a general-purpose language, it is mostly known for scientific computing. Of course, the language was created with that purpose in mind – hence the name, &lt;em&gt;Formula Translation&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One reason for its popularity in this area is that it offers some built-in domain-specific keywords to express mathematical concepts, while keeping an eye on performance. For instance, it has a dedicated datatype for complex numbers – &lt;code&gt;COMPLEX&lt;&#x2F;code&gt; – and a keyword named &lt;code&gt;DIMENSION&lt;&#x2F;code&gt; which is quite similar to the mathematical term and can be used to create arrays and vectors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;imperative-vs-functional-style&quot;&gt;Imperative vs functional style&lt;&#x2F;h2&gt;
&lt;p&gt;Built-in keywords can help expand the expressiveness of a language into a specific problem space, but this approach is severly limited. It’s not feasible to extend the language core &lt;em&gt;ad infinitum&lt;&#x2F;em&gt;; it would just be harder to maintain and take longer to learn. Therefore, most languages provide other ways of abstraction – like &lt;em&gt;functions&lt;&#x2F;em&gt;, &lt;em&gt;subroutines&lt;&#x2F;em&gt;, &lt;em&gt;classes&lt;&#x2F;em&gt; and &lt;em&gt;objects&lt;&#x2F;em&gt; – to split a routine into smaller, more manageable parts. These mechanisms might help to control the complexity of a program, but especially when dealing with mathematical problems, one has to be careful not to obfuscate the solution with boilerplate code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;specimen-i-factorial&quot;&gt;Specimen I - Factorial&lt;&#x2F;h3&gt;
&lt;p&gt;As an example, the stated problem might be to translate the following formula, which calculates the factorial of a positive number n, into program code:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;example_faculty.svg&quot; alt=&quot;The mathematical definition of a faculty: n! = 1 * 2 * 3 ... * n&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An implementation of the above formula using imperative style Java might look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public static long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fact&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; n) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Negative numbers not allowed
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; prod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i) {
        prod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; prod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is quite a long solution for such a short problem definition.
(Note that writing a version with an explicit loop from 1 to n was on purpose; a recursive function would be shorter, but uses a concept which was not introduced by the mathematical formula.)&lt;&#x2F;p&gt;
&lt;p&gt;Also, the program contains many language-specific keywords, such as &lt;code&gt;public&lt;&#x2F;code&gt;, &lt;code&gt;static&lt;&#x2F;code&gt;, and &lt;code&gt;System.err.println()&lt;&#x2F;code&gt;. On top of that, the programmer must explicitly provide all data types for the variables in use – a tiresome obligation.&lt;&#x2F;p&gt;
&lt;p&gt;All of this obfuscates the mathematical definition.&lt;&#x2F;p&gt;
&lt;p&gt;Compare this with the following version written in a functional language, like Haskell.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fact n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; product [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is an almost direct translation from the problem definition into code. It needs no explicit types, no temporary variables and no access modifiers (such as public).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;specimen-ii-dot-product&quot;&gt;Specimen II - Dot product&lt;&#x2F;h3&gt;
&lt;p&gt;One could argue that the above Haskell program owes its brevity to the fact, that the language provides just the right abstractions (namely the &lt;code&gt;product&lt;&#x2F;code&gt; keyword and the &lt;code&gt;[1..n]&lt;&#x2F;code&gt; range syntax) for that specific task.
Therfore let’s examine a simple function which is neither available in Haskell nor in Java: The dot product of two vectors. The mathematical definition is as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;example_vector_dot.svg&quot; alt=&quot;The mathematical definition of a vector dot product: a·b= aibi =a1b1+a2b2+···+anbn =abT&quot; &#x2F;&gt; &lt;&#x2F;p&gt;
&lt;p&gt;For vectors with three dimensions, it can be written as&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;example_vector_3d.svg&quot; alt=&quot;Vector dot product for three dimentsions: a·b = a1 * b1 + a2 * b2 + a3* b3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;First, a Haskell implementation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a a a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;=&amp;gt; Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;-&amp;gt; Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;-&amp;gt; Scalar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a1 a2 a3) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;`dot`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; b1 b2 b3) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a1*b1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a2*b2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; a3*b3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note, that the mathematical types can be defined in one line each. Further note, that we define the dot function in infix notation, that is, we place the first argument of dot in front of the function name and the second argument behind it. This way, the code looks more like its mathematical equivalent.
An example call of the above function would be &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Vector 1 2 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) ’dot’ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Vector 3 2 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which is short, precise and readable.&lt;&#x2F;p&gt;
&lt;p&gt;Now, a similar implementation in Java.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;doubleValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;doubleValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;doubleValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;doubleValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;doubleValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;doubleValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; args) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For a proper textual representation of Vectors, the toString() Method would also need to be overwritten. In Haskell, one can simply derive from the &lt;code&gt;Show&lt;&#x2F;code&gt; typeclass as shown in the code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-new-abstractions&quot;&gt;Creating new abstractions&lt;&#x2F;h2&gt;
&lt;p&gt;If functions and types are not sufficient to write straightforward programs, Haskell also offers simple constructs to create new operators and keywords which extend the language core itself. This makes domain-specific-languages feasible and enables the developer to work more directly on the actual problem instead of working around peculiarities of the programming language itself (such as memory management or array iteration). Haskell embraces this concept; Java has no such functionality.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m not trying to bash Java or worship Haskell here. Both languages have their place.
I merely picked Java, because lots of programmers can read it.&lt;&#x2F;p&gt;
&lt;p&gt;The comparison is more between a functional and an imperative approach for numerical and symbolical programming; and for that, I prefer a functional approach every day. It removes clutter and yields elegant solutions. It provides convenient methods to work on a high level of abstraction and speak in mathematical terms and still, these strengths are disregarded by many programmers.&lt;&#x2F;p&gt;
&lt;p&gt;Abraham H. Maslow’s observation in his 1966 book &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;1510050.The_Psychology_of_Science&quot;&gt;The Psychology of Science&lt;&#x2F;a&gt; seems fitting:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail.”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Rust for Rubyists</title>
            <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/rust-for-rubyists/</link>
            <guid>https://endler.dev/2017/rust-for-rubyists/</guid>
            <description>&lt;p&gt;Recently I came across a delightful article on idiomatic Ruby.
I&#x27;m not a good Ruby developer by any means, but I realized, that a lot of the patterns are also quite common in Rust.
What follows is a side-by-side comparison of idiomatic code in both languages.&lt;&#x2F;p&gt;
&lt;p&gt;The Ruby code samples are from the &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;the-renaissance-developer&#x2F;idiomatic-ruby-1b5fa1445098&quot;&gt;original article&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;map-and-higher-order-functions&quot;&gt;Map and Higher-Order Functions&lt;&#x2F;h2&gt;
&lt;p&gt;The first example is a pretty basic iteration over elements of a container using &lt;code&gt;map&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;LeandroTk&#x2F;64ca7d6f5279e08589e21d799544e878#file-map-rb&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;user_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;map { |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;The &lt;code&gt;map&lt;&#x2F;code&gt; concept is also pretty standard in Rust.
Compared to Ruby, we need to be a little more explicit here:
If &lt;code&gt;users&lt;&#x2F;code&gt; is a vector of &lt;code&gt;User&lt;&#x2F;code&gt; objects, we first need to create an iterator from it:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=5a61b7b44ff01fabbc07dba9409d9b97&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; user_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;You might say that&#x27;s quite verbose, but this additional abstraction allows us to express an important concept:
will the iterator take ownership of the vector, or will it not?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;iter()&lt;&#x2F;code&gt;, you get a &amp;quot;read-only view&amp;quot; into the vector. After the iteration, it will be unchanged.&lt;&#x2F;li&gt;
&lt;li&gt;With &lt;code&gt;into_iter()&lt;&#x2F;code&gt;, you take ownership over the vector. After the iteration, the vector will be gone.
In Rust terminology, it will have &lt;em&gt;moved&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Read some more about the &lt;a href=&quot;https:&#x2F;&#x2F;hermanradtke.com&#x2F;2015&#x2F;06&#x2F;22&#x2F;effectively-using-iterators-in-rust.html&quot;&gt;difference between &lt;code&gt;iter()&lt;&#x2F;code&gt; and &lt;code&gt;into_iter()&lt;&#x2F;code&gt; here&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The above Ruby code can be simplified like this:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;LeandroTk&#x2F;258652cbaea308ccfeddc5df5bb9f37b#file-each_vs_map_3-rb&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;user_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;In Ruby, higher-order functions (like &lt;code&gt;map&lt;&#x2F;code&gt;) take &lt;a href=&quot;https:&#x2F;&#x2F;awaxman11.github.io&#x2F;blog&#x2F;2013&#x2F;08&#x2F;05&#x2F;what-is-the-difference-between-a-block&#x2F;&quot;&gt;blocks or procs&lt;&#x2F;a&gt; as an argument and the language provides a convenient shortcut for method invocation — &lt;code&gt;&amp;amp;:id&lt;&#x2F;code&gt; is the same as &lt;code&gt;{|o| o.id()}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Something similar could be done in Rust:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=131027a481d4691821315ad308d26dc9&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;User| u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; user_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;This is probably not the most idiomatic way to do it, though. What you will see more often is the use of &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;first-edition&#x2F;ufcs.html&quot;&gt;Universal Function Call Syntax&lt;&#x2F;a&gt; in this case:&lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=51069ee76e5d534621ccd6633474b630&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; user_ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;In Rust, higher-order functions take &lt;strong&gt;functions&lt;&#x2F;strong&gt; as an argument. Therefore &lt;code&gt;users.iter().map(Users::id)&lt;&#x2F;code&gt; is more or less equivalent to &lt;code&gt;users.iter().map(|u| u.id())&lt;&#x2F;code&gt;.&lt;sup&gt;&lt;a href=&quot;#fn2&quot; id=&quot;ref2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Also, &lt;code&gt;map()&lt;&#x2F;code&gt; in Rust returns another iterator and not a collection.
If you want a collection, you would have to run &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#examples-23&quot;&gt;&lt;code&gt;collect()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; on that, as we&#x27;ll see later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iteration-with-each&quot;&gt;Iteration with Each&lt;&#x2F;h2&gt;
&lt;p&gt;Speaking of iteration, one pattern that I see a lot in Ruby code is this:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;mre&#x2F;f6552360a4c08f2c064da7f00d434d5c&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Ruby&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Rust&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Python&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Cobol&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;#{lang}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;!&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Since &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2017&#x2F;10&#x2F;12&#x2F;Rust-1.21.html&quot;&gt;Rust 1.21&lt;&#x2F;a&gt;, this is now also possible:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=549d38bc43549fd5444c731d2bc3a47b&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Ruby&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Rust&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Python&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Cobol&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{lang}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lang &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lang))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Although, more commonly one would write that as a normal for-loop in Rust:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=a7691b56b1dfd1fb19aa00a91b39589d&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lang &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Ruby&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Rust&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Python&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Cobol&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{lang}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lang &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lang)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;h2 id=&quot;select-and-filter&quot;&gt;Select and filter&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say you want to extract only even numbers from a collection in Ruby.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;LeandroTk&#x2F;f341051889e27c99ddd66c075e5ef6d0#file-map_vs_select_1-rb&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;even_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;map { |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;even? } &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# [ni, 2, nil, 4, nil]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;even_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; even_numbers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;compact &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# [2, 4]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;In this example, before calling &lt;code&gt;compact&lt;&#x2F;code&gt;, our &lt;code&gt;even_numbers&lt;&#x2F;code&gt; array had &lt;code&gt;nil&lt;&#x2F;code&gt; entries.
Well, in Rust there is no concept of &lt;code&gt;nil&lt;&#x2F;code&gt; or &lt;code&gt;Null&lt;&#x2F;code&gt;. You don&#x27;t need a &lt;code&gt;compact&lt;&#x2F;code&gt;.
Also, &lt;code&gt;map&lt;&#x2F;code&gt; doesn&#x27;t take predicates. You would use &lt;code&gt;filter&lt;&#x2F;code&gt; for that:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=494d6e3ff016c21931e3495b10c8f6ee&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; even_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;or, to make a vector out of the result&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=45c6dbd2d35316c73165c5571d66df9d&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Result: [2, 4]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; even_numbers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Some hints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m using the type hint &lt;code&gt;Vec&amp;lt;i64&amp;gt;&lt;&#x2F;code&gt; here because, without it, Rust does not know what collection I want to build when calling &lt;code&gt;collect&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vec!&lt;&#x2F;code&gt; is a macro for creating a vector.&lt;&#x2F;li&gt;
&lt;li&gt;Instead of &lt;code&gt;iter&lt;&#x2F;code&gt;, I use &lt;code&gt;into_iter&lt;&#x2F;code&gt;. This way, I take ownership of the elements in the vector. With &lt;code&gt;iter()&lt;&#x2F;code&gt; I would get a &lt;code&gt;Vec&amp;lt;&amp;amp;i64&amp;gt;&lt;&#x2F;code&gt; instead.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In Rust, there is no &lt;code&gt;even&lt;&#x2F;code&gt; method on numbers, but that doesn&#x27;t keep us from defining one!&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=c289c2a1cf8bd870cbd5cc2cd60ea791&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;even &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; even_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(even)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;In a real-world scenario, you would probably use a third-party package (crate) like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-num&#x2F;num&quot;&gt;&lt;code&gt;num&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for numerical mathematics:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=e4bbbf60b7b1cbbedfb363672731bf53&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; even_numbers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_even&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;In general, it&#x27;s quite common to use crates in Rust for functionality that is not in the standard lib.
Part of the reason why this is so well accepted is that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&quot;&gt;cargo&lt;&#x2F;a&gt; is such a rad package manager.
(Maybe because it was built by no other than &lt;a href=&quot;https:&#x2F;&#x2F;yehudakatz.com&#x2F;about&#x2F;&quot;&gt;Yehuda Katz&lt;&#x2F;a&gt; of Ruby fame. 😉)&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned before, Rust does not have &lt;code&gt;nil&lt;&#x2F;code&gt;. However, there is still the concept of operations that can fail.
The canonical type to express that is called &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;&quot;&gt;&lt;code&gt;Result&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say you want to convert a vector of strings to integers.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=1365d177503ee2d32c4aa594263ee4d4&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maybe_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;nah&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;nope&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;3&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; numbers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maybe_numbers
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;())
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;That looks nice, but maybe the output is a little unexpected. &lt;code&gt;numbers&lt;&#x2F;code&gt; will also contain the parsing errors:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=1365d177503ee2d32c4aa594263ee4d4&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(ParseIntError { kind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; InvalidDigit })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(ParseIntError { kind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; InvalidDigit })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Sometimes you&#x27;re just interested in the successful operations.
An easy way to filter out the errors is to use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.filter_map&quot;&gt;&lt;code&gt;filter_map&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=afdc823ec2e165ac0a03948fb323d305&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maybe_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;nah&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;nope&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;3&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; numbers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maybe_numbers
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;I changed two things here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of &lt;code&gt;map&lt;&#x2F;code&gt;, I&#x27;m now using &lt;code&gt;filter_map&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;parse&lt;&#x2F;code&gt; returns a &lt;code&gt;Result&lt;&#x2F;code&gt;, but &lt;code&gt;filter_map&lt;&#x2F;code&gt; expects an &lt;code&gt;Option&lt;&#x2F;code&gt;. We can convert a &lt;code&gt;Result&lt;&#x2F;code&gt; into an &lt;code&gt;Option&lt;&#x2F;code&gt; by calling &lt;code&gt;ok()&lt;&#x2F;code&gt; on it&lt;sup&gt;&lt;a href=&quot;#fn3&quot; id=&quot;ref3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The return value contains all successfully converted strings:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=afdc823ec2e165ac0a03948fb323d305&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;The &lt;code&gt;filter_map&lt;&#x2F;code&gt; is similar to the &lt;code&gt;select&lt;&#x2F;code&gt; method in Ruby:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;LeandroTk&#x2F;1ae24e0fece0207f814932b0ac6c4a5e#file-map_vs_select_2-rb&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;even? }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;h2 id=&quot;random-numbers&quot;&gt;Random numbers&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s how to get a random number from an array in Ruby:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=a66785b44094bacb78fa8dd822bfeab5&amp;version=stable&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sample
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;That&#x27;s quite nice and idiomatic!
Compare that to Rust:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=bed7fca31737bcbf4b9aed427cc22713&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; rng &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;thread_rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;For the code to work, you need the &lt;code&gt;rand&lt;&#x2F;code&gt; crate. Click on the snippet for a running example.&lt;&#x2F;p&gt;
&lt;p&gt;There are some differences to Ruby. Namely, we need to be more explicit about what random number generator
we want &lt;em&gt;exactly&lt;&#x2F;em&gt;. We decide for a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;rand&#x2F;0.6.1&#x2F;rand&#x2F;fn.thread_rng.html&quot;&gt;lazily-initialized thread-local random number generator, seeded by the system&lt;&#x2F;a&gt;.
In this case, I&#x27;m using a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;slice&#x2F;&quot;&gt;slice&lt;&#x2F;a&gt; instead of a vector. The main difference is that the slice has a fixed size while the vector does not.&lt;&#x2F;p&gt;
&lt;p&gt;Within the standard library, Rust doesn&#x27;t have a &lt;code&gt;sample&lt;&#x2F;code&gt; or &lt;code&gt;choose&lt;&#x2F;code&gt; method on the slice itself.
That&#x27;s a design decision: the core of the language is kept small to allow evolving the language in the future.&lt;&#x2F;p&gt;
&lt;p&gt;This doesn&#x27;t mean that you cannot have a nicer implementation today.
For instance, you could define a &lt;code&gt;Choose&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch10-00-generics.html&quot;&gt;trait&lt;&#x2F;a&gt; and implement it for &lt;code&gt;[T]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=a66785b44094bacb78fa8dd822bfeab5&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; rand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{thread_rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Rng}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Choose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;T&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;T&amp;gt; Choose&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;T&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; rng &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;thread_rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;This boilerplate could be put into a crate to make it reusable for others.
With that, we arrive at a solution that rivals Ruby&#x27;s elegance.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=a66785b44094bacb78fa8dd822bfeab5&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;h2 id=&quot;implicit-returns-and-expressions&quot;&gt;Implicit returns and expressions&lt;&#x2F;h2&gt;
&lt;p&gt;Ruby methods automatically return the result of the last statement.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;LeandroTk&#x2F;9ede60f0898979f8f74d2869ed014c0c#file-return_2-rb&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_user_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Same for Rust. Note the missing semicolon.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=c7130debb2f712269380bd04819069ff&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_user_ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[User]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; {
    users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;But in Rust, this is just the beginning, because &lt;em&gt;everything&lt;&#x2F;em&gt; is an expression.
The following block splits a string into characters, removes the &lt;code&gt;h&lt;&#x2F;code&gt;, and returns the result as a &lt;code&gt;HashSet&lt;&#x2F;code&gt;.
This &lt;code&gt;HashSet&lt;&#x2F;code&gt; will be assigned to &lt;code&gt;x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=9ad54a58d3e5f1c06e795b5f7dca451e&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Get unique chars of a word {&amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;}
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; unique &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; filter out the &amp;#39;h&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;    unique&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;h&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Same works for conditions:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=cec96176079e8812ff62ad84a432ac9d&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;absolutely!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;no seriously&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Since a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;1.2.0&#x2F;book&#x2F;match.html&quot;&gt;&lt;code&gt;match&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; statement is also an expression, you can assign the result to a variable, too!&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=a6b32fae6257787432cf607f5772693e&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Unit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    Meter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Yard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Angstroem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Lightyear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; length_in_meters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; unit {
    Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Meter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Yard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0.91&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Angstroem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0.0000000001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Lightyear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;9.461e+15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;h2 id=&quot;multiple-assignments&quot;&gt;Multiple Assignments&lt;&#x2F;h2&gt;
&lt;p&gt;In Ruby you can assign multiple values to variables in one step:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;LeandroTk&#x2F;998bed8f8c20e487a1b8a638dd7563a1#file-multiple_assignment_1-rb&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;values
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;

one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; three &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; values
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;In Rust, you can only decompose tuples into tuples, but not a vector into a tuple for example.
So this will work:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=11b02c318ec35456b8247c3161cb341b&amp;version=nightly&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; three) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;But this won&#x27;t:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=11b02c318ec35456b8247c3161cb341b&amp;version=nightly&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; three) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;    ^^^^^^^^^^^^^^^^^ expected array of 3 elements, found tuple
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Neither will this:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=11b02c318ec35456b8247c3161cb341b&amp;version=nightly&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; three) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a collection of type `(_, _, _)` cannot be built from an iterator over elements of type `&amp;amp;{integer}`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;But with nightly Rust, you can now do this:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=11b02c318ec35456b8247c3161cb341b&amp;version=nightly&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; three] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;On the other hand, there&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch18-03-pattern-syntax.html&quot;&gt;a lot more you can do with destructuring&lt;&#x2F;a&gt; apart from multiple assignments. You can write beautiful, ergonomic code using pattern syntax.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=969612861bc6028e3b98345e21a4289e&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;yes&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;no&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;To quote &lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch18-03-pattern-syntax.html&quot;&gt;The Book&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This prints &lt;code&gt;no&lt;&#x2F;code&gt; since the if condition applies to the whole pattern &lt;code&gt;4 | 5 | 6&lt;&#x2F;code&gt;, not only to the last value 6.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;string-interpolation&quot;&gt;String interpolation&lt;&#x2F;h2&gt;
&lt;p&gt;Ruby has &lt;a href=&quot;https:&#x2F;&#x2F;ruby-doc.org&#x2F;docs&#x2F;ruby-doc-bundle&#x2F;ProgrammingRuby&#x2F;book&#x2F;ref_m_kernel.html#Kernel.sprintf&quot;&gt;extensive string interpolation support&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;LeandroTk&#x2F;5125cab5e74d26460124c786ac5df534#file-interpolation-rb&quot;&gt;
&lt;div class=&quot;ruby lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;programming_language &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Ruby&amp;quot;
&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;#{programming_language}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; is a beautiful programming language&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;This can be translated like so:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=6920e723137e44c4befe3398721fafa1&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; programming_language &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Rust&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; is also a beautiful programming language&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; programming_language)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Named arguments are also possible, albeit much less common:&lt;&#x2F;p&gt;
&lt;a class=&quot;example&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?gist=6920e723137e44c4befe3398721fafa1&amp;version=stable&quot;&gt;
&lt;div class=&quot;rust lang-icon&quot;&gt;&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{language}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; is also a beautiful programming language&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; language&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Rust&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;a&gt;
&lt;p&gt;Rust&#x27;s &lt;code&gt;println!()&lt;&#x2F;code&gt; syntax is even more extensive than Ruby&#x27;s. &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;fmt&#x2F;&quot;&gt;Check the docs&lt;&#x2F;a&gt; if you&#x27;re curious about what else you can do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;that-s-it&quot;&gt;That’s it!&lt;&#x2F;h2&gt;
&lt;p&gt;Ruby comes with syntactic sugar for many common usage patterns, which allows for very elegant code.
Low-level programming and raw performance are no primary goals of the language.&lt;&#x2F;p&gt;
&lt;p&gt;If you do need that, Rust might be a good fit, because it provides fine-grained hardware control with comparable ergonomics.
If in doubt, Rust favors explicitness, though; it eschews magic.&lt;&#x2F;p&gt;
&lt;p&gt;Did I whet your appetite for idiomatic Rust? Have a look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;idiomatic-rust&quot;&gt;this Github project&lt;&#x2F;a&gt;. I&#x27;d be thankful for contributions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;sup id=&quot;fn1&quot;&gt;1. Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Argorak&quot;&gt;Florian Gilcher&lt;&#x2F;a&gt; for the hint.&lt;a href=&quot;#ref1&quot; title=&quot;Jump back to footnote 1 in the text.&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;br &#x2F;&gt;
&lt;sup id=&quot;fn2&quot;&gt;2. Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;user&#x2F;masklinn&quot;&gt;masklin&lt;&#x2F;a&gt; for pointing out multiple inaccuracies.&lt;a href=&quot;#ref2&quot; title=&quot;Jump back to footnote 2 in the text.&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;br &#x2F;&gt;
&lt;sup id=&quot;fn3&quot;&gt;3. In the first version, I sait that &lt;code&gt;ok()&lt;&#x2F;code&gt; would convert a &lt;code&gt;Result&lt;&#x2F;code&gt; into a &lt;code&gt;boolean&lt;&#x2F;code&gt;, which was wrong. Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=16003080&quot;&gt;isaacg&lt;&#x2F;a&gt; for the correction.&lt;a href=&quot;#ref3&quot; title=&quot;Jump back to footnote 3 in the text.&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Making Myself Obsolete</title>
            <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/obsolete/</link>
            <guid>https://endler.dev/2017/obsolete/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;dinosaur.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;The Stegosaurus had better days 150 million years ago.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        The Stegosaurus had better days 150 million years ago.
        &lt;br &#x2F;&gt;
        Paleontologists once thought it had a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stegosaurus#.22Second_brain.22&quot;&gt;brain in its butt&lt;&#x2F;a&gt;.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;In December 2015 I was looking for static analysis tools to integrate into &lt;a href=&quot;https:&#x2F;&#x2F;tech.trivago.com&#x2F;&quot;&gt;trivago&lt;&#x2F;a&gt;&#x27;s CI process.
The idea was to detect typical programming mistakes automatically.
That&#x27;s quite a common thing, and there are lots of helpful tools out there which fit the bill.&lt;&#x2F;p&gt;
&lt;p&gt;So I looked for a list of tools...&lt;&#x2F;p&gt;
&lt;p&gt;To my surprise, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_tools_for_static_code_analysis&quot;&gt;the only list I found was on Wikipedia&lt;&#x2F;a&gt; — and it was outdated.
There was no such project on Github, where most modern static analysis tools were hosted.&lt;&#x2F;p&gt;
&lt;p&gt;Without overthinking it, I opened up my editor and wrote down a few tools I found through my initial research. After that, I pushed the list to Github.&lt;&#x2F;p&gt;
&lt;p&gt;I called the project &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;analysis-tools-dev&#x2F;static-analysis&quot;&gt;Awesome Static Analysis&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward two years and the list has grown quite a bit.
So far, it has 75 contributors, 277 forks and received over 2000 stars. (Thanks for all the support!)
(Update May 2018: 91 contributors, 363 forks, over 3000 stars)&lt;&#x2F;p&gt;
&lt;p&gt;Around 1000 unique visitors find the list every week. Not much by any means, but I feel obliged to keep it up-to-date
because it has become an essential source of information for many people.&lt;&#x2F;p&gt;
&lt;p&gt;It now lists around 300 tools for static analysis. Everything from Ada to TypeScript is on there.
What I find particularly motivating is, that now the authors themselves create pull requests to add their tools!&lt;&#x2F;p&gt;
&lt;p&gt;There was one problem though: The list of pull requests got longer and longer, as I was busy doing other things.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;pull_requests.jpg&quot; alt=&quot;The list of Github Pull requests for awesome-static-analysis&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-contributors&quot;&gt;Adding contributors&lt;&#x2F;h2&gt;
&lt;p&gt;I always try to make team members out of regular contributors. My friend and colleague &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andygrunwald&quot;&gt;Andy Grunwald&lt;&#x2F;a&gt; as well as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;impredicative&quot;&gt;Ouroboros Chrysopoeia&lt;&#x2F;a&gt; are both valuable collaborators. They help me weed out new PRs whenever they find the time.&lt;&#x2F;p&gt;
&lt;p&gt;But let&#x27;s face it: checking the pull requests is a dull, manual task.
What needs to be checked for each new tool can be summarized like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Formatting rules are satisfied&lt;&#x2F;li&gt;
&lt;li&gt;Project URL is reachable&lt;&#x2F;li&gt;
&lt;li&gt;License annotation is correct&lt;&#x2F;li&gt;
&lt;li&gt;Tools of each section are alphabetically ordered&lt;&#x2F;li&gt;
&lt;li&gt;Description is not too long&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I guess it&#x27;s obvious what we should do with that checklist: automate it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-linter-for-linting-linters&quot;&gt;A linter for linting linters&lt;&#x2F;h2&gt;
&lt;p&gt;So why not write an analysis tool, which checks our list of analysis tools!
What sounds pretty meta, is actually pretty straightforward.&lt;&#x2F;p&gt;
&lt;p&gt;With every pull request, we trigger our bot, which checks the above rules and responds with a result.&lt;&#x2F;p&gt;
&lt;p&gt;The first step was to read the &lt;a href=&quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v3&#x2F;guides&#x2F;building-a-ci-server&#x2F;&quot;&gt;Github documentation about building a CI server&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Just for fun, I wanted to create the bot in &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;.
The two most popular Github clients for Rust were &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github-rs&#x2F;github-rs&quot;&gt;github-rs&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;softprops&#x2F;hubcaps&quot;&gt;hubcaps&lt;&#x2F;a&gt;.
Both looked pretty neat, but then I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;softprops&#x2F;afterparty&quot;&gt;afterparty&lt;&#x2F;a&gt;, a &amp;quot;Github webhook server&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The example looked fabulous:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; env_logger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; afterparty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; hyper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;afterparty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{Delivery&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Hub}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hyper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
    env_logger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;init()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;0.0.0.0:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4567&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; hub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    hub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;pull_request&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;delivery&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Delivery| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; delivery&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;payload {
            Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;PullRequest { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sender&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; TODO: My code here!
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;sender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sender&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;login&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; action)
            }
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; srvc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;http(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;addr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(hub)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;listening on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; addr)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    srvc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allowed me to focus on the actual analysis code,
which makes for a pretty boring read. It mechanically checks for the things mentioned above and could be written in any language.
If you want to have a look (or even contribute!), &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;awesome-static-analysis-ci&quot;&gt;check out the repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;talking-to-github&quot;&gt;Talking to Github&lt;&#x2F;h2&gt;
&lt;p&gt;After the analysis code was done, I had a bot, running locally, waiting for incoming pull requests.&lt;&#x2F;p&gt;
&lt;p&gt;But how could I talk to Github?&lt;br &#x2F;&gt;
I found out, that I should use the &lt;a href=&quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v3&#x2F;repos&#x2F;statuses&#x2F;&quot;&gt;Status API&lt;&#x2F;a&gt;
and send a &lt;code&gt;POST&lt;&#x2F;code&gt; request to &lt;code&gt;&#x2F;repos&#x2F;mre&#x2F;awesome-static-analysis&#x2F;statuses&#x2F;:sha&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
(&lt;code&gt;:sha&lt;&#x2F;code&gt; is the commit ID that points to the &lt;code&gt;HEAD&lt;&#x2F;code&gt; of the pull request):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &amp;quot;state&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The build succeeded!&amp;quot;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I could have used one of the existing Rust Github clients, but I decided to write a simple function to update the pull request status code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;set_status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Status, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;desc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;repo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sha&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;reqwest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Response&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;var(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;GITHUB_TOKEN&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;reqwest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; status))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;description&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; desc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Sending status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; params)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; status_url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&#x2F;statuses&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; repo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sha)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Status url: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; status_url)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(client
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
            reqwest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;?access_token=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                status_url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;params)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see that I pass in a Github token from the environment and then I send the &lt;code&gt;JSON&lt;&#x2F;code&gt; payload as a post request using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanmonstar&#x2F;reqwest&quot;&gt;reqwest&lt;&#x2F;a&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;That turned out to become a problem in the end: while afterparty was using version 0.9 of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&quot;&gt;hyper&lt;&#x2F;a&gt;, reqwest was using 0.11. Unfortunately, these two versions depend on a different build of the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;openssl-sys&quot;&gt;openssl-sys&lt;&#x2F;a&gt; bindings. That&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;886&quot;&gt;well-known problem&lt;&#x2F;a&gt; and the only way to fix it, is to resolve the conflict.&lt;&#x2F;p&gt;
&lt;p&gt;I was stuck for a while, but then I saw, that there was an open pull request to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;softprops&#x2F;afterparty&#x2F;pull&#x2F;26&quot;&gt;upgrade afterparty to hyper 0.10&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So inside my &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;, I locked the version of afterparty to the version of the pull request:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;afterparty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;git &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;ms705&#x2F;afterparty&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This fixed the build, and I could finally move on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h2&gt;
&lt;p&gt;I needed a place to host the bot.&lt;&#x2F;p&gt;
&lt;p&gt;Preferably for free, as it was a non-profit Open Source project.
Also, the provider would have to run binaries.&lt;&#x2F;p&gt;
&lt;p&gt;For quite some time, I was following a product named &lt;a href=&quot;https:&#x2F;&#x2F;zeit.co&#x2F;&quot;&gt;zeit&lt;&#x2F;a&gt;.
It runs any Docker container using an intuitive command line interface called &lt;code&gt;now&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I fell in love the first time I saw their demo on the site, so I wanted to give it a try.&lt;&#x2F;p&gt;
&lt;p&gt;So I added a &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;userguide&#x2F;eng-image&#x2F;multistage-build&#x2F;&quot;&gt;multi-stage Dockerfile&lt;&#x2F;a&gt; to my project:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; rust &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; . &#x2F;usr&#x2F;src&#x2F;app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&#x2F;usr&#x2F;src&#x2F;app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cargo build --release

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; debian:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;stretch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;apt update \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;    &amp;amp;&amp;amp; apt install -y libssl1.1 ca-certificates \
    &amp;amp;&amp;amp; apt clean -y \
    &amp;amp;&amp;amp; apt autoclean -y \
    &amp;amp;&amp;amp; apt autoremove -y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; --from=builder target&#x2F;release&#x2F;check .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;EXPOSE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;4567
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;ENTRYPOINT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&#x2F;check&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;--help&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first part would build a static binary, the second part would run it at container startup.
Well, that didn&#x27;t work, because &lt;code&gt;zeit&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeit&#x2F;now&#x2F;issues&#x2F;962&quot;&gt;does not support multi-stage builds yet&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The workaround was to split up the Dockerfile into two and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;awesome-static-analysis-ci&#x2F;blob&#x2F;master&#x2F;Makefile&quot;&gt;connect them both with a Makefile&lt;&#x2F;a&gt;. Makefiles are pretty powerful, &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;makefiles&#x2F;&quot;&gt;you know&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;With that, I had all the parts for deployment together.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;# Build Rust binary for Linux
docker run --rm -v $(CURDIR):&#x2F;usr&#x2F;src&#x2F;ci -w &#x2F;usr&#x2F;src&#x2F;ci rust cargo build --release

# Deploy Docker images built from the local Dockerfile
now deploy --force --public -e GITHUB_TOKEN=${GITHUB_TOKEN}

# Set domain name of new build to `check.now.sh`
# (The deployment URL was copied to the clipboard and is retrieved with pbpaste on macOS)
now alias `pbpaste` check.now.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the output of the deploy using &lt;code&gt;now&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; Deploying ~&#x2F;Code&#x2F;private&#x2F;awesome-static-analysis-ci&#x2F;deploy
&amp;gt; Ready! https:&#x2F;&#x2F;deploy-sjbiykfvtx.now.sh (copied to clipboard) [2s]
&amp;gt; Initializing…
&amp;gt; Initializing…
&amp;gt; Building
&amp;gt; ▲ docker build
Sending build context to Docker daemon 2.048 kBkB
&amp;gt; Step 1 : FROM mre0&#x2F;ci:latest
&amp;gt; latest: Pulling from mre0&#x2F;ci
&amp;gt; ...
&amp;gt; Digest: sha256:5ad07c12184755b84ca1b587e91b97c30f7d547e76628645a2c23dc1d9d3fd4b
&amp;gt; Status: Downloaded newer image for mre0&#x2F;ci:latest
&amp;gt;  ---&amp;gt; 8ee1b20de28b
&amp;gt; Successfully built 8ee1b20de28b
&amp;gt; ▲ Storing image
&amp;gt; ▲ Deploying image
&amp;gt; ▲ Container started
&amp;gt; listening on 0.0.0.0:4567
&amp;gt; Deployment complete!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last step was to add &lt;code&gt;check.now.sh&lt;&#x2F;code&gt; as a webhook inside the awesome-static-analysis &lt;a href=&quot;https:&#x2F;&#x2F;developer.github.com&#x2F;webhooks&#x2F;creating&#x2F;&quot;&gt;project settings&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, whenever a new pull request is coming in, you see that little bot getting active!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2017&#x2F;obsolete&#x2F;pull_request_success.jpg&quot; alt=&quot;A successful pull request, which was checked by the bot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;outcome-and-future-plans&quot;&gt;Outcome and future plans&lt;&#x2F;h2&gt;
&lt;p&gt;I am very pleased with my choice of tools: afterparty saved me from a lot of manual work, while zeit made deployment really easy.&lt;br &#x2F;&gt;
It feels like &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;lambda&#x2F;features&#x2F;&quot;&gt;Amazon Lambda&lt;&#x2F;a&gt; on steroids.&lt;&#x2F;p&gt;
&lt;p&gt;If you look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;awesome-static-analysis-ci&#x2F;blob&#x2F;master&#x2F;src&#x2F;main.rs&quot;&gt;code&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;awesome-static-analysis-ci&#x2F;commits&#x2F;master&quot;&gt;commits&lt;&#x2F;a&gt; for my bot, you can see all my little missteps, until I got everything just right. Turns out, parsing human-readable text is tedious.&lt;br &#x2F;&gt;
Therefore I was thinking about turning the list of analysis tools into a structured format like &lt;code&gt;YAML&lt;&#x2F;code&gt;. This would greatly simplify the parsing and have the added benefit of having a machine-readable list of tools that can be used for other projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-may-2018&quot;&gt;Update May 2018&lt;&#x2F;h2&gt;
&lt;p&gt;While attending the &lt;a href=&quot;https:&#x2F;&#x2F;www.wearedevelopers.com&#x2F;&quot;&gt;WeAreDevelopers conference in Vienna&lt;&#x2F;a&gt; (can recommend that), I moved the CI pipeline from &lt;a href=&quot;https:&#x2F;&#x2F;zeit.co&#x2F;&quot;&gt;zeit.co&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt;.
The reason was, that I wanted the linting code next to the project, which greatly simplified things.
First and foremost I don&#x27;t need the web request handling code anymore, because travis takes care of that.
If you like, you can compare the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;awesome-static-analysis-ci&#x2F;blob&#x2F;master&#x2F;src&#x2F;main.rs&quot;&gt;old&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;analysis-tools-dev&#x2F;static-analysis&#x2F;blob&#x2F;master&#x2F;ci&#x2F;src&#x2F;lib.rs&quot;&gt;new&lt;&#x2F;a&gt; version.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Modern Day Annoyances - Digital Clocks</title>
            <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/digitial-clocks/</link>
            <guid>https://endler.dev/2017/digitial-clocks/</guid>
            <description>&lt;p&gt;This morning I woke up to the beeping noise of our oven&#x27;s alarm clock.
The reason was that I tried to correct the oven&#x27;s local time the day before — and I pushed the wrong buttons.
As a result I didn&#x27;t set the correct time, instead, I set a cooking timer... and that&#x27;s what woke me up today.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Learn Some Rust During Hacktoberfest</title>
            <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/hacktoberfest/</link>
            <guid>https://endler.dev/2017/hacktoberfest/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;hacktoberfest.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Dirndl, Lederhose, Brezn, Beer, Rust&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Dirndl, Lederhose, Brezn, Beer, Rust
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;www.freepik.com&#x2F;free-vector&#x2F;food-items-oktoberfest-festival_911290.htm&quot;&gt;Designed by Freepik&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt; 
&lt;p&gt;October is the perfect time to contribute to Open Source — at least according to Github and DigitalOcean.
Because that&#x27;s when they organize Hacktoberfest, a global event where you &lt;strong&gt;get a free shirt and lots of street cred&lt;&#x2F;strong&gt; for creating pull requests. Read the official announcement &lt;a href=&quot;https:&#x2F;&#x2F;hacktoberfest.digitalocean.com&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some people think they cannot contribute anything of value. Either because they lack the programming skills or because they don&#x27;t know where to start.&lt;&#x2F;p&gt;
&lt;p&gt;This guide is trying to change that!&lt;&#x2F;p&gt;
&lt;p&gt;Let me show you, how &lt;em&gt;everybody&lt;&#x2F;em&gt; can contribute code to &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;, a safe systems programming language.
I was inspired to write this by a &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;llogiq&#x2F;status&#x2F;915288482314178560&quot;&gt;tweet from llogiq&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-find-a-great-rust-project-to-work-on&quot;&gt;1. Find a great Rust project to work on&lt;&#x2F;h2&gt;
&lt;p&gt;We all want our work to be appreciated.&lt;br &#x2F;&gt;
Therefore I suggest to start contributing to medium-sized projects, because they gained some momentum but are still driven by a small number of maintainers, so help is always welcome. By contrast, tiny projects are mostly useful to the original author only, while large projects can be intimidating at first and have stricter guidelines.&lt;&#x2F;p&gt;
&lt;p&gt;For now, let&#x27;s look at repositories with 5-100 stars, which were updated within this year.
Github supports &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;understanding-the-search-syntax&quot;&gt;advanced search options based on Lucene syntax&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;language:Rust stars:5..100 pushed:&amp;gt;2017-01-01
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;search?q=language%3ARust+stars%3A5..100+pushed%3A%3E2017-01-01&quot;&gt;Here&lt;&#x2F;a&gt;&#x27;s a list of projects, which match this filter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-install-the-rust-toolchain&quot;&gt;2. Install the Rust toolchain&lt;&#x2F;h2&gt;
&lt;p&gt;To start contributing, we need a working Rust compiler and the cargo package manager.
Fortunately, the installation should be straightforward.
I recommend &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt; for that.&lt;&#x2F;p&gt;
&lt;p&gt;Run the following command in your terminal, then follow the onscreen instructions.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;curl https:&#x2F;&#x2F;sh.rustup.rs -sSf | sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you&#x27;re unsure, just accept the defaults.
After the installation is done, we also need to get the nightly version of the compiler for later.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rustup install nightly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Questions so far? Find more detailed installation instructions &lt;a href=&quot;https:&#x2F;&#x2F;asquera.de&#x2F;blog&#x2F;2017-03-03&#x2F;setting-up-a-rust-devenv&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-fork-the-project-and-clone-it-to-your-computer&quot;&gt;3. Fork the project and clone it to your computer&lt;&#x2F;h2&gt;
&lt;p&gt;First, click on the little &lt;em&gt;fork&lt;&#x2F;em&gt; button on the top right of the Github project page. Then clone your fork to your computer. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;git clone git@github.com:yourusername&#x2F;project.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more detailed instructions, go &lt;a href=&quot;https:&#x2F;&#x2F;guides.github.com&#x2F;activities&#x2F;forking&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-does-it-build&quot;&gt;4. Does it build?&lt;&#x2F;h2&gt;
&lt;p&gt;Before we start modifying the codebase, we should make sure that it is in a workable state.
The following commands should work right away from inside the project folder.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cargo build
cargo test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If not, you might want to consult the &lt;code&gt;README&lt;&#x2F;code&gt; for further instructions. (But feel free to choose another project.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-the-magic-sauce&quot;&gt;5. The magic sauce&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s the trick: we use a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lint_(software)&quot;&gt;linter&lt;&#x2F;a&gt; called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;clippy&lt;&#x2F;a&gt; to show us improvement areas in any Rust codebase.&lt;&#x2F;p&gt;
&lt;p&gt;To get clippy, install it like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cargo +nightly install clippy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Afterwards, run it from the project root as often as you like.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rustup run nightly cargo clippy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should give you actionable information on how to improve the codebase.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s some sample output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;warning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; useless &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; of `format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;`
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;mach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;420&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;49
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;420 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Malformed(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bytes size is smaller than an Mach-o header&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|
    =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; note&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(useless_format)] on by default
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; help&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; further information visit https&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;rust-clippy&#x2F;v0.0.165&#x2F;index.html#useless_format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
warning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; this expression borrows a reference that is immediately dereferenced by the compiler
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;mach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;423&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;36
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;423 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; magic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;mach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;peek(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|                                    ^^^^^^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; change this to: `bytes`
    |
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; help&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; further information visit https&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;rust-clippy&#x2F;v0.0.165&#x2F;index.html#needless_borrow
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just try some of the suggestions and see if the project still compiles and the tests still pass.
Check out the links to the documentation in the help section to learn more.
Start small to make your changes easier to review.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-creating-a-pull-request&quot;&gt;6. Creating a Pull Request&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re happy with your changes, now is the time to publish them!
It&#x27;s best to create a new branch for your changes and then push it to your fork.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;git checkout -b codestyle
git commit -am &amp;quot;Minor codestyle fixes&amp;quot;
git push --set-upstream origin codestyle
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Afterwards, go to the homepage of your fork on Github.
There should be a button titled &lt;em&gt;Compare &amp;amp; pull request&lt;&#x2F;em&gt;.
Please add a meaningful description and then submit the pull request.&lt;&#x2F;p&gt;
&lt;p&gt;Congratulations! You&#x27;ve contributed to the Rust ecosystem. Thank you! 🎉&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trophy-case&quot;&gt;Trophy case&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;m4b&#x2F;goblin&#x2F;pull&#x2F;55&quot;&gt;m4b&#x2F;goblin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gimli-rs&#x2F;cpp_demangle&#x2F;pull&#x2F;100&quot;&gt;fitzgen&#x2F;cpp_demangle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fdehau&#x2F;tui-rs&#x2F;pull&#x2F;19&quot;&gt;fdehau&#x2F;tui-rs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;christophertrml&#x2F;rs-natural&#x2F;pull&#x2F;15&quot;&gt;christophertrml&#x2F;rs-natural&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bonus&quot;&gt;Bonus!&lt;&#x2F;h2&gt;
&lt;p&gt;If all of the manual fixing and checking sounds too dull, you can automate step number 5 using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&#x2F;rustfix&quot;&gt;&lt;code&gt;rustfix&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; by Pascal Hertleif (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&#x2F;&quot;&gt;@killercup&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rustfix --yolo &amp;amp;&amp;amp; cargo check
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</description>
        </item>
        <item>
            <title>A Little Story About the `yes` Unix Command</title>
            <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/yes/</link>
            <guid>https://endler.dev/2017/yes/</guid>
            <description>&lt;p&gt;What&#x27;s the simplest Unix command you know?&lt;br &#x2F;&gt;
There&#x27;s &lt;code&gt;echo&lt;&#x2F;code&gt;, which prints a string to stdout and &lt;code&gt;true&lt;&#x2F;code&gt;, which always terminates with an exit code of 0.&lt;&#x2F;p&gt;
&lt;p&gt;Among the rows of simple Unix commands, there&#x27;s also &lt;code&gt;yes&lt;&#x2F;code&gt;.
If you run it without arguments, you get an infinite stream of y&#x27;s, separated by a newline:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y
y
y
y
(...you get the idea)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What seems to be pointless in the beginning turns out to be pretty helpful :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;yes | sh boring_installation.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ever installed a program, which required you to type &amp;quot;y&amp;quot; and hit enter to keep going?
&lt;code&gt;yes&lt;&#x2F;code&gt; to the rescue! It will carefully fulfill its duty, so you can keep watching &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=yhBExhldRXQ&quot;&gt;Pootie Tang&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-yes&quot;&gt;Writing yes&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a basic version in... uhm... BASIC.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;10 PRINT &amp;quot;y&amp;quot;
20 GOTO 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s the same thing in Python:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simple, eh? Not so quick!&lt;br &#x2F;&gt;
Turns out, that program is quite slow.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;python yes.py | pv -r &amp;gt; &#x2F;dev&#x2F;null
[4.17MiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compare that with the built-in version on my Mac:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;yes | pv -r &amp;gt; &#x2F;dev&#x2F;null
[34.2MiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So I tried to write a quicker version in Rust. Here&#x27;s my first attempt:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expletive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;args()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expletive)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some explanations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The string we want to print in a loop is the first command line parameter and is named &lt;em&gt;expletive&lt;&#x2F;em&gt;. I learned this word from the &lt;code&gt;yes&lt;&#x2F;code&gt; manpage.&lt;&#x2F;li&gt;
&lt;li&gt;I use &lt;code&gt;unwrap_or&lt;&#x2F;code&gt; to get the &lt;em&gt;expletive&lt;&#x2F;em&gt; from the parameters. In case the parameter is not set, we use &amp;quot;y&amp;quot; as a default.&lt;&#x2F;li&gt;
&lt;li&gt;The default parameter gets converted from a string slice (&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;) into an &lt;em&gt;owned&lt;&#x2F;em&gt; string on the heap (&lt;code&gt;String&lt;&#x2F;code&gt;) using &lt;code&gt;into()&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s test it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cargo run --release | pv -r &amp;gt; &#x2F;dev&#x2F;null
   Compiling yes v0.1.0
    Finished release [optimized] target(s) in 1.0 secs
     Running `target&#x2F;release&#x2F;yes`
[2.35MiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whoops, that doesn&#x27;t look any better. It&#x27;s even slower than the Python version!
That caught my attention, so I looked around for the source code of a C implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dspinellis&#x2F;unix-history-repo&#x2F;blob&#x2F;4c37048d6dd7b8f65481c8c86ef8cede2e782bb3&#x2F;usr&#x2F;src&#x2F;cmd&#x2F;yes.c&quot;&gt;very first version of the program&lt;&#x2F;a&gt;, released with Version 7 Unix and famously authored by Ken Thompson on &lt;nobr&gt;Jan 10, 1979&lt;&#x2F;nobr&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; argv)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; argv[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No magic here.&lt;&#x2F;p&gt;
&lt;p&gt;Compare that to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;coreutils&#x2F;coreutils&#x2F;blame&#x2F;master&#x2F;src&#x2F;yes.c&quot;&gt;128-line-version from the GNU coreutils, which is mirrored on Github&lt;&#x2F;a&gt;. After 25 years, &lt;em&gt;it is still under active development!&lt;&#x2F;em&gt;
The last code change happened around a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;coreutils&#x2F;coreutils&#x2F;commit&#x2F;4cdb1703aff044de44d27e0558714542197f6dad&quot;&gt;year ago&lt;&#x2F;a&gt;.
That&#x27;s quite fast:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;# brew install coreutils
gyes | pv -r &amp;gt; &#x2F;dev&#x2F;null
[854MiB&#x2F;s]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The important part is at the end:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* Repeatedly output the buffer until there is a write error; then fail.  *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;full_write &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(STDOUT_FILENO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bufused) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bufused)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aha! So they simply use a buffer to make write operations faster.
The buffer size is defined by a constant named &lt;code&gt;BUFSIZ&lt;&#x2F;code&gt;, which gets chosen on each system so as to make I&#x2F;O efficient (see &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;libc&#x2F;manual&#x2F;html_node&#x2F;Controlling-Buffering.html&quot;&gt;here&lt;&#x2F;a&gt;).
On my system, that was defined as 1024 bytes. I actually had better performance with 8192 bytes.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve extended my Rust program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; BufWriter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Write}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUFSIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8192&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expletive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;args()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; writer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;BufWriter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUFSIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stdout())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;writeln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(writer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expletive)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The important part is, that the buffer size is a multiple of four, to ensure &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;381368&#x2F;270334&quot;&gt;memory alignment&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Running that gave me 51.3MiB&#x2F;s.
Faster than the version, which comes with my system, but still way slower than the results from &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;unix&#x2F;comments&#x2F;6gxduc&#x2F;how_is_gnu_yes_so_fast&#x2F;&quot;&gt;this Reddit post&lt;&#x2F;a&gt; that I found, where the author talks about 10.2GiB&#x2F;s.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;Once again, the Rust community did not disappoint.&lt;br &#x2F;&gt;
As soon as this post &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;75fll1&#x2F;a_little_story_about_the_yes_unix_command&#x2F;&quot;&gt;hit the Rust subreddit&lt;&#x2F;a&gt;, user &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;user&#x2F;nwydo&quot;&gt;nwydo&lt;&#x2F;a&gt; pointed out a &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;4wde08&#x2F;optimising_yes_any_further_ideas&#x2F;&quot;&gt;previous discussion&lt;&#x2F;a&gt; on the same topic.
Here&#x27;s their optimized code, that breaks the 3GB&#x2F;s mark on my machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Write}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ffi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;OsString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUFFER_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;to_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;os_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; OsString) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt; {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;unix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ffi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;OsStringExt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  os_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fill_up_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buffer_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  buffer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;buffer_size]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone_from_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(output)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buffer_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; right) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;split_at_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(buffer_size)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    right[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;buffer_size]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone_from_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(left)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    buffer_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;buffer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;buffer_size]
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stdout()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; locked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUFFER_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; filled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fill_up_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; output)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; locked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(filled)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;args_os()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(to_bytes)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
    Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Borrowed(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| {
      arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Owned(arg)
    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;exit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that&#x27;s a whole different ballgame!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We prepare a filled string buffer, which will be reused for each loop.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;io&#x2F;struct.Stdout.html#method.lock&quot;&gt;Stdout is protected by a lock&lt;&#x2F;a&gt;. So, instead of constantly acquiring and releasing it, we keep it all the time.&lt;&#x2F;li&gt;
&lt;li&gt;We use a the platform-native &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ffi&#x2F;struct.OsString.html&quot;&gt;&lt;code&gt;std::ffi::OsString&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html&quot;&gt;&lt;code&gt;std::borrow::Cow&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to avoid unnecessary allocations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The only thing that I could contribute was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cgati&#x2F;yes&#x2F;pull&#x2F;3&#x2F;files&quot;&gt;removing an unnecessary &lt;code&gt;mut&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. 😅&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;&#x2F;h2&gt;
&lt;p&gt;The trivial program &lt;code&gt;yes&lt;&#x2F;code&gt; turns out not to be so trivial after all.
It uses output buffering and memory alignment to improve performance.
Re-implementing Unix tools is fun and makes me appreciate the nifty tricks,
which make our computers fast.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Lightning Fast Image Previews with Pure CSS and LQIP</title>
            <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/image-previews/</link>
            <guid>https://endler.dev/2017/image-previews/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;factory.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Adapted from &lt;a href=&#x27;https:&#x2F;&#x2F;www.freepik.com&#x2F;free-vector&#x2F;industrial-machine-vector_753558.htm&#x27;&gt;Freepik&lt;&#x2F;a&gt; &quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Adapted from &lt;a href=&#x27;https:&#x2F;&#x2F;www.freepik.com&#x2F;free-vector&#x2F;industrial-machine-vector_753558.htm&#x27;&gt;Freepik&lt;&#x2F;a&gt; 
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;My website is reasonably fast.&lt;&#x2F;p&gt;
&lt;p&gt;I hope that every page load feels snappy, no matter your device or location.
That should not come as a surprise. After all, I&#x27;m just using plain HTML and CSS.
JavaScript is avoided whenever possible.&lt;&#x2F;p&gt;
&lt;p&gt;There was one thing left, which really annoyed me: layout reflow after images got loaded.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is, that the image dimensions are not known when the text is ready to be displayed.
As a result, the text will be pushed down on the screen as soon as an image is loaded above.&lt;&#x2F;p&gt;
&lt;p&gt;Also, while an image is loading, there is no preview, just blank space.
Here&#x27;s what that looks like on a slower connection:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;fout.png&quot; alt=&quot;Illustration of a flash of unstyled content&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I could fix that, by hardcoding the image width and height, but that would be tedious and error-prone.
And there would be no preview.
So I was wondering, what others were doing. 🤔&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tiny-image-thumbnails&quot;&gt;Tiny image thumbnails&lt;&#x2F;h2&gt;
&lt;p&gt;I vaguely remembered, that &lt;a href=&quot;https:&#x2F;&#x2F;code.fb.com&#x2F;uncategorized&#x2F;the-technology-behind-preview-photos&#x2F;&quot;&gt;Facebook uses tiny preview thumbnails in their mobile app&lt;&#x2F;a&gt;.
They extract the quantization table from the JPEG header to render the preview. This information
is stored on the client, so it doesn&#x27;t need to be downloaded every time.
Unfortunately, this approach requires full control over the image encoder.
It works for apps, but hardly for websites.&lt;&#x2F;p&gt;
&lt;p&gt;The search continued.&lt;&#x2F;p&gt;
&lt;p&gt;Until my colleague &lt;a href=&quot;https:&#x2F;&#x2F;tobias.is&#x2F;&quot;&gt;Tobias Baldauf&lt;&#x2F;a&gt; introduced me to &lt;a href=&quot;https:&#x2F;&#x2F;www.guypo.com&#x2F;introducing-lqip-low-quality-image-placeholders&quot;&gt;LQIP (Low-Quality Image Placeholders)&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the idea:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Load the page including inlined, low-quality image thumbnails.&lt;&#x2F;li&gt;
&lt;li&gt;Once the page is fully loaded (e.g. when the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3schools.com&#x2F;jsref&#x2F;event_onload.asp&quot;&gt;&lt;code&gt;onload&lt;&#x2F;code&gt; event&lt;&#x2F;a&gt; is fired), lazy load full quality images.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unfortunately, this technique requires JavaScript.
Nevertheless, I liked the idea, so I started experimenting with different image sizes and formats. My goal was to create the smallest thumbnails using any standard image format.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benchmark&quot;&gt;Benchmark&lt;&#x2F;h2&gt;
&lt;p&gt;Here are 15 pixel wide thumbnails encoded in different file formats:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;thumbnails.jpg&quot; alt=&quot;Comparison of different image formats when creating thumbnails&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I used different tools to create the thumbnails.
For JPEG and PNG encoding, I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shakiba&#x2F;svgexport&quot;&gt;svgexport&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;svgexport&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; img.svg img.png &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;svg{background:white;}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; 15: 1%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For webp, I used &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;speed&#x2F;webp&#x2F;docs&#x2F;cwebp&quot;&gt;cwebp&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cwebp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; img.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; img.webp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The gif was converted using an online tool and optimized using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kohler&#x2F;gifsicle&quot;&gt;gifsicle&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gifsicle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -O3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; img.gif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; img_mini.gif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;comparison&quot;&gt;Comparison&lt;&#x2F;h2&gt;
&lt;p&gt;WebP is the smallest, but it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;caniuse.com&#x2F;#feat=webp&quot;&gt;not supported by all browsers&lt;&#x2F;a&gt;.&lt;br &#x2F;&gt;
Gif was second, but when resizing the image and applying the blur filter, I was not happy with the result.&lt;br &#x2F;&gt;
In the end, I settled for PNG, which provided an excellent tradeoff between size and quality.
I optimized the images even further using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shssoichiro&#x2F;oxipng&quot;&gt;oxipng&lt;&#x2F;a&gt;, which supports zopfli compression.
With that, I end up with thumbnails of around 300-400 bytes in size.&lt;&#x2F;p&gt;
&lt;p&gt;I integrated the thumbnail creation process into my build toolchain for the blog.
The actual code to create the images is rather boring.
If you &lt;em&gt;really&lt;&#x2F;em&gt; want to have a look, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mre&#x2F;lqip&#x2F;&quot;&gt;it&#x27;s on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;avoiding-javascript&quot;&gt;Avoiding JavaScript&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the skeleton HTML for the image previews:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;figure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;loader&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;image.svg&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;image&#x2F;svg+xml&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;frozen&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;data:image&#x2F;png;base64,...&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&#x2F;&amp;gt;
  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;figure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The trick is to wrap both the full-size image and the preview image into a &lt;code&gt;loader&lt;&#x2F;code&gt; div,
which gets a &lt;code&gt;width: auto&lt;&#x2F;code&gt; CSS attribute:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.loader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;relative&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;overflow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;hidden&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I wrap the SVG into an &lt;code&gt;object&lt;&#x2F;code&gt; tag instead of using an &lt;code&gt;img&lt;&#x2F;code&gt; element.
This has the benefit, that I can show a placeholder in case the SVG can&#x27;t be loaded.
I position the &lt;code&gt;object&lt;&#x2F;code&gt; at the top left of the &lt;code&gt;loader&lt;&#x2F;code&gt; div.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.loader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.loader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.loader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the placeholder &lt;em&gt;hack&lt;&#x2F;em&gt; including some references:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;stackoverflow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&#x2F;29111371&#x2F;270334
&#x2F;&#x2F; https:&#x2F;&#x2F;stackoverflow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&#x2F;32928240&#x2F;270334
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;relative&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;

  &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;:after {
    position: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;#efefef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last part is the handling of the thumbnails.
Like most other sites, I decided to apply a blur filter.
In a way, it looks like the image is &lt;em&gt;frozen&lt;&#x2F;em&gt;, so that&#x27;s what I called the CSS selector.
I also applied a scaling transformation to achieve sharp borders.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.frozen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;-webkit-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;-moz-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;-o-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;-ms-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;animation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;ease-in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;forwards&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; fade&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@keyframes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;fade {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;opacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;opacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I use CSS animations instead of JavaScript.&lt;br &#x2F;&gt;
The duration of the animation is based on the 95% percentile load time of all visitors of the page. Although it&#x27;s just an approximation, this should work for most readers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;result&quot;&gt;Result&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;No JavaScript needed&lt;&#x2F;li&gt;
&lt;li&gt;Works on all modern browsers&lt;&#x2F;li&gt;
&lt;li&gt;Supports a fallback in case the main image can&#x27;t be loaded&lt;&#x2F;li&gt;
&lt;li&gt;Tiny overhead&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.guypo.com&#x2F;introducing-lqip-low-quality-image-placeholders&quot;&gt;Introducing LQIP – Low Quality Image Placeholders&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jmperezperez.com&#x2F;medium-image-progressive-loading-placeholder&#x2F;&quot;&gt;How Medium does progressive image loading&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;axe312ger&#x2F;sqip&quot;&gt;SQIP, a new preview technique using pure SVG&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Go vs Rust? Choose Go.</title>
            <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/go-vs-rust/</link>
            <guid>https://endler.dev/2017/go-vs-rust/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;hero.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Gopher designed with &lt;a href=&#x27;https:&#x2F;&#x2F;gopherize.me&#x27;&gt;Gopherize.me&lt;&#x2F;a&gt;. Gears designed by &lt;a href=&#x27;https:&#x2F;&#x2F;www.freepik.com&#x2F;free-vector&#x2F;gear-background-with-pieces-different-colors_966124.htm&#x27;&gt;Freepik&lt;&#x2F;a&gt;&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Gopher designed with &lt;a href=&#x27;https:&#x2F;&#x2F;gopherize.me&#x27;&gt;Gopherize.me&lt;&#x2F;a&gt;. Gears designed by &lt;a href=&#x27;https:&#x2F;&#x2F;www.freepik.com&#x2F;free-vector&#x2F;gear-background-with-pieces-different-colors_966124.htm&#x27;&gt;Freepik&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&amp;quot;Rust or Go, which one should I choose?&amp;quot; is a question I get quite often.
Both languages seem to be competing for the same user base and they both seem to be
&lt;em&gt;systems programming&lt;&#x2F;em&gt; languages, so there must be a clear winner, right?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;&#x2F;strong&gt;: &lt;em&gt;It&#x27;s not so easy. Both languages have a different scope. Golang shines for writing microservices and for typical &amp;quot;DevOps&amp;quot; tasks, but it is not a systems programming language. Rust is stronger for tasks where concurrency, safety and&#x2F;or performance are important; but it has a steeper learning curve than Go.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;go-practical-pragmatic-plain&quot;&gt;Go: practical, pragmatic, plain&lt;&#x2F;h2&gt;
&lt;img src=&quot;.&#x2F;go.png&quot; alt=&quot;The Golang learning curve over time, a straight line.&quot;&#x2F;&gt;
&lt;p&gt;I don&#x27;t think Go is an elegant language. Its biggest feature is simplicity.
Go is not even a systems programming language. While it&#x27;s great for writing microservices and tooling around backend infrastructure, I would not want to write a kernel or a memory allocator with it.&lt;&#x2F;p&gt;
&lt;p&gt;But with Go, you &lt;em&gt;get things done&lt;&#x2F;em&gt; — fast.&lt;br &#x2F;&gt;
Go is one of the most productive languages I&#x27;ve ever worked with.
The mantra is: solve real problems today.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-s-strong-guarantees-come-at-a-cost&quot;&gt;Rust&#x27;s strong guarantees come at a cost&lt;&#x2F;h2&gt;
&lt;img src=&quot;.&#x2F;rust.png&quot; alt=&quot;The Rust learning curve over time, a bumpy ride.&quot;&#x2F;&gt;
&lt;p&gt;Rust in comparison is &lt;strong&gt;hard&lt;&#x2F;strong&gt;. It took me many months to become somewhat productive.
You need to invest a serious amount of time to see any benefit.
Rust is already a powerful language and it gets stronger every day.
It feels much more like a &lt;em&gt;pragmatic Haskell&lt;&#x2F;em&gt; to me than a &lt;em&gt;safer C&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t get me wrong: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCZ_EWaQZCZuGGfnuqUoHujw&quot;&gt;I love Rust&lt;&#x2F;a&gt;, and it helped me become a better programmer. It is certainly a nice language to learn. The big question is, if it is the right choice for your next major project.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the thing: if you choose Rust, usually you need the guarantees, that the language provides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Safety against &lt;code&gt;Null&lt;&#x2F;code&gt; pointers, race conditions and all sorts of low-level threats.&lt;&#x2F;li&gt;
&lt;li&gt;Predictable runtime behavior (zero cost abstractions and no garbage collector).&lt;&#x2F;li&gt;
&lt;li&gt;(Almost) total control over the hardware (memory layout, processor features).&lt;&#x2F;li&gt;
&lt;li&gt;Seamless interoperability with other languages.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you don&#x27;t &lt;em&gt;require&lt;&#x2F;em&gt; any of these features, Rust might be a poor choice for your next project.
That&#x27;s because these guarantees come with a cost: ramp-up time.
You&#x27;ll need to unlearn bad habits and learn new concepts.
Chances are, you will &lt;a href=&quot;https:&#x2F;&#x2F;m-decoster.github.io&#x2F;2017&#x2F;01&#x2F;16&#x2F;fighting-borrowchk&#x2F;&quot;&gt;fight with the borrow checker&lt;&#x2F;a&gt; a lot when you start out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;case-study-primality-by-trial-division&quot;&gt;Case-study: Primality by trial division&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say, you want to check if a number is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Prime_number&quot;&gt;prime&lt;&#x2F;a&gt;.
The easiest way is to check if we can divide the number by any smaller natural number (without a remainder). If not, we found a prime number! This approach is called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trial_division&quot;&gt;trial division&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how to do that in Golang (courtesy of &lt;a href=&quot;https:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Primality_by_trial_division#Go&quot;&gt;Rosetta Code&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;IsPrime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
		n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n
	}
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
		}
	}
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s the same thing in Rust:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;is_prime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; n {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
            }
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first sight, both solutions look pretty similar.
But if we look closer, we can spot some differences.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In Go, we use a simple switch-case statement. In Rust, we use a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;1.2.0&#x2F;book&#x2F;match.html&quot;&gt;&lt;code&gt;match&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; statement, which is much more powerful.&lt;&#x2F;li&gt;
&lt;li&gt;In Go, we use a simple for-loop to iterate over the numbers 2 to n. In Rust, we use a range expression (&lt;code&gt;2..n&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;In Go, we use two &lt;code&gt;return&lt;&#x2F;code&gt; statements, in Rust we have one &lt;code&gt;return&lt;&#x2F;code&gt; &lt;em&gt;expression&lt;&#x2F;em&gt;. In general, most things in Rust are expressions, which can be returned and assigned to a variable. Read more about expressions &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;reference&#x2F;expressions.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In many areas, Rust is more functional than Golang. You could rewrite the above code using the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.any&quot;&gt;&lt;code&gt;any&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; method, which is implemented for &lt;code&gt;Range&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;is_prime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; n {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It might seem a little alien at first, but it will become second-nature after a while.&lt;&#x2F;p&gt;
&lt;p&gt;This was just a quick example, of course. I suggest, you browse some code on &lt;a href=&quot;https:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Rosetta_Code&quot;&gt;Rosetta Code&lt;&#x2F;a&gt; to get a better feeling for both languages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;case-study-finding-duplicate-words-in-text-files&quot;&gt;Case study: Finding duplicate words in text files&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re more like a visual type, here is a video where I write a simple
concurrent program in Go and Rust to compare both languages:&lt;&#x2F;p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;endler.dev&amp;#x2F;video.css&quot; &#x2F;&gt;
&lt;script src=&quot;&#x2F;video.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div 
  class=&quot;light-video-embed&quot; 
  data-id=&quot;B5xYBrxVSiE&quot;
&gt;
  &lt;img src=&quot;preview.jpg&quot; loading=&quot;lazy&quot; &#x2F;&gt;
  &lt;div class=&quot;play&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
  document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    lightEmbedInit();
  });
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;some-things-i-prefer-in-go&quot;&gt;Some things I prefer in Go&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Fast compile times&lt;&#x2F;li&gt;
&lt;li&gt;Pragmatic problem-solving approach&lt;&#x2F;li&gt;
&lt;li&gt;Nice ecosystem for typical &lt;em&gt;DevOps&lt;&#x2F;em&gt; tasks&lt;&#x2F;li&gt;
&lt;li&gt;Batteries-included standard-library&lt;&#x2F;li&gt;
&lt;li&gt;IDE support&lt;&#x2F;li&gt;
&lt;li&gt;Simple error handling&lt;&#x2F;li&gt;
&lt;li&gt;The mascot 😉&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;some-things-i-prefer-in-rust&quot;&gt;Some things I prefer in Rust&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Safety: No null pointers, no data races,...&lt;&#x2F;li&gt;
&lt;li&gt;Fine-grained system control&lt;&#x2F;li&gt;
&lt;li&gt;Incredible runtime speed (comparable with C&#x2F;C++)&lt;&#x2F;li&gt;
&lt;li&gt;Zero-cost abstractions&lt;&#x2F;li&gt;
&lt;li&gt;Awesome, open-minded community&lt;&#x2F;li&gt;
&lt;li&gt;Simple package management with cargo&lt;&#x2F;li&gt;
&lt;li&gt;Support for Generics in form of traits&lt;&#x2F;li&gt;
&lt;li&gt;C interop and FFI&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;99% of the time, Go is &amp;quot;good enough&amp;quot; and that 1% where it isn&#x27;t, you&#x27;ll know.
And then take a look at Rust, because the two languages complement each other pretty well.&lt;&#x2F;p&gt;
&lt;p&gt;After all is said and done, &lt;a href=&quot;https:&#x2F;&#x2F;dave.cheney.net&#x2F;2015&#x2F;07&#x2F;02&#x2F;why-go-and-rust-are-not-competitors&quot;&gt;Rust and Go are not really competitors&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Afraid of Makefiles? Don&#x27;t be!</title>
            <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/makefiles/</link>
            <guid>https://endler.dev/2017/makefiles/</guid>
            <description>&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;clothes.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;What do clothes have to do with Makefiles? Find out in this post.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        What do clothes have to do with Makefiles? Find out in this post.
        &lt;br &#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;www.freepik.com&#x2F;free-photos-vectors&#x2F;background&quot;&gt;Illustration by Anindyanfitri - Freepik.com&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;In the last few years, I&#x27;ve had the pleasure to work with a lot of talented Software Engineers.
One thing that struck me is, that many of them did not have any working knowledge of &lt;code&gt;Makefiles&lt;&#x2F;code&gt;
and why they are useful.&lt;&#x2F;p&gt;
&lt;p&gt;When faced with the task to automate a build process, they often roll their own shell scripts.
Common culprits are called &lt;code&gt;build.sh&lt;&#x2F;code&gt; or &lt;code&gt;run.sh&lt;&#x2F;code&gt; or &lt;code&gt;doall.sh&lt;&#x2F;code&gt; etc.&lt;&#x2F;p&gt;
&lt;p&gt;They implement the same basic functionality over and over again:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing input parameters and environment variables.&lt;&#x2F;li&gt;
&lt;li&gt;Manually managing dependencies between build steps.&lt;&#x2F;li&gt;
&lt;li&gt;Error handling... maybe.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Along the way, they keep making the same basic mistakes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Incorrectly handling &lt;a href=&quot;https:&#x2F;&#x2F;www.pixelbeat.org&#x2F;programming&#x2F;shell_script_mistakes.html&quot;&gt;input parameters&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shellshock_(software_bug)&quot;&gt;environment variables&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Missing dependencies between build steps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.davidpashley.com&#x2F;articles&#x2F;writing-robust-shell-scripts&#x2F;&quot;&gt;Forgetting to handle errors&lt;&#x2F;a&gt; and — even worse — carrying on with the program execution.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;makefiles-are-scary&quot;&gt;Makefiles are scary!&lt;&#x2F;h2&gt;
&lt;p&gt;If you think that &lt;code&gt;make&lt;&#x2F;code&gt; is scary, you probably think of complicated build machinery for &lt;a href=&quot;https:&#x2F;&#x2F;community.kde.org&#x2F;Guidelines_and_HOWTOs&#x2F;Build_from_source&quot;&gt;big&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromium&#x2F;src&#x2F;+&#x2F;master&#x2F;docs&#x2F;linux&#x2F;build_instructions.md&quot;&gt;software&lt;&#x2F;a&gt; projects.
It doesn&#x27;t need to be that way. Let&#x27;s hear what the author of &lt;code&gt;make&lt;&#x2F;code&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stuart_Feldman&quot;&gt;Stuart Feldman&lt;&#x2F;a&gt; has to say:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It began with an elaborate idea of a dependency analyzer, boiled down to something much simpler, and turned into Make that weekend. Use of tools that were still wet was part of the culture. Makefiles were text files, not magically encoded binaries because &lt;strong&gt;that was the Unix ethos: printable, debuggable, understandable stuff.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;a href=&quot;https:&#x2F;&#x2F;nakamotoinstitute.org&#x2F;static&#x2F;docs&#x2F;taoup.pdf&quot;&gt;The Art of Unix Programming (2003)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;makefiles-are-simple&quot;&gt;Makefiles are simple!&lt;&#x2F;h2&gt;
&lt;p&gt;Before I leave the house, I need to get dressed.
I use the same simple routine every time:
Underpants, trousers, shirt, pullover, socks, shoes, jacket.
Most likely you also have a routine, even though yours might be different.&lt;&#x2F;p&gt;
&lt;p&gt;Some of these steps depend on each other.&lt;br &#x2F;&gt;
&lt;code&gt;Make&lt;&#x2F;code&gt; is useful for handling dependencies.&lt;br &#x2F;&gt;
Let&#x27;s try to express my routine as a &lt;code&gt;Makefile&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;trousers shoes jacket
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;All done. Let&amp;#39;s go outside!&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;jacket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;pullover
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Putting on jacket.&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pullover&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;shirt
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Putting on pullover.&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;@echo &amp;quot;Putting on shirt.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;
trousers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;underpants
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Putting on trousers.&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;underpants&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;@echo &amp;quot;Putting on underpants.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;
shoes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;socks
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Putting on shoes.&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;socks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;pullover
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Putting on socks.&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we execute the &lt;code&gt;Makefile&lt;&#x2F;code&gt;, we get the following output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;$ make dress
Putting on underpants.
Putting on trousers.
Putting on shirt.
Putting on pullover.
Putting on socks.
Putting on shoes.
Putting on jacket.
All done. Let&amp;#39;s go outside!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;what-just-happened&quot;&gt;What just happened?&lt;&#x2F;h2&gt;
&lt;p&gt;Noticed how the steps are in the correct order?
By plainly writing down the dependencies between the steps, &lt;code&gt;make&lt;&#x2F;code&gt; helps us to execute them correctly.&lt;&#x2F;p&gt;
&lt;p&gt;Each build step has the following structure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;[dependencies]
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;shell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; to execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;shell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; to execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first target in a &lt;code&gt;Makefile&lt;&#x2F;code&gt; will be executed by default when we call &lt;code&gt;make&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The order of the targets does not matter.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Shell commands must be indented with a tab.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add an &lt;code&gt;@&lt;&#x2F;code&gt; sign to suppress output of the command that is executed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;target&lt;&#x2F;code&gt; isn&#x27;t a file you want to build, please add &lt;code&gt;.PHONY &amp;lt;target&amp;gt;&lt;&#x2F;code&gt; at the end of the build step.
Common phony targets are: clean, install, run,...&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.PHONY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Otherwise, if somebody creates an &lt;code&gt;install&lt;&#x2F;code&gt; directory, &lt;code&gt;make&lt;&#x2F;code&gt; will silently fail, because the build target already exists.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Congratulations! You&#x27;ve learned 90% of what you need to know about &lt;code&gt;make&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h2&gt;
&lt;p&gt;Real &lt;code&gt;Makefiles&lt;&#x2F;code&gt; can do much more! They will &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;3798609&#x2F;270334&quot;&gt;only build the files that have changed&lt;&#x2F;a&gt; instead of doing a full rebuild.
And they will do &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;3841803&#x2F;270334&quot;&gt;as much as possible in parallel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Of Boxes and Trees - Smart Pointers in Rust</title>
            <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/boxes-and-trees/</link>
            <guid>https://endler.dev/2017/boxes-and-trees/</guid>
            <description>&lt;p&gt;Recently, I tried to implement a binary tree data structure in Rust.
Each binary tree has a root value, a left, and a right subtree.
I started from this Python implementation, which is quite straightforward.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Why Type Systems Matter</title>
            <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/why-type-systems-matter/</link>
            <guid>https://endler.dev/2017/why-type-systems-matter/</guid>
            <description>&lt;p&gt;I&#x27;ve written most of my code in dynamically typed languages such as Python or PHP. But ever since dabbling with &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt;, I&#x27;ve developed a passion for static type systems.&lt;br &#x2F;&gt;
It began to feel very natural to me; like a totally new way to express myself.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Being a Professional Programmer</title>
            <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/professional-programming/</link>
            <guid>https://endler.dev/2017/professional-programming/</guid>
            <description>&lt;p&gt;When I was around 12, I set myself the goal to become a professional programmer.&lt;br &#x2F;&gt;
I can tell, because at this time I made the conscious decision to use my right hand to control the mouse — even though I&#x27;m left-handed.&lt;&#x2F;p&gt;
&lt;p&gt;My reasoning was, that if I ever had to help out a colleague with a computer problem I sure did not want to move her mouse to the other side before getting started.  That would be awkward. 
(Of course I did not foresee the advent of the wireless mouse... As a matter of fact, I still use the right hand out of habit.)&lt;&#x2F;p&gt;
&lt;p&gt;One thing I always wanted to know is how a typical workday of a programmer looked like.
Was I wasting my time by pursuing this career?
Only later I found the answer — but I had to become a professional programmer myself.
This article aims to save you from a few years of uncertainty.&lt;&#x2F;p&gt;
&lt;p&gt;Before you dig into this, be sure to read the first part of this series titled &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;why-i-love-programming&#x2F;&quot;&gt;&amp;quot;Why I love Programming&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-the-difference-between-professional-and-hobby-programming&quot;&gt;What&#x27;s the difference between &amp;quot;professional&amp;quot; and &amp;quot;hobby&amp;quot; programming?&lt;&#x2F;h2&gt;
&lt;p&gt;In one word: &lt;em&gt;accountability&lt;&#x2F;em&gt;.&lt;br &#x2F;&gt;
You are expected to be responsible.&lt;&#x2F;p&gt;
&lt;p&gt;Programming in your free time is like throwing a party without having to clean up: pure fun!
If you get bored you&#x27;re free to move on.
Not so in professional programming, where you&#x27;re expected to get the job done.&lt;&#x2F;p&gt;
&lt;p&gt;Every application requires constant bug fixing, refactoring and sometimes even monkey patching. Maintaining code is no amusement park; especially if it&#x27;s not your own.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;being-a-junior-developer&quot;&gt;Being a Junior Developer&lt;&#x2F;h2&gt;
&lt;p&gt;Fresh out of school you might think you&#x27;re a pretty kick-ass programmer. Let me tell you: you&#x27;re not.
You wouldn&#x27;t guess what talented people can do with these blinking machines.
You&#x27;ll have tons of things to learn in the first few years.&lt;&#x2F;p&gt;
&lt;p&gt;Professional software development is a lengthy process. Writing readable, well-tested, well-documented code is a substantial effort. You will need patience, lots of it. Both, with yourself and with others.&lt;&#x2F;p&gt;
&lt;p&gt;As a junior, you only think in black and white. You look at some code, and it&#x27;s all wrong. Who in their right mind created this horrible monstrosity?!
As you become more experienced, you&#x27;ll see the shades of grey.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually, you&#x27;ll understand that those neckbeards were not slower than you, but
more careful. You learn how to test your code, how to document it. You even begin to
appreciate UML diagrams.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;becoming-obsolete&quot;&gt;Becoming obsolete&lt;&#x2F;h2&gt;
&lt;p&gt;&amp;quot;The world is moving too fast. What you learned today is obsolete tomorrow. Why bother?&amp;quot;.
I&#x27;ve heard that saying countless times throughout my career.
It&#x27;s both, popular and wrong.&lt;&#x2F;p&gt;
&lt;p&gt;If a skill becomes obsolete, it&#x27;s not a skill.
Throughout your career you don&#x27;t want to be known as &amp;quot;the Jenkins guy&amp;quot;, you want to be the
expert in Software Quality. Hint: If you don&#x27;t know what Jenkins is, that&#x27;s the
whole point. You should not narrow down your scope too much.
The right skills never become obsolete.&lt;&#x2F;p&gt;
&lt;p&gt;From time to time it happens, that due to some new company policy your beautiful creation will become obsolete.
As depressing as it sounds: it&#x27;s a regular part of the software business.
You need to adapt.
One advice I can give you is not to take it too seriously.
Drop the project, keep the wisdom.
Embrace change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-software-in-a-non-perfect-world&quot;&gt;Writing software in a non-perfect world&lt;&#x2F;h2&gt;
&lt;p&gt;A professional programmer has to deal with deficiencies all the time. The game is called &amp;quot;balancing constraints&amp;quot;. Deadlines, budgets, and code quality are just a few competing constraints we have to consider.
Elegant designs fade away in the face of reality.
In the end you want to earn money with your software, so you have to ship it!&lt;&#x2F;p&gt;
&lt;p&gt;The best developers I know, keep the balance between pragmatism and elegance.
They know which parts matter and which don&#x27;t. Those who don&#x27;t will be replaced
when there&#x27;s a need.&lt;&#x2F;p&gt;
&lt;p&gt;For me, I was always leaning more towards elegance.
That&#x27;s just a nicer way to say I was a perfectionist.
I needed to learn the pragmatic part through hard work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mentoring-less-experienced-programmers&quot;&gt;Mentoring less experienced Programmers&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The better you become at programming, the less you code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, you will spend more time thinking about Software Architecture,
high-level designs and splitting up the work into smaller junks for other developers to consume.
You will start mentoring Junior Developers. Recruiting will require a lot of your
attention. You will spend your time in Meetings, discussing project goals with
business people.
One might say, you take the role of a mediator. Others might call you a manager.&lt;&#x2F;p&gt;
&lt;p&gt;Once you know the ins and outs of the business, you are an essential asset for
the company. You might get asked to become a manager, or at least managing projects will slowly feel like a natural extension of your responsibilities.
But beware! This slow and gradual process is dangerous.
Moving back to being a full-time programmer is not easy. 
During the time you were busy with project management, others were busy improving their
coding skills.
You can try to keep up-to-date in your free time but that&#x27;s hard.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve seen excellent developers become great managers. At some point in your career
it&#x27;s a decision you need to make for yourself.&lt;&#x2F;p&gt;
&lt;p&gt;However you decide, it pays off to invest some time into learning how to
communicate. Empathy plays a prominent role in that.
Developing software as a team is so complicated that a lot of time is spent on aligning goals and communicating problems. In fact, communication is what you get paid for. This includes documentation, tests and the code itself.&lt;&#x2F;p&gt;
&lt;p&gt;Talk to others, listen to their problems. Read books about Software Project
Management, even though you don&#x27;t want to be a manager yourself. It will help
you understand the role of your boss.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-word-about-money&quot;&gt;A word about money&lt;&#x2F;h2&gt;
&lt;p&gt;There are many good reasons to work in IT, but money is not one of them.&lt;&#x2F;p&gt;
&lt;p&gt;While it can be tempting to base your career decisions on prospective salary,
don&#x27;t do it. You will be very unhappy. You will spend eight hours or more each day sitting in front of a blinking cursor.
That&#x27;s a lot of time, and time is much more valuable than money.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t get me wrong. There&#x27;s plenty of jobs that pay well. 
You will most likely not get rich, though. If you want
to make it big, I can&#x27;t help you. Maybe look into Real Estate or so...
The only way to get rich as a developer is to work on something really hard, put in lots of hours and get
lucky. Startups, basically. Keep in mind: One Bill Gates takes a thousand failed
attempts.
Another way is to stop being a programmer and become a manager instead. 
I&#x27;ve already shared my opinion on that in the last section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;&#x2F;h2&gt;
&lt;p&gt;While you should learn to read (and maybe write) code, working as a professional programmer is not for everyone.
You might ask: &amp;quot;Is it worth it?&amp;quot;. 
For me it was the right decision. Hopefully I could help you to make your own.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Future of Rust</title>
            <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/future-of-rust/</link>
            <guid>https://endler.dev/2017/future-of-rust/</guid>
            <description>&lt;p&gt;Let me first point out the obvious: yes, the title is a little sensationalist. Also
you might be asking why I should be entitled to talk about the future of Rust. After
all, I&#x27;m neither part of the Rust core team, nor a major contributor to the Rust
ecosystem. To that I answer: why not? It&#x27;s fun to think about the future of
systems programming in general and Rust in particular.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;crab.svg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Ferris is the inofficial Rust mascot&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Ferris is the inofficial Rust mascot
        &lt;br &#x2F;&gt;
        Illustration provided by &lt;a href=&quot;https:&#x2F;&#x2F;www.freepik.com&#x2F;zooenvato&quot;&gt;zooenvato for FreePik.com&lt;&#x2F;a&gt;
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;You might have heard of the &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;setting-our-vision-for-the-2017-cycle&#x2F;3958&quot;&gt;near-term goals&lt;&#x2F;a&gt; that the core team has committed itself to. Faster compile times and a more gentle learning curve come to mind.
This post is not about that.
Instead, I want to explore some more exotic areas where Rust could shine in
five to ten years from now. To make it big, we need both, &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;quotes&#x2F;726646-there-are-two-things-children-should-get-from-their-parents&quot;&gt;roots and wings&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-science&quot;&gt;Data Science&lt;&#x2F;h2&gt;
&lt;p&gt;Right now, the most popular languages for Data Science are Python, Java, R, and C++.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&#x2F;2017&#x2F;future-of-rust&#x2F;data-science-languages.png&quot; alt=&quot;Programming language popularity for data science&quot; &#x2F;&gt;
  &lt;figcaption&gt;Programming language popularity for data science (&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20170311030523&#x2F;https:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;community&#x2F;blogs&#x2F;jfp&#x2F;entry&#x2F;What_Language_Is_Best_For_Machine_Learning_And_Data_Science?lang=en&quot;&gt;Source&lt;&#x2F;a&gt;).
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;We&#x27;ve observed that while prototypes are mostly written in dynamically typed
languages like Python and R, once an algorithm reaches production level quality
it is often &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20170311030523&#x2F;https:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;community&#x2F;blogs&#x2F;jfp&#x2F;entry&#x2F;What_Language_Is_Best_For_Machine_Learning_And_Data_Science?lang=en&quot;&gt;rewritten in faster languages such as C++&lt;&#x2F;a&gt; for scalability.
It is not unthinkable that Rust is going to be some healthy competition for C++ in the near future.
The benchmarks of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;autumnai&#x2F;leaf&quot;&gt;leaf&lt;&#x2F;a&gt;, a machine learning library written in Rust, are already nothing short of
impressive.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blockbuster-games&quot;&gt;Blockbuster games&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust_gamedev&#x2F;comments&#x2F;4qlftu&#x2F;look_our_game_writen_entirely_in_rust&#x2F;d4tz4r3&#x2F;&quot;&gt;Games&lt;&#x2F;a&gt; are another area where Rust might shine.
It&#x27;s financially attractive for Game Studios to support multiple platforms without much
effort. &lt;code&gt;Cargo&lt;&#x2F;code&gt; and &lt;code&gt;rustup&lt;&#x2F;code&gt; make cross-compiling easy.
Modern libraries slowly fill the tooling gaps for large-scale game development.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tomaka&#x2F;vulkano&quot;&gt;Rust&#x27;s support for the Vulkan 3D graphics API&lt;&#x2F;a&gt; might already be the best of class.
The killer feature though is the unique combination of safety and performance.
If you ship a game to a million players and they throw money at you, you&#x27;ll better make sure that it doesn&#x27;t crash... &lt;a href=&quot;https:&#x2F;&#x2F;gamingbolt.com&#x2F;15-buggiest-games-ever-released&quot;&gt;right?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That said, the first AAA Rust game might still be far in the future. &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Az5F4lwSljI&amp;amp;feature=youtu.be&amp;amp;t=23m50s&quot;&gt;Here&#x27;s Blizzard&#x27;s standpoint on Rust in 2017&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;systems-engineering&quot;&gt;Systems Engineering&lt;&#x2F;h2&gt;
&lt;p&gt;Maybe — eventually — we will also see formal verification of the Rust core. Projects like &lt;a href=&quot;https:&#x2F;&#x2F;plv.mpi-sws.org&#x2F;rustbelt&#x2F;&quot;&gt;RustBelt&lt;&#x2F;a&gt; would then open new opportunities in safety-focused industries like the Space industry. Wouldn&#x27;t it be nice to safely land a Spacecraft on Mars that is controlled by Rust? (Or by one of its spiritual successors.)
I wonder if &lt;a href=&quot;https:&#x2F;&#x2F;www.spacex.com&#x2F;&quot;&gt;SpaceX&lt;&#x2F;a&gt; is experimenting with Rust already...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integrating-with-other-languages&quot;&gt;Integrating with other languages&lt;&#x2F;h2&gt;
&lt;p&gt;There are many other areas I haven&#x27;t even mentioned yet. For example, financial and medical software or Scientific Computing, just to name a few.
In all cases, Rust might be a good fit. Right now the biggest barrier to entry
is probably the huge amount of legacy code. Many industries maintain large codebases in Cobol,
C or Fortran that are not easily rewritten.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, Rust has been proven to work very nicely with other languages.
Partly because of strong C-compatibility and partly because there is no Runtime or Garbage Collector.
A typical pattern is to optimize some core part of an application in Rust that has hard safety&#x2F;performance
requirements, while leaving the rest untouched.
I think this symbiosis will only become stronger in the long run.
There are even ambitious projects like &lt;a href=&quot;https:&#x2F;&#x2F;archive.fosdem.org&#x2F;2017&#x2F;schedule&#x2F;event&#x2F;mozilla_translation_from_c_to_rust&#x2F;&quot;&gt;Corrode&lt;&#x2F;a&gt; which attempt to translate C code to Rust automatically.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Overall I see huge potential for Rust in areas where safety, performance or total control over the machine are essential. With languages like Rust and &lt;a href=&quot;https:&#x2F;&#x2F;crystal-lang.org&#x2F;&quot;&gt;Crystal&lt;&#x2F;a&gt;, a whole class of errors is a thing of the past. No null pointers, no segmentation faults, no memory leaks, no data races.
I find it encouraging that future generations of programmers will take all that for granted.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Launching a URL Shortener in Rust using Rocket</title>
            <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/rust-url-shortener/</link>
            <guid>https://endler.dev/2017/rust-url-shortener/</guid>
            <description>&lt;p&gt;One common systems design task in interviews is to sketch the software architecture of a URL shortener (a &lt;a href=&quot;https:&#x2F;&#x2F;bitly.com&#x2F;&quot;&gt;bit.ly&lt;&#x2F;a&gt; clone, if you may).
Since I was playing around with &lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&#x2F;&quot;&gt;Rocket&lt;&#x2F;a&gt; – a web framework for Rust – why not give it a try?&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Essence of Information</title>
            <pubDate>Sat, 18 Mar 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/the-essence-of-information/</link>
            <guid>https://endler.dev/2017/the-essence-of-information/</guid>
            <description>&lt;p&gt;People look confused when I tell them about my passion for algorithms and data-structures.
Most of them understand what a Programmer is doing, but not what Computer Science is good for.
And even if they do, they think it has no practical relevance.
Let me show you with a simple example, that applied Computer Science can be found everywhere.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine a pile of socks that need to get sorted.
Not exactly the most exciting pastime.
You&#x27;ve put off this task for so long, that it will inevitably take an hour to be done.&lt;&#x2F;p&gt;
&lt;figure&gt;
        &lt;img src=&quot;.&amp;#x2F;big_pile.jpg&quot; 
        loading=&quot;lazy&quot;
            alt=&quot;Yes, there is a game about sorting socks.&quot;
        &#x2F;&gt;
    &lt;figcaption&gt;
        Yes, there is a game about sorting socks.
        &lt;br &#x2F;&gt;
        It&#x27;s called &lt;a href=&quot;https:&#x2F;&#x2F;apps.apple.com&#x2F;app&#x2F;sort-the-socks&#x2F;id438108346&quot;&gt;Sort the Socks&lt;&#x2F;a&gt; and you can get it for free on the App Store.
    &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Considering your options, you decide to get some help.
Together with a friend you get to work. You finish in roughly half the time.&lt;&#x2F;p&gt;
&lt;p&gt;A Computer Scientist might call this pile of socks a &lt;em&gt;resource&lt;&#x2F;em&gt;.
You and your friend get bluntly degraded to &lt;em&gt;workers&lt;&#x2F;em&gt;.
Both of you can work on the problem at the same time — or &lt;em&gt;in parallel&lt;&#x2F;em&gt;.
This is the gist of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Parallel_computing&quot;&gt;Parallel Computing&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, some properties make sock-sorting a good fit for doing in parallel.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The work can be nicely split up. It takes about the same time for every worker to find a pair of socks.&lt;&#x2F;li&gt;
&lt;li&gt;Finding a different pair is a completely separate task that can happen at the same time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The more workers you assign to this task, the faster you&#x27;re done.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1 worker takes 60 minutes.&lt;&#x2F;li&gt;
&lt;li&gt;2 workers take 30 minutes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How long will 3 workers take? Right! Around 20 minutes. We could write down
a simple formula for this relationship:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;equation.svg&quot; alt=&quot;Sorting Time = Time for one worker &#x2F; workers&quot; &#x2F;&gt; &lt;&#x2F;p&gt;
&lt;p&gt;Well, that is not quite correct. We forgot to consider the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Overhead_(computing)&quot;&gt;overhead&lt;&#x2F;a&gt;: When Mary
tries to pick up a sock, Stephen might reach for the same.
They both smile and one of them picks another sock.
In computing, a worker might do the same. Well, not smiling but picking another
task. When lots of workers share resources, these situations occur quite
frequently. And resolving the situation always takes a little extra time. So we are a
bit away from our optimal sorting speed because of that.&lt;&#x2F;p&gt;
&lt;p&gt;But it gets worse! Let&#x27;s say you have 100 workers for 100 socks.
In the beginning, every worker might take one sock and try to find a match for
it. Here&#x27;s the problem: As soon as they pick up one sock each, there are no
socks left. All workers are in a waiting state. The sorting takes forever.
That&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Deadlock&quot;&gt;deadlock&lt;&#x2F;a&gt;, and it&#x27;s one of the most frightening scenarios of parallel computing.&lt;&#x2F;p&gt;
&lt;p&gt;In this case, a simple solution is to put down the sock again and wait for some time until trying to get a new sock.
Another way out of the dilemma would be, to enforce some kind of &amp;quot;protocol&amp;quot; for sorting. 
Think of a protocol as a silent agreement between the workers on how to achieve a common goal.&lt;&#x2F;p&gt;
&lt;p&gt;So, in our case, each worker might only be responsible for one color of socks.
Worker one takes the green socks, worker two the gray ones and so on.
With this simple trick, we can avoid a deadlock, because we work on completely
separate tasks.&lt;&#x2F;p&gt;
&lt;p&gt;But there&#x27;s still a catch. What if there are only four green socks and 4000 gray socks?
Worker one would get bored fairly quickly. He would sort the two pairs of socks in
no time and then watch worker two sort the rest.
That&#x27;s not really team spirit, is it?&lt;&#x2F;p&gt;
&lt;p&gt;Splitting up the work like this makes most sense, if we can assume that we
have around the same number of socks for every color.
This way we achieve roughly the same workload for
everyone.&lt;&#x2F;p&gt;
&lt;p&gt;The following histogram gives you an idea of what I mean:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;socks_even.svg&quot; alt=&quot;Even piles of socks&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this case, we have about equally sized piles for each color. Looks
like a fair workload for every worker to me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;socks_uneven.svg&quot; alt=&quot;Uneven piles of socks&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the second case, we don&#x27;t have an equal distribution. I don&#x27;t want to sort the
gray socks in this example. We need to think a little harder here.&lt;&#x2F;p&gt;
&lt;p&gt;What can we do?&lt;&#x2F;p&gt;
&lt;p&gt;Most of the time it helps to think of other ways to split up work.
For example, we could have &lt;em&gt;two&lt;&#x2F;em&gt; workers sort the big gray pile together. One
sorts the large socks; the other one sorts the small ones. We run into another problem, though: Who decides what &amp;quot;large&amp;quot; and &amp;quot;small&amp;quot; means in this case?&lt;&#x2F;p&gt;
&lt;p&gt;So, instead of thinking too hard about a smarter approach, we decide to be
pragmatic here. Everyone just grabs an equally sized pile of socks — no
matter the color or the size — and gets
to work.&lt;&#x2F;p&gt;
&lt;p&gt;Most likely, there will be some remaining socks in each pile, which have no match.
That&#x27;s fine. We just throw them all together, mix the socks, create new piles from
that, and sort them again. We do so until we&#x27;re done.
We call that a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Scheduling_(computing)#task_queue&quot;&gt;task queue&lt;&#x2F;a&gt;. It has two advantages: First, you don&#x27;t need any additional agreements between the workers and second, it scales reasonably
well with the number of workers without thinking too hard about the problem
domain.&lt;&#x2F;p&gt;
&lt;p&gt;The tricky part about distributed systems is, that seemingly straightforward solutions can fail
miserably in practice.&lt;&#x2F;p&gt;
&lt;p&gt;What if our small piles look like this?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;.&#x2F;random_pile.jpg&quot; alt=&quot;A random pile of socks&quot; &#x2F;&gt; &lt;&#x2F;p&gt;
&lt;p&gt;The number of pairs in each pile is... sobering.
What we could do is run a very quick presorting step to increase the number of matches. Or maybe you come up with an even better idea?&lt;br &#x2F;&gt;
The cool thing is, once you have found a faster approach, it works for similar tasks, too.&lt;&#x2F;p&gt;
&lt;p&gt;Problems like this have their roots in Computer Science, and they can be found everywhere.
Personally, I don&#x27;t like the term Computer Science too much. I prefer
the German term &amp;quot;Informatik&amp;quot;, which I would roughly translate as &amp;quot;Information Science&amp;quot;.
Because the real essence of what we&#x27;re doing here is to find a general way to solve a
whole &lt;em&gt;class&lt;&#x2F;em&gt; of problems. We think of the nature of objects and their properties.
We don&#x27;t sort socks; we try to answer the &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2Op3QLzMgSY&quot;&gt;fundamental questions of information&lt;&#x2F;a&gt;. Maybe now you can understand why I&#x27;m so passionate about this subject.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and here&#x27;s a related post about &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2017&#x2F;why-i-love-programming&#x2F;&quot;&gt;why I love programming&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Why I Love Programming</title>
            <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2017/why-i-love-programming/</link>
            <guid>https://endler.dev/2017/why-i-love-programming/</guid>
            <description>&lt;p&gt;Programming has many faces. It is the science of structured thinking.
It is the art of eloquent expression.
It teaches you to be humble when you look at other peoples&#x27; fascinating work. 
Most of all, it teaches you a lot about yourself.&lt;br &#x2F;&gt;
While the syntax may change, the concepts will not.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Tools</title>
            <pubDate>Sun, 30 Oct 2011 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2011/tools/</link>
            <guid>https://endler.dev/2011/tools/</guid>
            <description>&lt;p&gt;For as long as I can think, religious flamewars have infected computer science.&lt;&#x2F;p&gt;
&lt;p&gt;Having arguments about technical topics can be healthy, but flamewars are not. I&#x27;m sick of it.
I&#x27;m fed up with people telling me that their work environment is oh-so better,
faster and so on. That&#x27;s fine, but it doesn&#x27;t matter. Your equipment only plays a supporting role. You don&#x27;t even need
a computer to do programming. Donald Knuth wrote algorithms on a
notepad. Alan Turing wrote the first chess computer on a piece of
paper. And it worked. Beat that!&lt;&#x2F;p&gt;
&lt;p&gt;For an average user, the next best system is probably good enough. Just a few bucks and you get an excellent piece of hardware which is completely sufficient to surf the web, chat, archive photos, write documents, listen to music and watch movies. You can do that with a Pentium IV, 256 MB RAM and any recent Operating System (you will likely get that one for free). Heck, you can use your old Commodore for most of that. Computers have been mature and reliable enough to do all that for ages. There&#x27;s no need to upgrade your system for Farmville, just like there&#x27;s no reason to buy a new car if the old one works perfectly fine. When it comes to software, many of us still use Office 2000 or Photoshop 8 or VisiCalc without feeling the urge to upgrade.&lt;&#x2F;p&gt;
&lt;p&gt;Professionals find themselves in a similar situation. Well, maybe we invest a bit more money, but still, our hardware is incredibly cheap compared to our salary (hopefully). Nothing is perfect, but most of the time &lt;em&gt;it&#x27;s good enough&lt;&#x2F;em&gt;. That compiler you were using a decade ago? Still does the job. We are still using slightly modified descendants of programming languages from computing stone-age. Even if you&#x27;re doing numerical computing for NASA, your primary work environment is a black box running a text editor or an IDE.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t care what &lt;em&gt;you&lt;&#x2F;em&gt; are using to get things done. Find an environment that suits &lt;em&gt;your&lt;&#x2F;em&gt; needs and be happy with it. Maybe you use Emacs on a Lemote Yeelong netbook (hello Richard Stallman) or Vim on your workstation. It&#x27;s the same thing: A text editor running on a piece of metal.
You&#x27;re not a worse programmer for using Nano, ed or TextMate. Notepad works just fine, too. It loads files, saves files and lets you edit them in between. That&#x27;s a hell lot more functionality than Bill Gates and Paul Allen had when they wrote a BASIC interpreter for the Altair. If you find something you&#x27;re happy with, just stick with it but don&#x27;t start arguing. It isn&#x27;t worth your time.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t feed the trolls. When it comes to software, don&#x27;t fall into the old FreeBSD vs. Linux vs. Windows vs. mum cliche. Instead, talk about your code. Let&#x27;s look at your problem-solving skills. Let&#x27;s be pragmatic here.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Talk is cheap. Show me the code. - &lt;a href=&quot;https:&#x2F;&#x2F;lkml.org&#x2F;lkml&#x2F;2000&#x2F;8&#x2F;25&#x2F;132&quot;&gt;Linus Torvalds&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I don&#x27;t care which programming language you are using. Java? Fine. Visual Basic? Great! Scala, Cobol, PHP, C++? All fine. Write in Assembler or lolcode. Don&#x27;t moan about the fact that language X is missing feature Y. Write a library or use something different. Stop saying JavaScript is a toy language. It just doesn&#x27;t fit your needs. Instead, show me your Lisp adventure game. Write an interpreter for Brainfuck. Do something. Move things.&lt;&#x2F;p&gt;
&lt;p&gt;Concerning PHP, &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=2282523&quot;&gt;nir wrote on Hackernews&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any idiot can write a snarky comment about PHP. Very few get to write code that has anywhere near the impact it had.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Will you fall off your chair when I admit that I &lt;em&gt;like&lt;&#x2F;em&gt; the PHP syntax?
OK, it has its rough edges (do we really need the $ sign?) but what&#x27;s
more important is how much I can get done with it. PHP was my long time
go-to language for off the hook, one time scripts. It looks a bit ugly
but it runs on any server and comes with an enormous amount of built-in
functionality. It&#x27;s great for rapid prototyping and gluing things together.
In fact, when you write a piece of software, what you should strive for is to produce &lt;em&gt;quite good&lt;&#x2F;em&gt; software and what you really need to accomplish is &lt;em&gt;good enough&lt;&#x2F;em&gt; software to make your users happy.&lt;&#x2F;p&gt;
&lt;p&gt;Zed A. Shaw puts it quite nicely in the afterword to &lt;a href=&quot;https:&#x2F;&#x2F;learnpythonthehardway.org&#x2F;&quot;&gt;Learn Python the hard way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have been programming for a very long time. So long that it is incredibly boring to me. At the time that I wrote this book I knew about 20 programming languages and could learn new ones in about a day to a week depending on how weird they were. Eventually though this just became boring and couldn&#x27;t hold my interest. What I discovered after this journey of learning was that the languages didn&#x27;t matter, it was what you did with them. Actually, I always knew that, but I&#x27;d get distracted by the languages and forget it periodically. The programming language you learn and use does not matter. Do not get sucked into the religion surrounding programming languages as that will only blind you to their real purpose of being your tool for doing interesting things.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Don&#x27;t get emotional for any tool you use. An iPhone - I&#x27;m sorry to disappoint you - is just a phone. No magic. No &amp;quot;think different&amp;quot;. &amp;quot;But it&#x27;s evil!&amp;quot;, the ether says, &amp;quot;it&#x27;s not open source&amp;quot;. Well, Android just exists because Google needed to rapidly develop a mobile platform. It&#x27;s simply part of their business. There is no moral behind that. Google is a yet another company just like Microsoft or Apple.&lt;&#x2F;p&gt;
&lt;p&gt;My MacBook serves me as a solid tool, but if something &amp;quot;better&amp;quot; comes around, I will happily kick it out. I&#x27;ve ditched Firefox after five years just because Chrome is faster and I will get rid of Chrome when I find a worthy successor.
Vim is &lt;em&gt;quite good&lt;&#x2F;em&gt; in my opinion but if there&#x27;s a faster way to do things I&#x27;m not afraid to dump it. Instead get your hands dirty and fix the problems or craft something new.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Are you a Programmer?</title>
            <pubDate>Thu, 20 Oct 2011 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2011/are-you-a-programmer/</link>
            <guid>https://endler.dev/2011/are-you-a-programmer/</guid>
            <description>&lt;p&gt;My geography teacher once told the story of her first lecture at University.
As an introduction, her professor asked the class to draw
a map of Germany without any help and as accurate as possible. To her surprise, she was not
able to fill the map with much detail. Even the shape of the country was a bit vague.&lt;&#x2F;p&gt;
&lt;p&gt;She had seen thousands of images of Germany (her mother country) but
wasn&#x27;t able to reproduce it from her blurry memory. She would have to look it up.&lt;&#x2F;p&gt;
&lt;p&gt;Doesn&#x27;t this sound familiar? We rely on machines to manage large portions
of our knowledge. There&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2011&#x2F;on-hard-work&#x2F;&quot;&gt;hard work&lt;&#x2F;a&gt; involved to learn something by heart.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a similar test for programmers:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using a programming language of your choice, write a correct sorting
algorithm with an average runtime complexity of O(n*log n) (Heapsort,
Quicksort, Bucketsort, you name it) on a piece of paper without the help of any
external tools.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And by &lt;em&gt;correct&lt;&#x2F;em&gt; I mean it must be free of bugs without any modifications when you type it in.&lt;&#x2F;p&gt;
&lt;p&gt;You would be surprised by the large percentage of professional software
engineers who &lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;why-cant-programmers-program&#x2F;&quot;&gt;can&#x27;t pull this off&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some might argue that knowledge about details of programming language
syntax is unimportant: &amp;quot;Why learn all the little nitpicks when you know
how to use a search engine? Why start with a clean slate when you can easily
copy, paste and modify an example from a tutorial?
Every few years&#x2F;months I have to completely relearn the syntax for a different language anyway.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;But that is a myth. If you know only
one programming language &lt;strong&gt;really&lt;&#x2F;strong&gt; well - even if it is something
outdated like Fortran or COBOL - you could easily earn a fortune with
that knowledge. Suppose you started with C in 1975. You could still
use the same syntax today - almost four decades later.
Same for text editors. Emacs and Vim are both decades
old. They are battle-hardened. I don&#x27;t care which one you prefer, but you
will spend a large part of your life with your tools so invest the time to master them.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note, it appears that very few people strive for perfection in anything they do.
They happily settle for &amp;quot;good enough&amp;quot;. This can have many different reasons, and I&#x27;m not
blaming anybody for not doing his homework but maybe I&#x27;m not alone with
that observation.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t know how to use your tools without a manual, you are a lousy craftsman.
If you need a dictionary to write a simple letter, you will have a hard
time becoming a writer because it would already be challenging for you to form elegant, fluent
sentences -- let alone engaging and original stories.
I don&#x27;t want to read these books.&lt;&#x2F;p&gt;
&lt;p&gt;What makes a programmer?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;She has at least one programming language she knows inside out.&lt;&#x2F;li&gt;
&lt;li&gt;She can implement standard algorithms (i.e. for sorting, searching)
and data-structures (i.e. trees, linked lists) which are robust and
reasonably fast on the fly.&lt;&#x2F;li&gt;
&lt;li&gt;She has at least a basic understanding of complexity theory and
programming concepts like recursion and pointers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But, to be a good programmer, you should&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Be able to code in at least two fundamentally different programming
paradigms (i.e. declarative, functional).&lt;&#x2F;li&gt;
&lt;li&gt;Have experience with big software architectures.&lt;&#x2F;li&gt;
&lt;li&gt;Be familiar with your programming environment like the operating system and a sophisticated text editor of your choice. Preferably one, that is
easily extendable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And that is just the tip of the iceberg.
&amp;quot;There&#x27;s too much to learn!&amp;quot;, I hear some of you say.
Start slowly.
You need only three commands to start with Vim: &lt;code&gt;i&lt;&#x2F;code&gt;, &lt;code&gt;ESC&lt;&#x2F;code&gt;, &lt;code&gt;:wq&lt;&#x2F;code&gt;.
That&#x27;s enough for day one.&lt;&#x2F;p&gt;
&lt;p&gt;I realize that most of these essentials won&#x27;t be taught during lectures.
You have to learn a vast portion on your own.
But let&#x27;s face it: If you don&#x27;t know this stuff, you are &lt;em&gt;not&lt;&#x2F;em&gt; a programmer, you&#x27;re a freshman.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>On Hard Work</title>
            <pubDate>Thu, 13 Oct 2011 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2011/on-hard-work/</link>
            <guid>https://endler.dev/2011/on-hard-work/</guid>
            <description>&lt;p&gt;Great people get shaped by their achievements&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s Thomas Edison who developed countless prototypes before selling a single light bulb.&lt;&#x2F;li&gt;
&lt;li&gt;The unemployed Joanne K. Rowling writing Harry Potter in a Cafe while caring for her child.&lt;&#x2F;li&gt;
&lt;li&gt;Steve Wozniak creating the first personal computer in his spare time while working at HP.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What do they have in common?&lt;&#x2F;p&gt;
&lt;p&gt;They all lived through frustration and contempt but still reached their goals, even though the chances for success were
low. These people are stemming their strong will from an intrinsic curiosity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dedication&quot;&gt;Dedication&lt;&#x2F;h2&gt;
&lt;p&gt;Sure, I love what I do. I want to be a programmer for the rest of my life, but sometimes it seems simply too hard to finish a project.
I get scared by the big picture and fear that I won&#x27;t finish on time. What I need is a different mindset.&lt;&#x2F;p&gt;
&lt;p&gt;Dhanji R. Prasanna, a former Google Wave team member &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20150717074857&#x2F;https:&#x2F;&#x2F;rethrick.com&#x2F;p&#x2F;mmm&#x2F;&quot;&gt;made this observation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;And this is the essential broader point--as a programmer you must have a series of wins, every single day. It is the Deus Ex Machina of hacker success. It is what makes you eager for the next feature, and the next after that.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While Google Wave has not been commercially successful, it sure was a
technical breakthrough -- and it was a drag to push it out into public.
We always have to see our goal right in front of us, as we take a billion baby steps to reach it.
This is true for any profession. Winners never give up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;direction&quot;&gt;Direction&lt;&#x2F;h2&gt;
&lt;p&gt;Today it is easier to accomplish something meaningful than ever before.&lt;&#x2F;p&gt;
&lt;p&gt;If you are reading this, you have access to a powerful instrument -- a
computer with an Internet connection. We live in a time where a single
person can accomplish miracles without hard physical labor.
A time where billions of people can grow a business from their desk, get famous in minutes,
publish books in seconds and have instant access to large amounts of
data. The most potent development over the last 100
years has been the reduction of communication costs. Transferring a bit of
information to the other end of the world is virtually free and takes
fractions of a second. While proper education was a privilege of a lucky few
well into the 20th century, learning new things is now mostly a question of
will.&lt;&#x2F;p&gt;
&lt;p&gt;Nevertheless, learning is still a tedious task,
requiring patience and determination.
As the amount of information has increased, so have the ways of distraction.
Losing focus is just a click away.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;devotion&quot;&gt;Devotion&lt;&#x2F;h2&gt;
&lt;p&gt;Everybody can start something. Few will finish anything.
That&#x27;s because getting things done is hard, even if you love what
you&#x27;re doing. (Watch the beginnings of &lt;em&gt;There Will Be Blood&lt;&#x2F;em&gt; and &lt;em&gt;Primer&lt;&#x2F;em&gt; for a
definition of &lt;em&gt;hard work&lt;&#x2F;em&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;No matter what they tell you, achieving anything sustainable means hustling. It means making
sacrifices. It means pushing through.
It means selling something even though it isn&#x27;t perfect. Your beautiful project might turn into an ugly groundhog in
the end. Put makeup on it and get it out the door.&lt;&#x2F;p&gt;
&lt;p&gt;On a report about &lt;a href=&quot;https:&#x2F;&#x2F;www.bluesnews.com&#x2F;abrash&#x2F;chap70.shtml&quot;&gt;Quake&#x27;s 3D-Engine&lt;&#x2F;a&gt;, developer Michael Abrash says:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the end of a project, the design is carved in stone, and most of the work involves fixing bugs, or trying to figure out how to shoehorn in yet another feature that was never planned for in the original design. All that is a lot less fun than starting a project, and often very hard work--but it has to be done before the project can ship. As a former manager of mine liked to say, &amp;quot;After you finish the first 90% of a project, you have to finish the other 90%.&amp;quot; It&#x27;s that second 90% that&#x27;s the key to success.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A lot of programmers get to that second 90%, get tired and bored and frustrated, and change jobs, or lose focus, or find excuses to procrastinate. There are a million ways not to finish a project, but there&#x27;s only one way to finish: Put your head down and grind it out until it&#x27;s done. Do that, and I promise you the programming world will be yours.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That last part has influenced me a lot.
The dedication, the urgency to reach your aims must come from within you.
It&#x27;s your raw inner voice speaking -- don&#x27;t let it fade away.
And when you are close to giving up, stop thinking so hard. Just try to
push forward and make a tiny step in the right direction.
You can&#x27;t lose.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Overkill – Java as a First Programming Language</title>
            <pubDate>Fri, 12 Feb 2010 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2010/overkill-java-as-a-first-programming-language/</link>
            <guid>https://endler.dev/2010/overkill-java-as-a-first-programming-language/</guid>
            <description>&lt;p&gt;I recently talked to a student in my neighborhood about his first programming
experiences. They started learning &lt;em&gt;Java&lt;&#x2F;em&gt; at school, and it soon turned out to be
horrible.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of us learned to code in languages like &lt;em&gt;BASIC&lt;&#x2F;em&gt; or &lt;em&gt;Pascal&lt;&#x2F;em&gt;. There was no
object orientation, no sophisticated file I&#x2F;O and almost no
modularization... and it was great. In &lt;em&gt;BASIC&lt;&#x2F;em&gt; you could just write&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;PRINT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;HELLO WORLD&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and you were done. This was actually a running program solving a basic and
reoccurring problem: Output some text on a screen.&lt;&#x2F;p&gt;
&lt;p&gt;If you wanted to do the same thing in &lt;em&gt;Java&lt;&#x2F;em&gt; you just write:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Do you see how much knowledge about programming you must have to achieve the
easiest task one could think of? Describing the program to a novice programmer
may sound like this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create a Main class containing a main-method returning void expecting a
string array as a single argument using the &lt;code&gt;println&lt;&#x2F;code&gt; method of the &lt;code&gt;out&lt;&#x2F;code&gt; object of
class &lt;code&gt;PrintStream&lt;&#x2F;code&gt; passing your text as a single argument.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;— please just don&#x27;t forget your brackets. This way your first programming hours are guaranteed to
be great fun.&lt;&#x2F;p&gt;
&lt;p&gt;OK. So what are the alternatives? I admit that nobody wants to write &lt;em&gt;BASIC&lt;&#x2F;em&gt;
anymore because of its lack of a sophisticated standard library for graphics
(&lt;em&gt;Java&lt;&#x2F;em&gt; doesn&#x27;t have one either) and its weak scalability. The language has to
be clean and straightforward. It should be fast enough for numerical tasks but not as
wordy as the rigid C-type bracket languages (sorry C++ guys). It should have a
smooth learning curve and provide direct feedback (compiled languages often
suck at that point). It should encourage clean code and reward best practices.
One language that provides all that is &lt;em&gt;&lt;em&gt;Python&lt;&#x2F;em&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And &lt;em&gt;Python&lt;&#x2F;em&gt; has even more: hundreds of libraries that help you with almost
everything, good integration into common IDEs (PyDev in Eclipse, IDLE...), a
precise and elegant syntax.&lt;&#x2F;p&gt;
&lt;p&gt;Here is our program from above written in &lt;em&gt;Python&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s no need to know about object orientation, scopes and function
arguments at this point. No householding or book-keeping. Yes, it&#x27;s an
interpreted language, but that&#x27;s not a deal breaker for beginners.&lt;&#x2F;p&gt;
&lt;p&gt;If you aren&#x27;t convinced yet, printing and formatting text output in &lt;em&gt;Java&lt;&#x2F;em&gt; is
relatively easy for an advanced programmer but the gruesome stuff begins
with file input:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;BufferedReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;FileNotFoundException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;FileReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;IOException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;fileIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) { 
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ 
            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;BufferedReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; myFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= 
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;BufferedReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;FileReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(filename))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
            
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;( ( line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; myFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;readLine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) { 
                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(line)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} 
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;FileNotFoundException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) { 
            e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;IOException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) { 
            e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} 
    } 
} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I hear you say: &amp;quot;Dude, file I&#x2F;O is pretty complex. It&#x27;s just the way it is&amp;quot;.
That&#x27;s true... &lt;em&gt;internally&lt;&#x2F;em&gt; . But a beginner should get an easy interface. &lt;em&gt;Python&lt;&#x2F;em&gt;
shows how it&#x27;s done:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;test.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(text)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code goes hand in hand with the natural understanding of how the process
works: &amp;quot;The computer opens a file, reads it and prints it&amp;quot;. Even a five-year-old kid can understand that. Nobody would start to explain: &amp;quot;Before you can
read a file you need a BufferedReader that works on a FileReader...&amp;quot; even if
this is precisely how it works &lt;em&gt;internally&lt;&#x2F;em&gt;. You want to explain the big picture
at first. The elementary principles of teaching a computer how to do useful
stuff. Otherwise, you will start frustrating beginners and fool them into
thinking that they are not bright enough for programming. Programming is fun
and starting with it is the most crucial step. So don&#x27;t spoil that
experience with layers of unneeded abstraction.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Howto Sort a Vector or a List in C++ using STL</title>
            <pubDate>Wed, 27 Jan 2010 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2010/howto-sort-a-vector-or-a-list-in-c-using-stl/</link>
            <guid>https://endler.dev/2010/howto-sort-a-vector-or-a-list-in-c-using-stl/</guid>
            <description>&lt;p&gt;A little code snippet that people need very often.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Why I Love Text Files</title>
            <pubDate>Sun, 10 Jan 2010 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2010/why-i-love-text-files/</link>
            <guid>https://endler.dev/2010/why-i-love-text-files/</guid>
            <description>&lt;p&gt;Text files are the single most important way we can communicate with computers. It&#x27;s no coincidence that they are also the most vital way to interact with other human beings. What we can achieve with text files is invaluable: Write it once and refer to it whenever you want to get the message across in the future. Write a program (it&#x27;s just text), save it and let the machine execute it whenever you like. Write another text file which contains the rules for the execution of your program and the computer runs your application exactly as you specified (&lt;code&gt;cron&lt;&#x2F;code&gt; files do that on Unix).&lt;&#x2F;p&gt;
&lt;p&gt;Text files can be structured in any way you can imagine. Some flavours are &lt;a href=&quot;https:&#x2F;&#x2F;www.json.org&#x2F;&quot;&gt;JSON&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;daringfireball.net&#x2F;projects&#x2F;markdown&#x2F;&quot;&gt;Markdown&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;&quot;&gt;SVG&lt;&#x2F;a&gt;. It&#x27;s all just text. There exist a billion of programs and algorithms to access, modify and distribute text files. You can write them with &lt;em&gt;Emacs&lt;&#x2F;em&gt;, print them on a terminal, pipe them through &lt;em&gt;sed&lt;&#x2F;em&gt; and send them via email to a friend who publishes them on the web. Because text files are so important we have good support for them on any computing system. On Unix, everything is a file and &lt;em&gt;HTML&lt;&#x2F;em&gt; is just structured text. It&#x27;s a simple and powerful tool to make a contribution to society that outlasts our lives.&lt;&#x2F;p&gt;
&lt;p&gt;I have a single text file in my mac dock bar which is called &lt;code&gt;TODO.txt&lt;&#x2F;code&gt;. I open it every day, and after years of experimenting with different task management apps from simple command line tools to sophisticated online information storage systems, I always came back to plain text files. And the explanation is simple: If humanity will still be around a thousand years from now, chances are that plain text files are one of the very few file formats that will still be readable.&lt;&#x2F;p&gt;
&lt;p&gt;They are an incremental part of how we can modify our environment without even leaving our desk. They have no overhead and can contain a single thought or the complete knowledge of our species. Distributing textual information is so vital for us that we permanently develop faster distribution networks – the fastest by now being the internet.&lt;&#x2F;p&gt;
&lt;p&gt;On the web, you have instant access to a virtually endless amount of information and data distributed as plain text files. New web services made accessing the data even easier offering &lt;code&gt;APIs&lt;&#x2F;code&gt; and &lt;code&gt;feeds&lt;&#x2F;code&gt;. You can pull down the data from their servers and make statistics with a programming language of your choice. As you may have noticed, my affinity to text files partially comes from my programming background. As &lt;a href=&quot;http:&#x2F;&#x2F;matt.might.net&#x2F;articles&#x2F;console-hacks-exploiting-frequency&#x2F;&quot;&gt;Matt Might&lt;&#x2F;a&gt; correctly points out on his blog:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The continued dominance of the command line among experts is a testament to the power of linguistic abstraction: when it comes to computing, a word is worth a thousand pictures.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Whenever you like a text on the web, just link to it and create a wonderful chain of ideas. Want to read it later or recommend it to a friend? Just share the text or print it on paper. The fact that we all take such things for granted is a testament for the power of text files and their importance for the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Information_Age&quot;&gt;information age&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;openbook&#x2F;utp&#x2F;&quot;&gt;Unix Text Processing (PDF)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Running Legacy Code</title>
            <pubDate>Sun, 08 Nov 2009 00:00:00 +0000</pubDate>
            <link>https://endler.dev/2009/running-legacy-code/</link>
            <guid>https://endler.dev/2009/running-legacy-code/</guid>
            <description>&lt;p&gt;This short article deals with a severe problem in software development: bit rot.
When switching to a new platform (for instance from Windows XP to Windows Vista&#x2F;7), the programmers need to make sure that old bits of code run flawlessly. There are several ways to achieve this goal that will be discussed in the next paragraphs:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;porting-the-code&quot;&gt;Porting the code&lt;&#x2F;h2&gt;
&lt;p&gt;This is generally considered a hard path to follow. For non-trivial legacy code-blocks, chances are high that they contain side-effects and hacks to make them work in different environments. Porting code means replacing parts of the program that use functions and methods that don&#x27;t exist anymore with new ones which make use of the modern libraries  and routines of the new platform. The significant advantages are maintainable software and sometimes faster running programs. But it may be needed to hack the new platform libraries in order to preserve the whole functionality of an old application. When changing an algorithm inside legacy code, the ported version may become unstable. Thus there may be better ways of maintaining obsolete code today.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;emulators&quot;&gt;Emulators&lt;&#x2F;h2&gt;
&lt;p&gt;Emulators work much the same like porting the code. You replace old function calls with new ones to make everything work again. &lt;br &#x2F;&gt;However you don&#x27;t alter the old codebase itself (because you may not have the source code available) but you create a new compatibility layer that &amp;quot;translates&amp;quot; the communication between the underlying operating system and software (our new platform) and our old software. Emulation can also be very fast and run stable for many years but writing an emulator can be even harder than porting the code because an educational guess may be needed to figure out how the program works internally. Additionally, the emulator itself may become obsolete in the future and might eventually  be replaced by a new one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;virtual-machines&quot;&gt;Virtual machines&lt;&#x2F;h2&gt;
&lt;p&gt;During the last years, a new approach was gaining popularity. The idea is simple: Don&#x27;t touch anything. Take the whole platform and copy it in order to run old software. The old software runs on top of the old operating system within a virtual machine that runs on the new platform.&lt;&#x2F;p&gt;
&lt;p&gt;From a sane software developers view, this method is ridiculous. A lot of resources are wasted along the way. The system is busier switching contexts from an old platform to the new one and back than running the actual legacy program. However, with cheap and capable hardware everywhere this idea gets more and more interesting. As &lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;hardware-is-cheap-programmers-are-expensive&#x2F;&quot;&gt;Steve Atwood coined it&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always try to spend your way out of a performance problem first by throwing faster hardware at it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And he&#x27;s right. The Microsoft developers did the same on their new NT 6.0 platform (Vista, Windows 7, Windows Server 2008...): Windows XP is running on a virtual machine. This way everything behaves just like one would run the software on the old system. And by optimizing the performance bottlenecks (input&#x2F;output, context switches), one gets a fast and stable, easy to maintain product.&lt;&#x2F;p&gt;
&lt;p&gt;Every method has its major advantages and disadvantages. It&#x27;s on the developer to select the appropriate strategy.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
